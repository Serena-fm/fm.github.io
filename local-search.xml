<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot的web学习</title>
    <link href="/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Springboot的Web学习与应用</p><span id="more"></span><h1 id="SpringBoot的web学习"><a href="#SpringBoot的web学习" class="headerlink" title="SpringBoot的web学习"></a>SpringBoot的web学习</h1><h2 id="请求响应原理"><a href="#请求响应原理" class="headerlink" title="请求响应原理"></a>请求响应原理</h2><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-1%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86.png" alt="image-20231213141803762"></p><ul><li>HttpServletRequest：DispathcherServlet生成的请求体</li><li>HttpServletReponse：DispathcherServlet生成的响应体</li><li>CS架构：客户端&#x2F;服务器架构（开发维护麻烦，体验良好）</li><li>BS架构：浏览器&#x2F;服务器的架构。客户只需要浏览器，应用程序的逻辑和数据存储抖子啊服务端</li></ul><h2 id="测试工具：Postman（Apipost-Apifox）"><a href="#测试工具：Postman（Apipost-Apifox）" class="headerlink" title="测试工具：Postman（Apipost,Apifox）"></a>测试工具：Postman（Apipost,Apifox）</h2><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><ul><li><strong>Parameter：（GET）附带在URL后面</strong></li><li>获取方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//原始方法，较为繁琐以及类型转换</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">//验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//建议方法，会自动进行类型转换</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(String name,String password)</span>&#123;<span class="hljs-comment">//使用@RequestParam(name=&quot;name&quot;)+参数 可以进行映射而不必参数名一致，但此时参数必须传递，也可以设置为不必须传递</span><br>    <span class="hljs-comment">//验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Post</strong>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-2%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0Post.png" alt="image-20231213150925747"></p><h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><ul><li>简单实体对象：请求参数名于实体类属性名一致，定义POJO接收即可</li><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>    <span class="hljs-keyword">private</span> String city;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Address address;<span class="hljs-comment">//另外一个实体类作为属性</span><br>    <span class="hljs-comment">//.....实现方法</span><br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/simplePojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplePojo</span><span class="hljs-params">(User user)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>传递方式：与简单参数基本一致</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-5%E5%AE%9E%E4%BD%93%E8%AF%B7%E6%B1%82.png" alt="image-20231213172515628"></p><ul><li>address.city表示adress的属性</li></ul><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><ul><li>请求参数名和数组名称相同且有多个</li><li>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E6%95%B0%E7%BB%84%E8%AF%B7%E6%B1%82.png" alt="image-20231214134154738"></p><ul><li>接收方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(String[] hobby)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><ul><li>使用@DateTimeFormat注解完成日期参数格式转换</li><li>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E8%AF%B7%E6%B1%82.png" alt="image-20231214134957056"></p><ul><li>请求方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dateParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParam</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:MM:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h3><ul><li>附在请求体之中，所以是Post请求</li><li>Json参数键名需要与形参对象属性名相同，可以自定义接受数据雷接收</li><li>请求方法</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-Json%E8%AF%B7%E6%B1%82.png" alt="image-20231214144132444"></p><ul><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><ul><li>@PathVarible获取路径参数</li><li>请求方法</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96.png" alt="image-20231214145347401"></p><ul><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id,<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        System.out.println(id+<span class="hljs-string">&quot; &quot;</span>+name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>Controller：接收请求，响应数据</li><li>Servicce：逻辑处理</li><li>Dao：数据访问，包括数据的增删改查</li></ul><h3 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h3><ul><li><p>内聚：软件之中各个功能呢模块的数据关系</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖，关联的程度</p></li><li><p>高内聚，低耦合</p></li></ul><h3 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h3><ul><li><p>控制反转（IOC）：对象的控制权由程序自身转移到外部，这种思想称为控制反转</p></li><li><p>自动注入（DI）：容器为应用程序提供运行时所依赖的资源，称之为依赖注入</p></li><li><p>Bean对象：IOC容器中创建，管理的对象，称之为Bean</p></li></ul><h3 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h3><ul><li>Bean对象的声明：将某个对象交割IOC容器管理</li></ul><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类的时候使用这个注解</td></tr><tr><td>@Controller</td><td>@Component衍生注解</td><td>标注在控制器上</td></tr><tr><td>@Service</td><td>@Component衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Respository</td><td>@Component衍生注解</td><td>标注在数据访问类上</td></tr></tbody></table><ul><li>Bean组件扫描<ul><li>Bean声明注解生效需要被组件扫描注解@ComponetScan扫面</li><li>@ComponentScan虽然无显示配置但实际上包含在启动类注解@SpringBootApplication之中，默认扫描范围在启动类所在包以及子包</li></ul></li></ul><h3 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h3><ul><li><p>Bean注入</p><ul><li><p>@Autowired注解，默认时按照类型进行，如果存在多个类型相同的Bean，将会报出错误</p></li><li><p>可以通过以下几个注解解决</p><blockquote><p>@Primary：设置bean的优先级</p><p>@Qualifier：配合@Autowired注解指定注入特定Bean</p><p>@Resource：相当于@Autowired与@Qualifier合并，直接指定并注入</p></blockquote></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceimpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span>&#123;<br>    <span class="hljs-comment">//注入时优先使用此bean</span><br>&#125;<br><br><span class="hljs-comment">//注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;EmpServiceimpl&quot;)</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-meta">@Resource(name=&quot;EmpServiceimpl&quot;)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot的web学习</title>
    <link href="/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Springboot的Web学习与应用</p><span id="more"></span><h1 id="SpringBoot的web学习"><a href="#SpringBoot的web学习" class="headerlink" title="SpringBoot的web学习"></a>SpringBoot的web学习</h1><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ul><li><p><strong>超文本传输协议</strong>，规定了浏览器和服务器之间数据传输的规则</p></li><li><p>特点：</p><ul><li>基于TCP协议，稳定安全</li><li>基于请求-响应模型：一次请求对应一次响应</li><li>HTTP协议是无状态协议，对于事务处理没有记忆能力，每次请求都是独立的<ul><li>优点：速度快</li><li>缺点：多次请求不能共享数据</li></ul></li></ul></li></ul><h3 id="HTTP请求数据格式"><a href="#HTTP请求数据格式" class="headerlink" title="HTTP请求数据格式"></a>HTTP请求数据格式</h3><h4 id="POST请求和GET请求形式"><a href="#POST请求和GET请求形式" class="headerlink" title="POST请求和GET请求形式"></a>POST请求和GET请求形式</h4><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javaweb-1http%E8%AF%B7%E6%B1%82.png" alt="image-20231212150159442"></p><ul><li>请求头</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-2http%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="image-20231212150419411"></p><ul><li><p>请求体：POST请求，存放请求参数</p></li><li><p>GET请求与POST请求区别</p><ul><li><p>GET请求无请求体，大小有限制，<strong>通过URL参数传递的，这些参数属于查询字符串（Query String）</strong></p><blockquote><p>查询字符串是位于URL末尾的一组键值对，键值对之间用”&amp;”符号连接，键和值之间使用”&#x3D;”符号连接</p><p>GET请求的查询字符串通常用于向服务器传递简单的数据</p></blockquote></li><li><p>POST请求有大小限制</p></li></ul></li></ul><h3 id="HTTP响应数据格式"><a href="#HTTP响应数据格式" class="headerlink" title="HTTP响应数据格式"></a>HTTP响应数据格式</h3><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-3http%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F.png" alt="image-20231212160809457"></p><ul><li>响应码</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-4http%E5%93%8D%E5%BA%94%E7%A0%81.png" alt="image-20231212161134707"></p><ul><li>常见状态码</li></ul><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求处理<strong>成功</strong></td></tr><tr><td>302</td><td>Found</td><td>只是所请求的<strong>资源已移动</strong>到由Location响应头给定的URL,浏览器会自动重新访问</td></tr><tr><td>304</td><td>Not Modified</td><td>隐式重定向。请求<strong>资源上次获取后并未更改</strong>，可以自己在本地缓存访问</td></tr><tr><td>400</td><td>Bad Request</td><td>请求有<strong>语法错误</strong>，服务器并不理解</td></tr><tr><td>403</td><td>Forbidden</td><td>收到请求，但是<strong>拒绝提供服务</strong>（无权限等）</td></tr><tr><td>404</td><td>Not Found</td><td>请求<strong>资源不存在</strong></td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求<strong>方法有误</strong>，例如POST请求用了GET</td></tr><tr><td>428</td><td>Precondition Required</td><td>服务器要求此请求<strong>有条件</strong>，比如特定的请求头</td></tr><tr><td>429</td><td>Too Many Requests</td><td>太多请求被<strong>限速</strong>了，配合Retry-After(多长时间后可以请求)请求头使用</td></tr><tr><td>431</td><td>Request Header Fields Too Large</td><td><strong>请求头太大</strong>，服务器不愿意处理这个请求</td></tr><tr><td>500</td><td>Internal Serval Error</td><td>服务器<strong>发生不可预期的错误</strong></td></tr><tr><td>503</td><td>Service Unavailable</td><td><strong>服务器未能准备</strong>好处理请求</td></tr></tbody></table><h3 id="协议解析"><a href="#协议解析" class="headerlink" title="协议解析"></a>协议解析</h3><ul><li>web服务器用于处理和返回http格式的请求和数据，对HTTP协议进行封装</li><li>常见的web服务器： <strong>Tomcat</strong></li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ul><li>一个Apache旗下的开源免费的Web服务器，支持Servlet&#x2F;JSP少量javaEE规范</li><li>JavaEE：Java企业版，指Java企业级开发的计数规范的总和，包括JDBC，JNDL等等</li><li>Tomcat也被称为Web容器，Servlet容器，Servclet依赖于Tomcat运行</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>SpringBoot内嵌了Tomcat,也可自行下载</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习</title>
    <link href="/2023/12/11/Vue%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/11/Vue%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Vuet的学习与应用</p><span id="more"></span><h1 id="Vue学习"><a href="#Vue学习" class="headerlink" title="Vue学习"></a>Vue学习</h1><h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><ul><li>是一套前端开那关键，免除原生JavaScript中的DOM操作</li><li>基于MVVM的思想，实现数据的双向绑定</li></ul><h2 id="Vue的快速使用"><a href="#Vue的快速使用" class="headerlink" title="Vue的快速使用"></a>Vue的快速使用</h2><ul><li>定义数据模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">e1</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Hello Vue!&quot;</span><br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>编写试图</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>//输入框</span><br><span class="language-xml">        &#123;&#123;message&#125;&#125;//一个插值表达式，文本会随着输入框内容变化而变化</span><br><span class="language-xml">        /*表达式内容</span><br><span class="language-xml">        变量</span><br><span class="language-xml">        三元运算符</span><br><span class="language-xml">        函数调用</span><br><span class="language-xml">        算术运算</span><br><span class="language-xml">        */</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaVue-1%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="image-20231211213929358"></p><ul><li><p>常用指令</p><ul><li><p>带有**v-**前缀的特殊指令</p></li><li><p><strong>v-bind与v-model</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">e1</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://www.XXX.com&quot;</span><br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br><span class="hljs-comment">//v-bind为标签绑定属性值</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>XXX网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>或者<br>&lt;a :href=<span class="hljs-string">&quot;url&quot;</span>&gt;<span class="hljs-variable constant_">XXX</span>网&lt;/a&gt;<br><span class="hljs-comment">//v-model在表单元素上创建双向数据绑定</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-if和v-show</strong></p></li></ul><table><thead><tr><th>v-if</th><th>条件性渲染某元素，判断为true渲染，否则不渲染</th></tr></thead><tbody><tr><td><strong>v-else-if</strong></td><td><strong>同上</strong></td></tr><tr><td><strong>v-else</strong></td><td><strong>同上</strong></td></tr><tr><td><strong>v-show</strong></td><td><strong>根据条件展示某元素，区别子啊与切换的是display属性的值</strong></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//年龄&#123;&#123;age&#125;&#125;,经判定为</span><br>&lt;span v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;age&lt;=35&quot;</span>&gt;年轻人&lt;/span&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;age&gt;35&amp;&amp;age&lt;60&quot;</span>&gt;</span>中年人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>老年人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">//v-show</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age&lt;=35&quot;</span>&gt;</span>年轻人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaVue-2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="image-20231211220648485"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2023/12/11/JavaScript/"/>
    <url>/2023/12/11/JavaScript/</url>
    
    <content type="html"><![CDATA[<p>JavaScript的学习与应用</p><span id="more"></span><h1 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h1><h2 id="JacaScript是什么"><a href="#JacaScript是什么" class="headerlink" title="JacaScript是什么"></a>JacaScript是什么</h2><ul><li><strong>是一门跨平台的，面向对象的，不需要编译而仅仅需要解析的脚本语言</strong>，用于控制网页行为来进行交互</li></ul><h2 id="JavaScript基本使用"><a href="#JavaScript基本使用" class="headerlink" title="JavaScript基本使用"></a>JavaScript基本使用</h2><ul><li><script></script>标签用于Html文档之中<blockquote><p>注：此标签不能自闭合</p></blockquote></li><li><p>内部注入：一般置于<body>元素底部，以改善显示速度</p></li><li><p>外部脚本：<Script src="js/demo.js"></script></p></li><li><p>注释：&#x2F;&#x2F;，&#x2F;**&#x2F;</p></li><li><p><strong>输出语句</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>/<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//弹出警告框</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//写入Html在浏览器显示</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//写入控制台</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>声明变量</strong>：var (variable)</p><ul><li><p>弱类型语言，变量可以重复输入类型或者值进行覆盖，且作用域一律为全局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">20</span>;<br>a=<span class="hljs-string">&quot;张三&quot;</span><br><span class="hljs-comment">//ES6新增了let声明局部变量，只在对应代码块生效，const声明变量不能修改</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>数据类型</strong></p><ul><li>原始类型<ul><li>number：整数，小数类型，<strong>条件判断时</strong>只有0与NaN视为为false</li><li>string: 字符串，单双引号均可，只有空字符串视为为false</li><li>Boolean：布尔类型</li><li>null：对象为空</li><li>undefined：变量未进行初始化，视为false</li></ul></li><li><strong>typeof+变量名</strong> 可以获取变量类型</li></ul></li><li><p><strong>函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">functioname</span>(<span class="hljs-params">参数列表</span>)&#123;<br><span class="hljs-comment">//有返回值则返回，没有则不需要操作</span><br>&#125;<br>另外的形式:<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>或者<br><span class="hljs-keyword">var</span> add=<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result=<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">//超出函数列表的参数会被视为抛弃</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Array数组</strong></p><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表)；<br><span class="hljs-keyword">var</span> 变量名=[元素列表]；<br>例子<br><span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr[索引]=值;<br><span class="hljs-comment">//例子：</span><br>arr[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>String对象</strong></p><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;...&quot;</span>);<br><span class="hljs-keyword">var</span> 变量名=<span class="hljs-string">&quot;..&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>调用</p><ul><li>属性：length</li><li>方法：</li></ul><table><thead><tr><th>charAt()；</th><th>返回指定位置的字符</th></tr></thead><tbody><tr><td><strong>indexOf()；</strong></td><td><strong>检索字符串</strong></td></tr><tr><td><strong>trim();</strong></td><td><strong>去除字符串两边空格</strong></td></tr><tr><td><strong>substring();</strong></td><td><strong>提取字符串两个指定的索引号值之间的字符</strong></td></tr></tbody></table></li></ul></li><li><p><strong>自定义对象</strong></p><ul><li><p>定义格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 对象名 =&#123;<br><br>    属性名<span class="hljs-number">1</span>：属性值，<br><br>    属性名<span class="hljs-number">2</span>：属性值，<br><br>    函数名称: <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;&#125;<br>&#125;<br><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">var</span> user=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>    eat=<span class="hljs-string">&quot;function&quot;</span>()&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用膳&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">user.<span class="hljs-title function_">eat</span>();<span class="hljs-comment">//对象.函数名();</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>);<span class="hljs-comment">//对象.属性名</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Json对象</strong></p><ul><li><p>通过JavaScript对象标记法书写的文本，<strong>本质是一个带键值对的字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><span class="hljs-comment">//key必须用&quot;&quot;标记</span><br></code></pre></td></tr></table></figure></li><li><p>定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-string">&#x27;&#123;&quot;key1&quot;:value1,&quot;key2&quot;:value2&#125;&#x27;</span>;<br><span class="hljs-comment">//示例</span><br><span class="hljs-keyword">var</span> userstr=<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Herry&quot;,&quot;age&quot;:18,&quot;addr&quot;:[&quot;北京&quot;，&quot;上海&quot;]&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>Json字符串转换为JS,JSON字符串对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jsObject =<span class="hljs-title class_">Json</span>.<span class="hljs-title function_">parse</span>(userstr);<br><span class="hljs-keyword">var</span> jsonStr=<span class="hljs-title class_">Json</span>.<span class="hljs-title function_">stringify</span>(jsObject);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>BOM对象</strong></p><ul><li><p>JavaScript将浏览器的各个组成部分封装成对象</p></li><li><p>组成</p><ul><li>Window：浏览器窗口对象</li><li>Navigator:：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location： 地址栏对象</li></ul></li><li><p>Window</p><ul><li>属性（window.属性名直接调用，window.可以省略）<ul><li>history：对History的只读引用</li><li>Location：用于窗口或者框架的Location对象</li><li>navigator：对Nagvitor对象的只读引用</li></ul></li><li>方法<ul><li>alert()：显示带有一段消息和一个确认按钮的警告框</li><li>confirm()：显示带有一段消息以及确认按钮和取消按钮的对话框</li><li>setInterval：按照指定的周期（ms）来调用安徽念书或者计算表达式</li><li>setTimeout：在指定的毫秒后调用函数或计算表达式</li></ul></li></ul></li><li><p>Location</p><ul><li><p>window对象调用</p></li><li><p>一般调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.属性；<br></code></pre></td></tr></table></figure></li><li><p>属性：</p><ul><li>href：设置返回完整的URL</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;https://www.XXX.cn&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>DOM</strong></p><ul><li><p><strong>文档对象模型</strong></p><ul><li>将标记语言的各个组成部分封装为对应的对象<ul><li>Docurment：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaScript-1DOM.png" alt="image-20231211211737750"></p><ul><li>XMLDOM-XML 文档标准模型</li><li>HTMLDOM-HTML 文档的标准模型<ul><li>Image:<img></li><li>Button:<input type='button'></li></ul></li></ul></li><li><p>Dcument对象中提供了以下获取Element元素</p><table><thead><tr><th>getElementById(‘h1’);</th><th>根据id属性获取，返回单个Element对象</th></tr></thead><tbody><tr><td><strong>getElementByTagname(‘div’);</strong></td><td><strong>根据标签名称获取，返回单个Element对象数组</strong></td></tr><tr><td><strong>getElementByName(‘hobby’);</strong></td><td><strong>根据name属性获取，返回单个Element对象数组</strong></td></tr><tr><td><strong>getElementByClassName(‘hobby’);</strong></td><td><strong>根据class属性获取，返回单个Element对象数组</strong></td></tr></tbody></table></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2023/12/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/12/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>网络编程基础知识和反射讲解</p><span id="more"></span><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><ul><li>IP地址：设备在网络之中的地址</li><li>端口号：应用程序在设备之中的唯一标识</li><li>协议：数据在网络之中传播的规则</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><p>常见的是IPv4协议</p></li><li><p>32bit，4字节长度</p></li><li><p>分类：公网地址（万维网）和私有地址（局域网地址）</p><p>私有地址： 192.168.0.0~192.168.255.255</p><p>本机地址：127.0.0.1也称localhost</p></li><li><p>InetAddress类：通过ip获取主机对象</p></li></ul><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><ul><li>由两个字节表示的整数，取值为0~65535</li><li>0~1023一般是被占用的</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li><strong>反射允许对封装类的字段，方法和构造函数的信息进行编程访问</strong></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Java%E5%8F%8D%E5%B0%84-1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9B" alt="image-20231210163819945"></p><ul><li>能够获取函数的所有信息</li></ul><h2 id="获取字节码对象的三种方式（获取Class类对象）"><a href="#获取字节码对象的三种方式（获取Class类对象）" class="headerlink" title="获取字节码对象的三种方式（获取Class类对象）"></a>获取字节码对象的三种方式（获取Class类对象）</h2><table><thead><tr><th align="left">1.Class.forName(“全类名”);</th><th>源代码阶段使用（最为常用）</th></tr></thead><tbody><tr><td align="left"><strong>2.类名.class</strong></td><td><strong>加载阶段</strong></td></tr><tr><td align="left"><strong>3.对象.getClass</strong></td><td><strong>运行阶段</strong></td></tr></tbody></table><h2 id="利用反射获取构造方法"><a href="#利用反射获取构造方法" class="headerlink" title="利用反射获取构造方法"></a>利用反射获取构造方法</h2><ul><li><p>Class类之中用于获取构造函数方法的方法</p><table><thead><tr><th>Constructor&lt;?&gt;[] getConstructors()；</th><th>返回所有公共构造方法</th></tr></thead><tbody><tr><td><strong>Constructor&lt;?&gt;[] getDeclaredConstructors();</strong></td><td><strong>返回所有构造方法对象的数组</strong></td></tr><tr><td><strong>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)</strong></td><td><strong>返回单个公共构造方法对象</strong></td></tr><tr><td><strong>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;..paramterTypes)</strong></td><td><strong>返回单个构造函数方法对象</strong></td></tr></tbody></table></li><li><p>Constructor类中用于创建对象的方法</p><table><thead><tr><th>T newInstance(Object… initargs);</th><th>根据指定的构造方法创建对象</th></tr></thead><tbody><tr><td><strong>setAccessible(boolean flag)</strong></td><td><strong>设置为true，表示取消访查</strong></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect.Student&quot;</span>);<br>Constructor[] cons1=clazz.getContructors();<br><span class="hljs-comment">//获取所有构造函数</span><br><span class="hljs-keyword">for</span>(Constructor con: cons2)&#123;<br>System.out.println(cons2);<br>&#125;<br><span class="hljs-comment">//获取空参构造</span><br>Constructor con2=clazz.getDeclaredConstructor();<br><span class="hljs-comment">//一个String参数构造,依次类推,有多个的话会抛异常</span><br>Constructor con3=clazz.getDeclaredConstructor(String.class);<br><span class="hljs-comment">//获取所有参数</span><br>Parameter[]=parameter=con3.getParameters();<br></code></pre></td></tr></table></figure><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>Class.forName(<span class="hljs-string">&quot;org.example.student&quot;</span>);<br>Constructor con3=clazz.getDeclaredConstructor(<span class="hljs-type">int</span>.class);<br>System.out.println(con3);<br><span class="hljs-comment">//通过构造函数创建对象</span><br>student stu=(student) con3.newInstance(<span class="hljs-number">23</span>);<br>System.out.println(stu);<br></code></pre></td></tr></table></figure><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Java%E5%8F%8D%E5%B0%84-2%E7%BB%93%E6%9E%9C%2Cpng" alt="image-20231210233613971"></p><ul><li>后面的标识符号为16进制的指针</li><li>getClass().getName()+‘@’+Integer.toHexString(hashCode())</li><li>类所在的包名.类名 + @ + 哈希码值</li></ul><h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><ul><li><p>Class内获取成员变量</p><table><thead><tr><th><strong>Field[] getFields();</strong></th><th><strong>返回所有公共成员变量数组</strong></th></tr></thead><tbody><tr><td><strong>Field[] getDeclaredFields();</strong></td><td><strong>返回所有成员变量数组</strong></td></tr><tr><td><strong>Field getField(String name);</strong></td><td><strong>返回单个公共成员变量数组</strong></td></tr><tr><td><strong>Field getDeclaredField(String name);</strong></td><td><strong>返回单个成员变量数组</strong></td></tr></tbody></table></li><li><p>Field用于创建对象方法</p><blockquote><p>void set(Object obj,Object value);</p><p>Object get(Object obj);</p><p>int getmodifier();&#x2F;&#x2F;获取修饰符号</p><p>String getName();</p></blockquote></li></ul><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><ul><li><p>Class之中获取成员方法</p><table><thead><tr><th>Method[] getmethods();</th><th>获取所有公共成员方法</th></tr></thead><tbody><tr><td><strong>Method[] getDeclaredmethods();</strong></td><td><strong>获取所有成员方法</strong></td></tr><tr><td><strong>Method getmethod(Class&lt;?&gt;…parameterTypes);</strong></td><td><strong>返回单个公共成员方法</strong></td></tr><tr><td><strong>Method getDeclaredmethod(Class&lt;?&gt;…parameterTypes);</strong></td><td><strong>返回单个成员方法</strong></td></tr></tbody></table></li><li><p>Method类用于创建对象</p><blockquote><p>Object invoke(Object obj,Object…args);</p><p>参数一：用obj对象调用</p><p>参数二：调用方法传递的参数</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>反射</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2023/12/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/12/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Java多线程的一些解释与应用</p><span id="more"></span><h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="多线程的一些概念"><a href="#多线程的一些概念" class="headerlink" title="多线程的一些概念"></a>多线程的一些概念</h2><ul><li><strong>并发和并行</strong>，二者并不排斥<ul><li>并发： <strong>单个CPU</strong>交替执行指令</li><li>并行： 多个指令在<strong>多个CPU</strong>上执行</li></ul></li><li><strong>死锁</strong><ul><li>一种错误情形，两个锁互相钳制无法释放锁导致崩溃</li></ul></li></ul><h2 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><blockquote><p>重写run方法</p><p>启动start</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 2.创建MyRunnable对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.把MyRunnable对象交给Thread处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li>不使用run方法而是start方法是因为调用run方法只是调用执行一次，<strong>start才是开启线程</strong></li></ul></li><li><p>优缺点：</p><p><strong>优点：编程简单</strong></p><p><strong>缺点：单继承的局限性，不能继承其他类，不便于扩展。</strong></p></li></ul><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><blockquote><p>1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</p><p>2.创建MyRunnable对象</p><p>3.把MyRunnable对象交给Thread处理 </p></blockquote><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一，常规写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 2.创建MyRunnable对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.把MyRunnable对象交给Thread处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//二，建议写法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过匿名内部类来实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;匿名内部类子线程的输出&quot;</span> + i);<br><br>        &#125;<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h3 id="实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）"><a href="#实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）" class="headerlink" title="实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）"></a>实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）</h3><blockquote><p>1.得到任务对象</p><p>第一步：定义一个线程任务类MyCallable实现Callable接口，重写call方法，该方法可以返回结果</p><p>第二步：用Future吧Callable对象封装成线程任务对象</p><p>2.把线程任务对象交给Thread处理</p><p>3.调用Thread的start方法启动任务</p><p>4.线程执行完毕后，通过FutureTask的get方法获得结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.创建任务对象</span><br><span class="hljs-comment">         */</span><br>        Callable&lt;String&gt; call1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 4.把Callable任务对象交给FutureTask对象</span><br><span class="hljs-comment">         * FutureTask的作用1：FutureTask实现了Runnable接口，此时就可以交给Thread了</span><br><span class="hljs-comment">         * FutureTask的作用2：可以在线程执行完毕后调用get方法得到线程执行的结果</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//Thread t = new Thread(call);  报错，Thread不能接收call对象</span><br>        FutureTask&lt;String&gt; f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call1);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 5.交给线程处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f1);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 6.启动线程</span><br><span class="hljs-comment">         */</span><br>        t1.start();<br><br><br><br>        Callable&lt;String&gt; call2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>);<br>        FutureTask&lt;String&gt; f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call2);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f2);<br>        t2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> f1.get();   <span class="hljs-comment">//直接调用call方法，可能还没有执行完，使用get时若发现线程未执行完会先等线程执行完毕</span><br>            System.out.println(<span class="hljs-string">&quot;第一个结果为：&quot;</span> + rs1);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> f2.get();   <span class="hljs-comment">//直接调用call方法，可能还没有执行完，使用get时若发现线程未执行完会先等线程执行完毕</span><br>            System.out.println(<span class="hljs-string">&quot;第二个结果为：&quot;</span> + rs2);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个实现类，实现Callable接口，记得声明结果的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2.重写call方法</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;子线程执行的结果是&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后两种方式优缺点：</p><p>1.优点： 可扩展性强，实现接口同时还可继承其它类</p><p>2.缺点： 编程相对复杂，不能直接使用Thread的方法</p></blockquote><h2 id="常见成员方法"><a href="#常见成员方法" class="headerlink" title="常见成员方法"></a>常见成员方法</h2><ul><li>具体例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;一号线程&quot;</span>);<br>        t1.start();<br><span class="hljs-comment">//        t1.setName(&quot;一号线程&quot;);</span><br>        System.out.println(t1.getName());<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;二号线程&quot;</span>);<br>        t2.start();<br><span class="hljs-comment">//        t2.setName(&quot;二号线程&quot;);</span><br>        System.out.println(t2.getName());<br><br>        <span class="hljs-comment">//获取当前线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(m.getName());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Main线程输出&quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)<br>                Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>); <span class="hljs-comment">//主线程休眠3000ms</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br>自定义线程<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-comment">//让父类的构造器进行构造</span><br>            <span class="hljs-built_in">super</span>(name);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;输出&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>一些特殊线程：<ul><li>守护线程：会随着非守护线程的消亡而消亡</li><li>出让线程：将自身CPU执行权出让，重新和其它线程抢夺</li></ul></li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul><li><strong>基本周期</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSethread-1.png" alt="image-20231208151125777"></p><ul><li><strong>6种状态</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSethread-3%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="JavaSE01-08线程状态之间的转换"></p><blockquote><p><strong>注意以下几点：</strong><br><strong>sleep()是睡眠，过程中不会释放锁对象，醒来后直接进入可运行状态</strong><br><strong>wait()是等待，过程中会释放锁对象，但是时间到了或者被notity时会重新获得锁对象，进入可运行状态</strong></p></blockquote><h2 id="线程的安全问题"><a href="#线程的安全问题" class="headerlink" title="线程的安全问题"></a>线程的安全问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><strong>多个线程同时操作一个共享资源可能会出现业务安全问题，称为线程安全问题</strong></p><ul><li><strong>源码解析</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//两个售票员卖同一批票</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    <br>    t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>    t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>    <br>    t1.start();<br>    t2.start();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> ticket=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticket&lt;<span class="hljs-number">100</span>)&#123;<br>                ticket++;<br>                System.out.println(getName()+<span class="hljs-string">&quot;正在卖第&quot;</span>+ticket+<span class="hljs-string">&quot;张票&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>运行上述代码后会出现一些错误现象</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javasethread-2%E9%94%99%E8%AF%AF%E7%A4%BA%E4%BE%8B.png" alt="image-20231208155324026"></p><ul><li><p><strong>解决办法</strong>： </p><ul><li><strong>同步</strong>代码块——<strong>对象锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><br>synchronize(锁对象)&#123;<span class="hljs-comment">//锁对象要唯一</span><br><span class="hljs-comment">//临界数据操作代码</span><br>&#125;<br><span class="hljs-number">2.</span><br>synchronize关键字修饰方法<br><span class="hljs-comment">//锁对象：1静态：当前字节码文件对象，2静态：this</span><br><span class="hljs-number">3.</span><br>Stringbuffer类方法自动上锁<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lock</strong>锁（JDK5之后）</p><p><strong>Lock是接口，采用实现类ReentrantLock来构建Lock锁对象</strong></p><blockquote><table><thead><tr><th>public ReentrantLock()</th><th>获得Lock锁的实现类对象</th></tr></thead><tbody><tr><td>void lock()</td><td>获得锁</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr></tbody></table></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> ticket=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(ticket&lt;<span class="hljs-number">100</span>)&#123;<br>                    ticket++;<br>                    System.out.println(getName()+<span class="hljs-string">&quot;正在卖第&quot;</span>+ticket+<span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<span class="hljs-comment">//放进finally以保证锁的释放</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待，而进行线程阻塞和唤醒的代价是比较高的（操作系统需要在用户态与内核态之间来回切换，代价很高，不过可以通过对锁优化进行改善）</p></blockquote><h3 id="锁的释放"><a href="#锁的释放" class="headerlink" title="锁的释放"></a>锁的释放</h3><blockquote><p>在以下情况下，<strong>持有锁的线程会释放锁</strong>：</p><ol><li><p>执行完同步代码块。</p></li><li><p>在执行同步代码块的过程中，遇到异常而导致线程终止。</p></li><li><p>在执行同步代码块的过程中，执行了锁所属对象的wait()方法，这个线程会释放锁，进行对象的等待池。</p></li></ol><p>除了以上情况外，只要持有锁的此案吃还没有执行完同步代码块，就不会释放锁。<strong>因此在以下情况下，线程不会释放锁</strong>：</p><ol><li><p>在执行同步代码块的过程中，执行了Thread.sleep()方法，当前线程放弃CPU，开始睡眠，在睡眠中不会释放锁。</p></li><li><p>在执行同步代码块的过程中，执行了Thread.yield()方法，当前线程放弃CPU，但不会释放锁。</p></li><li><p>在执行同步代码块的过程中，其他线程执行了当前对象的suspend()方法，当前线程被暂停，但不会释放锁。但Thread类的suspend()方法已经被废弃。</p></li></ol></blockquote><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><ul><li><strong>常用的模型：生产者与消费者模型</strong></li></ul><p><strong>object中提供的等待唤醒方法如下</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待并且释放所占锁，直到另外一个线程调用notify()或者notifyaAll</td></tr><tr><td>void notify()</td><td>唤醒正在等待的单个线程</td></tr><tr><td>void notufyAll()</td><td>唤醒正在等待的所有线程</td></tr></tbody></table><blockquote><p><strong>上述方法应该使用当前同步锁对象调用</strong><br><strong>注意：一定是先唤醒别人在等待，相当于自己叫醒别人再晕过去，否则相当于自己先晕过去没法叫人</strong></p></blockquote><p>代码实现：</p><ul><li>账户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;   <span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 小红 小明：取钱</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DrawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName(); <span class="hljs-comment">//取钱人</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                <span class="hljs-comment">// 钱够，可以取钱</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取钱成功，取出&quot;</span> + money + <span class="hljs-string">&quot;元！余额是：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>                <span class="hljs-comment">// 没钱了</span><br>                <span class="hljs-comment">// 钱不够</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 钱不够，不可取</span><br>                <span class="hljs-comment">// 唤醒别人存钱，等待自己取钱</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待，顺便放弃锁</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 亲爹 干爹 岳父：取钱</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depositMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName(); <span class="hljs-comment">//存钱人</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//没钱了，存钱</span><br>                <span class="hljs-built_in">this</span>.money += money;<br>                System.out.println(name + <span class="hljs-string">&quot;存钱&quot;</span> + money + <span class="hljs-string">&quot;元成功，余额为&quot;</span> + <span class="hljs-built_in">this</span>.money + <span class="hljs-string">&quot;元！&quot;</span>);<br>                <span class="hljs-comment">// 存完钱了</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 有钱了，不用存钱</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCardId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCardId</span><span class="hljs-params">(String cardId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>取钱线程类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Account acc;    <span class="hljs-comment">//定义一个账户对象，便于对账户对象进行操作</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//不断的存取前</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.DrawMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);     <span class="hljs-comment">//每隔三秒取一次钱</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>存钱线程类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepositThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Account acc;    <span class="hljs-comment">//定义一个账户对象，便于对账户对象进行操作</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DepositThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//不断的存取前</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.depositMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2</span> * <span class="hljs-number">1000</span>);     <span class="hljs-comment">//每隔两秒存一次钱</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 三个父亲线程（生产者） 两个孩子线程（消费者） 模拟存取钱通信思想（一存 一取）</span><br>        <span class="hljs-comment">// 1.创建账户对象，代表五个人共同操作的账户</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ICBC-999&quot;</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">//初始化零元</span><br><br>        <span class="hljs-comment">// 2.创建两个取钱线程 小明 小红</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<br><br>        <span class="hljs-comment">// 3.创建三个存钱线程 亲爹 干爹 岳父</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;亲爹&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;干爹&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;岳父&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="线程池的创建与使用"><a href="#线程池的创建与使用" class="headerlink" title="线程池的创建与使用"></a>线程池的创建与使用</h2><ul><li><p><strong>线程池是一个可以复用线程的技术。解决了每次都为新请求创建线程，导致开销较大的问题</strong></p><p>JDK5.0起提供了代表线程池的接口：ExecutorService</p><blockquote><p>得到线程池对象的两种办法：<br>一、使用ExecutorService的实现类ThreadPoolExecutor自己创建一个线程池对象。<br>二、使用Executors（线程池的工具类）调用方法放回不同特点的线程池对象。</p></blockquote></li><li><p><strong>ThreadPoolExecutor构造器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ThreadPoolExecutor（<span class="hljs-type">int</span> corePoolSize<span class="hljs-comment">//指定线程池的线程数量（核心线程）,不小于0</span><br><span class="hljs-type">int</span> maximumPoolSize,<span class="hljs-comment">//指定线程池可支持的最大线程数，最大数量&gt;=核心线程数量</span><br><span class="hljs-type">long</span> keepAliveTIme,<span class="hljs-comment">//指定临时线程的最大存活时间，大于0</span><br>TimeUnit unit,<span class="hljs-comment">//存活时间的单位（秒，分，时，天）：unit，时间单位</span><br>BlockingQueue workQueue,<span class="hljs-comment">//指定任务队列：workQueue，不能为null</span><br>ThreadFactory threadFactory,<span class="hljs-comment">//指定用那个线程工厂创建线程：threadFactory ,不能为null</span><br>RejectedExecutionHandler handler)<span class="hljs-comment">//指定线程忙，任务慢的时候，新任务来了怎么办，即拒绝策略：handler,不能为null</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>（重要！！！）注意两点：</strong><br><strong>临时线程什么时候创建：新任务提交时发现核心线程都在忙，任务队列满，还可以创建临时线程时才会创建。</strong><br><strong>什么时候开始拒绝任务：核心线程和临时线程都在忙，任务队列都满，新任务过来会拒绝。</strong></p></blockquote><p>ExecutorService的常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void execute(Runable command)</td><td>执行任务，无返回值，一般用于执行Runnable任务</td></tr><tr><td>Future submit(Callable Task</td><td>执行任务，返回未来任务对象获取线程结果，一般用于执行Callable任务</td></tr><tr><td>void shutdown()</td><td>等待任务执行完毕后关闭线程池</td></tr><tr><td>List shutdownNow()</td><td>立即关闭，停止正在执行的任务，返回队列中未执行的任务</td></tr></tbody></table><p>拒绝策略：</p><table><thead><tr><th>策略</th><th>详解</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy</td><td>丢弃任务抛出RejectedExecutionException异常</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy</td><td>丢弃任务不抛出异常（不推荐）</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy</td><td>抛弃等待最久的任务并把当前任务加入队列</td></tr><tr><td>ThreadPoolExecutor.CallerRunsPolicy</td><td>由主线程负责调用的run()方法绕过线程池直接执行，即来新任务主线程亲自服务</td></tr></tbody></table></li><li><p><strong>Runnabler任务处理</strong></p><p>Runnable实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;输出了：HelloWorld&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">// 睡眠线程，观察线程的执行情况</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;本任务与线程绑定了，进入休眠状态了~~~&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000000</span>);  <span class="hljs-comment">//让其睡眠时间久一点，便于观察线程池的复用情况</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程池创建代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">threadPoolDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.创建线程池对象</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *     public ThreadPoolExecutor(int corePoolSize,</span><br><span class="hljs-comment">         *                               int maximumPoolSize,</span><br><span class="hljs-comment">         *                               long keepAliveTime,</span><br><span class="hljs-comment">         *                               TimeUnit unit,</span><br><span class="hljs-comment">         *                               BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-comment">         *                               ThreadFactory threadFactory,</span><br><span class="hljs-comment">         *                               RejectedExecutionHandler handler) &#123;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">// 2.把任务给线程池处理</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">//核心线程运行</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//不创建临时线程</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);       <span class="hljs-comment">//任务队列满了！！核心线程都忙！！</span><br><br>        <span class="hljs-comment">//创建临时线程</span><br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//拒绝策略触发</span><br>        pool.execute(target);<br><br>        <span class="hljs-comment">//关闭线程池（开发一般不使用，线程池作用就是长久存活）</span><br>        <span class="hljs-comment">//pool.shutdownNow();     //立即关闭，即使任务未完成也关闭</span><br>        <span class="hljs-comment">//pool.shutdown();    //等待任务执行完毕再关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javasethread-4%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="image-20231208193517302"></p></li><li><p><strong>callable任务处理</strong></p></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">threadPoolDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.创建线程池对象</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *     public ThreadPoolExecutor(int corePoolSize,</span><br><span class="hljs-comment">         *                               int maximumPoolSize,</span><br><span class="hljs-comment">         *                               long keepAliveTime,</span><br><span class="hljs-comment">         *                               TimeUnit unit,</span><br><span class="hljs-comment">         *                               BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-comment">         *                               ThreadFactory threadFactory,</span><br><span class="hljs-comment">         *                               RejectedExecutionHandler handler) &#123;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">// 2.把任务给线程池处理</span><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重要！）-Executors工具类实现线程池"><a href="#重要！）-Executors工具类实现线程池" class="headerlink" title="重要！） Executors工具类实现线程池"></a><strong>重要！） Executors工具类实现线程池</strong></h2><p>Executors获得线程池的常用方法：</p><table><thead><tr><th align="left">方法名称</th><th>说明</th></tr></thead><tbody><tr><td align="left">public static ExecutorService newCachedThreadPool()</td><td>线程数随着任务增加而增加，若线程任务执行完毕且空闲一段时间会被回收</td></tr><tr><td align="left">public static ExecutorService newFixedThreadPool()</td><td>创建固定数量的线程池。若某个线程因为异常而结束，那么线程池会补充一个新线程代替它</td></tr><tr><td align="left">public static ExecutorService newSingleThreadExecutor()</td><td>创建只有一个线程对象的线程池对象，如果该线程因为异常而结束，那么线程池会补充一个新线程</td></tr><tr><td align="left">public static ScheduledExecutorService newScheduledThreadPool(int PoolSize)</td><td>创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务</td></tr></tbody></table><blockquote><p><strong>注意：Executors的底层其实也是基于线程池的实现类ThreadPoolExecutor创建线程池对象</strong><br><strong>注意：大型并发环境使用Executors如果不注意可能会出现系统风险，例如阿里开发手册不建议使用Executors创建线程池对象，而是建 议使用ThreadPoolExecutor自己创建</strong></p></blockquote><table><thead><tr><th align="left">方法名称</th><th>存在问题</th></tr></thead><tbody><tr><td align="left">public static ExecutorService newCachedThreadPool()</td><td>允许请求的任务队列长度为Integer.MAX_VALUE，可能出现OOM错误(OutOfMemoryError)</td></tr><tr><td align="left">public static ExecutorService newFixedThreadPool()</td><td>同上</td></tr><tr><td align="left">public static ExecutorService newSingleThreadExecutor()</td><td>创建的线程数量上限为Integer.MAX_VALUE，线程数随着任务1:1增长，可能出现OOM错误(OutOfMemoryError)</td></tr><tr><td align="left">public static ScheduledExecutorService newScheduledThreadPool(int PoolSize)</td><td>同上</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象进阶</title>
    <link href="/2023/12/05/Java%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/12/05/Java%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p>Java面向对象主要知识点</p><span id="more"></span><h1 id="Java面向对象进阶"><a href="#Java面向对象进阶" class="headerlink" title="Java面向对象进阶"></a>Java面向对象进阶</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static修饰的静态变量和方法是所有实例或者类名共用。<strong>堆之中的内存也是如此，随着类的加载而加载</strong></li><li>调用：类名和实例都可以调用</li><li>作用： 多用于工具类和测试类</li><li><strong>注意事项：静态方法只能访问静态变量和方法，但非静态可以访问静态</strong></li></ul><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>本质：一个指向对象地址的变量，在函数参数列表内默认加载</li></ul><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>封装对应数据并提供数据对应的行为</li></ul><h3 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h3><ul><li><p>类于类之间存在共性的时候，考虑使用继承，减少代码复用以及代码维护</p></li><li><p>区别于C++：Java只能单继承，不能多继承但是能多次继承</p></li><li><p>特点：</p><ul><li><strong>子类继承父类的所有成员变量和非私有的成员方法</strong>（构造函数不继承），存储在堆之中的形式和方法也有所不同</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-2.png" alt="image-20231205232908915"></p><ul><li><p>变量，方法的赋值与调用：</p><ul><li>当子类的相关（未区分）变量被调用或者赋值的时候会优先寻找子类的变量，<strong>就近原则</strong>（局部-&gt;本类-&gt;父类）</li><li><strong>Super</strong>修饰方法被调用的时候直接调用父类中的同名方法，本质是父类存储空间</li><li><strong>@Override</strong>重写父类方法<ul><li>重写的本质：<strong>虚方法表</strong>（一个类之中非静态，非私有，非固定（final）的方法表）<ul><li>当子类继承的时候会将父类的虚方法表中的方法加到虚方法表内，在此基础上加上自己的方法</li><li>当重写发生的时候会将父类的继承方法进行<strong>覆盖</strong></li><li>重写的方法会影响继承子类的子类</li></ul></li><li>重写方法名称和形参列表应与父类一致</li></ul></li></ul></li><li><p>构造方法：</p><ul><li><p>无法继承</p></li><li><p>子类之中的所有构造方法<strong>默认</strong>先访问父类之中的无参构造，再执行自己<strong>以访问父类数据</strong></p></li><li><p>可以使用super（参数列表）调用父类有参构造</p></li></ul></li></ul></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li><p>代码形式：（<strong>继承&#x2F;实现是多态的前提条件</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当Person是Student父类时候</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure></li><li><p>本质：将子类对象赋值给父类类型引用</p></li><li><p>特点：</p><ul><li><p>调用变量时优先调用<strong>父类变量</strong></p></li><li><p>调用方法时调用<strong>子类方法</strong>，但是父类未含有此方法编译会报错</p><ul><li>原因：子类方法将虚方法表内父类方法覆盖了，但变量无法覆盖</li></ul></li></ul></li><li><p>优势：</p><ul><li>可以实现解耦合，便于维护</li><li>函数参数传入方便，子类共用父类传参函数</li></ul></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li><p>修饰变量</p><ul><li>修饰基本类型： 值不变</li><li>修饰引用类型： <strong>地址不变，但是内部值可以改变</strong></li></ul></li><li><p>修饰方法： 最终方法，不能重写</p></li><li><p>修饰类：最终类，无法继承</p></li></ul><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><ul><li><p><strong>无法实例化</strong>，但可以有构造方法</p></li><li><p>有抽象方法一定是抽象类，反之不一定</p></li><li><p>抽象子类：</p><ul><li>要实例化则要重写所有抽象方法，否则仍就是抽象类</li></ul></li><li><p>目的：规范子类格式</p></li></ul><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><ul><li><p>无法实例化</p></li><li><p>通过implements实现</p></li><li><p>接口子类：</p><ul><li>要实例化则要重写所有接口方法，否则仍就是抽象类</li></ul></li><li><p><strong>一个类可以实现多个接口</strong>，还可以同时继承</p></li><li><p>特点：</p><ul><li>成员变量： 只能是常量，默认public static final修饰</li><li>不含有构造方法</li><li>成员方法： 只能是抽象方法，默认public abstract修饰</li></ul></li></ul><h2 id="内部类和外部类"><a href="#内部类和外部类" class="headerlink" title="内部类和外部类"></a>内部类和外部类</h2><p>…….</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象基础</title>
    <link href="/2023/12/05/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/12/05/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Java面向对象的一些基础知识点</p><span id="more"></span><h1 id="Java基础：面向对象"><a href="#Java基础：面向对象" class="headerlink" title="Java基础：面向对象"></a>Java基础：面向对象</h1><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><ul><li><strong>private</strong> ：可以修饰成员变量，成员方法，构造方法，不能修饰类(此刻指的是外部类，内部类不加以考虑)。被private修饰的成员只能在其修饰的本类中访问，在其他类中不能调用（这里也可以看出为什么不能修饰class，因为private本来就是作用于类内部的东西）。</li><li><strong>default</strong> ：可以修饰类，成员变量，成员方法，构造方法。被默认权限修饰后，其只能被<strong>本类以及同包下</strong>的其他类访问。</li><li><strong>protected</strong>：可以修饰成员变量，成员方法，构造方法，但不能修饰类(此处指的是外部类，内部类不加以考虑)。被protected修饰后，只能被<strong>同包下的其他类</strong>访问。如果不同包下的类要访问被protected修饰的成员，这个类必须是<strong>其子类</strong>。</li><li><strong>public</strong> ：权限最大的修饰符，他可以修饰类，成员变量，成员方法，构造方法。被public修饰后，可以再任何一个类中，不管同不同包，任意使用。</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-3.png" alt="image-20231205233323143"></p><h2 id="工作内存管理"><a href="#工作内存管理" class="headerlink" title="工作内存管理"></a>工作内存管理</h2><ul><li><p>方法区：字节码文件记载时进入的内存（<strong>类似于声明，不同文件class记录的变量和方法</strong>）</p></li><li><p>栈： 方法运行时所进入的内存，变量也是一样。运行完毕的时候移出，相应的指向堆中的变量存储空间也会消失</p></li><li><p>堆：new出来的变量（<strong>非静态实例</strong>）都会储存在这里（<strong>但是new的本体是一个指向堆空间的变量存储在栈之中</strong>）</p><p><strong>注： 进行简单的赋值操作如A b&#x3D;new A（）；A a&#x3D;b; 会使得a,b两个变量指向同一片堆内存;</strong></p></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-1.png" alt="image-20231205232708431"></p><h2 id="工具类ArrayList集合使用"><a href="#工具类ArrayList集合使用" class="headerlink" title="工具类ArrayList集合使用"></a>工具类ArrayList集合使用</h2><ul><li><p>对比于数组： 长度不固定，有自然的相应接口函数</p></li><li><p>特点：只能存引用数据类型而非基本数据类型</p></li><li><p>使用：<strong>ArrayList本身含有索引</strong></p><ul><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;;<br></code></pre></td></tr></table></figure></li><li><p>操作函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span>;<span class="hljs-comment">//删除</span><br>E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<span class="hljs-comment">//索引删除</span><br>set(); size();<span class="hljs-comment">//等等</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>集合拓展：</p><ul><li><p>单列集合<Conllection></p><ul><li><p>List系列集合：有序，可重复，有索引</p></li><li><p>Set系列：无序，不重复，无索引</p></li><li><p>迭代器扫描集合：</p></li><li><pre><code class="java">Iteretor&lt;String&gt; it = list.iterator();while(it.hasNext())&#123;    String str=it.next();&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>+ 增强<span class="hljs-keyword">for</span>遍历：<br><br>  ```<span class="hljs-function">java</span><br><span class="hljs-function">  <span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">String</span> s:List)</span></span>&#123;<br>  <span class="hljs-comment">//s的操作不会影响list的数据</span><br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>lamada表达式</p><p>…</p></li></ul></li><li><p>双列集合<map></p><ul><li>键值集合对象</li><li>键不可以重复，值可以重复,无序无索引</li><li>三种遍历..</li><li>hashmap（<strong>重复的键put进去会覆盖原有键值，与hashset相反</strong>）<ul><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li><strong>如果键存储的是自定义对象，需要重写hashCode和equals方法,如果值存储自定义对象，不需要重写hashCode和equals方法</strong></li></ul></li><li>treemap等….</li></ul></li></ul></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li><p>包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;泛型&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>面向对象</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC学习</title>
    <link href="/2023/12/01/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/01/JDBC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>JDBC连接数据库的学习与应用</p><span id="more"></span><h1 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h1><ul><li>Java DataBase Connectivity</li><li>JDBC就是一套使用java语言操作关系数据库的一套API，不同类型数据库都有相应实现类</li></ul><h1 id="JDBC基本流程"><a href="#JDBC基本流程" class="headerlink" title="JDBC基本流程"></a>JDBC基本流程</h1><ul><li><p>导入jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.28</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverMannager.getConnection(url,username,password);<br></code></pre></td></tr></table></figure></li><li><p>自定义sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String sql=<span class="hljs-string">&quot;Update...&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>获取执行对象并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.creatStatement();<br><span class="hljs-comment">//执行,返回影响行数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br></code></pre></td></tr></table></figure></li><li><p>处理返回结果</p></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">stmt.close();<br>conn.close();<span class="hljs-comment">//Resultset资源也要释放</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="JDBC具体API实现"><a href="#JDBC具体API实现" class="headerlink" title="JDBC具体API实现"></a>JDBC具体API实现</h1><h2 id="Drivermanager驱动管理类"><a href="#Drivermanager驱动管理类" class="headerlink" title="Drivermanager驱动管理类"></a>Drivermanager驱动管理类</h2><ul><li><p>本质：<strong>一个可以直接调用其静态方法的工具类</strong></p></li><li><p>作用：注册驱动并且获取数据库连接</p></li><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//forName方法实际调用</span><br>DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br></code></pre></td></tr></table></figure><p>在jar包里面的有自动的加载驱动方法，可以不写</p></li><li><p>获取数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Static Connection <span class="hljs-title function_">getconnection</span><span class="hljs-params">(string url,string user,string passowrd)</span>;<br></code></pre></td></tr></table></figure><ul><li><p>url: 连接路径</p><ul><li><p>语法： &#x3D;&#x3D;jdbc:mysql:&#x2F;&#x2F;ip地址(域名)：端口号&#x2F;数据库名称？参数键值对1&amp;参数键值对2&#x3D;&#x3D;</p></li><li><p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p></li><li><p>如果连接的是本地的mysql则可以省略ip地址</p></li><li><p>注：配置userSSL&#x3D;false,禁用安全连接方式，解决ssl警告提示：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1?useSSL&#x3D;false</p></li></ul></li><li><p>user: 连接端口用户名</p></li><li><p>password: 密码</p></li></ul></li></ul><h2 id="Connection数据库连接对象"><a href="#Connection数据库连接对象" class="headerlink" title="Connection数据库连接对象"></a>Connection数据库连接对象</h2><ul><li><p>作用： 获取sql执行对象，管理事务</p></li><li><p>获取执行sql对象</p><ul><li><p>普通执行对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement <span class="hljs-title function_">creatstatement</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>预编译sql执行对象：防止sql注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement <span class="hljs-title function_">preparedStatement</span><span class="hljs-params">(sql)</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行存储过程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CallableStatement <span class="hljs-title function_">prepareCall</span><span class="hljs-params">(sql)</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>事务管理</p><ul><li><p>Mysql事务管理</p><ul><li>开启事务：BEGIN;&#x2F;START TRANSACTION;</li><li>提交事务：COMMIT;</li><li>回滚事务：ROLLBACK;</li></ul></li><li><p>JDBC事务管理</p><ul><li><p>&#x3D;&#x3D;一般用于异常处理&#x3D;&#x3D;</p></li><li><p>开启： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setAutoCommit(<span class="hljs-type">boolean</span> autoCommit);<span class="hljs-comment">//true为自动提交，false为手动提交即为开启事务</span><br></code></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">commit();<br></code></pre></td></tr></table></figure></li><li><p>回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rollback();<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Statement执行对象"><a href="#Statement执行对象" class="headerlink" title="Statement执行对象"></a>Statement执行对象</h2><ul><li><p>作用：执行sql语句</p></li><li><p>&#x3D;&#x3D;执行sql语句细节&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> exeuteUpdate;<span class="hljs-comment">//执行DML（增删改），DDL（库的增删改）语句</span><br>-&gt;返回值（<span class="hljs-number">1</span>）DML为影响行数，<span class="hljs-number">0</span>为失败 （<span class="hljs-number">2</span>）DDL执行成功为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet <span class="hljs-title function_">exeuteQuery</span><span class="hljs-params">(sql)</span>; <span class="hljs-comment">//执行DQL（查询）语句</span><br>-&gt;返回值： ResultSet结果集对象<br></code></pre></td></tr></table></figure></li></ul><h2 id="ResultSet结果集对象"><a href="#ResultSet结果集对象" class="headerlink" title="ResultSet结果集对象"></a>ResultSet结果集对象</h2><ul><li><p>作用：<strong>对查询结果进行封装</strong></p></li><li><p>获取查询结果</p><ul><li><p>结果行移动以及判断是否有效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<span class="hljs-comment">//（1）将光标向下移动一行 （2）判断当前行是否有效，true为有效</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">(xxx数据类型) getxxx(参数); <span class="hljs-comment">//获取一行里面的数据，由resultset对象调用</span><br>-&gt;参数：<span class="hljs-number">1.</span> <span class="hljs-type">int</span> 类型参数: 列编号，从<span class="hljs-number">1</span>开始 <span class="hljs-number">2.</span>String 类型参数：列名称<br></code></pre></td></tr></table></figure><ul><li>注：<strong>每调用一次next()方法，光标向下移动一行。最初它位于第一行之前，因此第一次调用next()应把光标置于第一行上，使它成为当前行。</strong></li></ul></li></ul></li></ul><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><ul><li><p>作用：继承自statement,用于执行预编译sql对象，防止sql注入</p><blockquote><p>sql注入：通过操作输入修改事先定义的sql语句，以达到执行代码对服务器攻击的方法（核心是字符拼接）</p></blockquote></li><li><p>&#x3D;&#x3D;一般用于用户登录&#x3D;&#x3D;</p><ul><li><p>获取Preparedstatement对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//?使用占位符替代</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select *from user where username=? and password=?&quot;</span>;<br><span class="hljs-comment">//通过Connection对象的函数preparestatement()方法获取，传入相应sql语句</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span>conn.preparestatement(sql);<br></code></pre></td></tr></table></figure></li><li><p>设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">setxxx(参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>)；<span class="hljs-comment">//给？赋值</span><br>-&gt;参数：参数<span class="hljs-number">1</span>：？的位置编号,从<span class="hljs-number">1</span>开始；参数<span class="hljs-number">2</span>：？的值<br></code></pre></td></tr></table></figure></li><li><p>执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">exeuteUpdate()/exeuteQuery();<span class="hljs-comment">//不需要再传sql</span><br></code></pre></td></tr></table></figure></li><li><p>预编译功能开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/db1?useSSL=false&amp;useServerPreStmts=true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><ul><li><p>介绍： 数据库连接池本质是个容器，负责分配管理数据库连接；</p></li><li><p>功能：允许应用重复使用一个现有的数据库连接，而不是重新建立一个；<strong>意思就是从一个用户一个连接到所有用户共享一个到数据库的连接</strong>，&#x3D;&#x3D;本质是通过管理多个connection都通过一个连接到数据库&#x3D;&#x3D;</p></li><li><p>好处：资源重用，提升响应速度，避免数据库连接遗漏</p></li></ul><h2 id="数据库池实现"><a href="#数据库池实现" class="headerlink" title="数据库池实现"></a>数据库池实现</h2><ul><li><p>标准接口： &#x3D;&#x3D;Datasource&#x3D;&#x3D;</p><ul><li><p>官方（SUN）提供的数据库连接池标准接口，由第三方实现此接口</p></li><li><p>功能：获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li><p>&#x3D;&#x3D;Druid（德鲁伊）&#x3D;&#x3D;</p><ul><li>Druid是阿里巴巴开源的数据库连接池项目</li><li>功能强大</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security介绍与认证功能</title>
    <link href="/2023/11/25/Spring%20Security%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/11/25/Spring%20Security%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>Spring sercurity框架介绍</p><span id="more"></span><h1 id="Security-是什么"><a href="#Security-是什么" class="headerlink" title="Security 是什么"></a>Security 是什么</h1><p><strong>Spring Security 是一个功能强大且可高度定制的身份验证和访问控制框架，它专注于为 Java 应用程序提供身份验证和授权。</strong></p><h1 id="Sercurity-的主要功能构成"><a href="#Sercurity-的主要功能构成" class="headerlink" title="Sercurity 的主要功能构成"></a>Sercurity 的主要功能构成</h1><p>&#x3D;&#x3D;Spring sercurity 所有的功能都来源于来自构成它的各种 Filters (过滤器)&#x3D;&#x3D;</p><ul><li>Sercurity 的功能我们可以划分为传统的两大类：</li></ul><p><strong>1. 认证：确认用户身份的合法性即识别用户</strong><br><strong>2. 授权：检验用户所拥有权限并返回给用户</strong></p><p>这里主要介绍认证的应用接口</p><h1 id="Sercurity-认证流程"><a href="#Sercurity-认证流程" class="headerlink" title="Sercurity 认证流程"></a>Sercurity 认证流程</h1><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>Sercurity 识别框架主要提供了四个接口：</p><ul><li>Userdetails 接口：用于封装用户的详细信息例如用户名和密码之类，默认实现类是 User，自定义实现需求的用户主体只需要实现这个接口即可，下面是示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;  <br><span class="hljs-comment">//必要方法请自行补充，table注释为数据库链接注释，下文会讲</span><br><span class="hljs-meta">@TableId(value=&quot;id&quot;,type= IdType.AUTO)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;  <br><span class="hljs-meta">@TableField(&quot;username&quot;)</span><br><span class="hljs-keyword">private</span> String username;  <br><span class="hljs-meta">@TableField(&quot;password&quot;)</span><br><span class="hljs-keyword">private</span> String password;  <br><span class="hljs-meta">@TableField(exist = false)</span><span class="hljs-comment">//不在表内</span><br><span class="hljs-keyword">private</span> List&lt;GrantedAuthority&gt; authorities;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>UserDetailsService 接口：用于进行用户验证的地方，其中提供了一个加载用户的方法        loadUserByUsername，重写这段方法即可自定义用户验证方法, 常见的比如通过数据库验证，这里以 mysql 数据库为例（这里实际上实现通过数据库授权）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用user类型均为自定义用户类型</span><br><span class="hljs-comment">此外，除了需要配置数据库端口，还需要引入入mybatis-plus进行连接和sql语句操作</span><br><span class="hljs-comment">具体需求如下：1，多余的对应数据库中需要操作的表的类，我这里多加了一个权限类perm对应权限表，并进行相应注释</span><br><span class="hljs-comment"> 2，实现相应的数据库操作marpper类</span><br><span class="hljs-comment"> 3，写出对应表的service接口         </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//实现service，以user为例子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;  <br>&#125;<br><br><span class="hljs-comment">//实现marpper类，以user类为例子</span><br><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br><span class="hljs-comment">//具体重写方法</span><br><span class="hljs-comment">//拦截返回的用户信息（username）进行user加载  </span><br><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>, UserDetailsService &#123;  <br><br><span class="hljs-meta">@Autowired</span>  <br>UserMapper userMapper;  <br><br><span class="hljs-meta">@Autowired</span>  <br>PermMapper permMapper;<br><br><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;  <br><span class="hljs-comment">//在数据库内查找username对应的用户对象  </span><br>QueryWrapper queryWrapper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();  <br>queryWrapper.eq(<span class="hljs-string">&quot;username&quot;</span>,username);  <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>userMapper.selectOne(queryWrapper);  <br><br><span class="hljs-comment">//异常处理  </span><br><span class="hljs-keyword">if</span> (user==<span class="hljs-literal">null</span>) &#123;  <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名未找到&quot;</span>);  <br>&#125;  <br><br><span class="hljs-comment">//根据id查找权限  </span><br><span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">permQueryWrapper</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();  <br>permQueryWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>,user.getId());  <br><br>List&lt;Perm&gt; perms= permMapper.selectList(permQueryWrapper);  <br><br>List&lt;String&gt; permTags=perms.stream().map(Perm::getAuthority).collect(Collectors.toList());  <br><br>user.setAuthorities(AuthorityUtils.createAuthorityList(permTags));  <br><br><span class="hljs-keyword">return</span> user;  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Authentication：主要包含认证过的用户信息，UsernamePasswordAuthenticationToken 便是它的一个实现类</p></li><li><p>AuthenticationManager：接口用于执行认证 Authentication 操作，这里直接在     userdetailservice执行认证即可</p></li></ul><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><ul><li>初步认证过后可以进行 token 令牌校验来减少反复认证，默认实现是 UsernamePasswordAuthenticationToken</li></ul><p>这里我们将进行自定义的 Jwt 令牌校验，以及</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Sercurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM05-Spring中的AOP概念</title>
    <link href="/2023/05/30/SSM05-Spring%E4%B8%AD%E7%9A%84AOP%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/05/30/SSM05-Spring%E4%B8%AD%E7%9A%84AOP%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>详细的描述了Spring中的AOP概念。</p><span id="more"></span><h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构</strong></p><p>​<strong>OOP(object Oriented Programming)面向对象编程</strong></p><p><strong>作用：在不惊动原始设计的基础上为其进行功能增强</strong></p><p><strong>Spring理念：无入侵式&#x2F;无侵入式</strong></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol><li><p>连接点 ( JoinPoint )：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等</p><ul><li><p>在SpringAOP中，理解为方法的执行</p></li><li><p>切入点 ( Pointcut )：匹配连接点的式子</p><ul><li>在springAoP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法<ul><li>一个具体方法: com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li></ul></li></ul></li><li><p>通知(Advice) ：在切入点处执行的操作，也就是共性功能</p><ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li><p>通知类∶定义通知的类</p></li><li><p>切面( Aspect )︰描述通知与切入点的对应关系</p></li></ol><p>样例（源自黑马程序员，<strong>侵删</strong>）</p><p><img src="https://wang-nine.cn/images/SSM04-01AOP%E6%A0%B7%E4%BE%8B.png" alt="SSM04-01AOP样例"></p><h1 id="AOP入门案例"><a href="#AOP入门案例" class="headerlink" title="AOP入门案例"></a>AOP入门案例</h1><p>案例设定:测定接口执行效率<br>简化设定:在接口执行前输出当前系统时间<br>开发模式:XML or <strong>注解</strong></p><p>思路分析∶</p><ol><li>导入坐标（ pom.xml )</li><li>制作连接点方法（原始操作，Dao接口与实现类）</li><li>制作共性功能（通知类与通知)</li><li>定义切入点</li><li>绑定切入点与通知关系（切面)</li></ol><p>基础代码样例（源自黑马程序员）：</p><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>切面类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(切入点表达式)&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;------------------------------&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10000</span> ; i++) &#123;<br>            <span class="hljs-comment">//调用原始操作</span><br>            pjp.proceed();<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> endTime-startTime;<br>        System.out.println(<span class="hljs-string">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class="hljs-string">&quot;ms&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>主配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">加上注解 <span class="hljs-meta">@EnableAspectJAutoProxy</span><br></code></pre></td></tr></table></figure><p>剩余的代码不变，例如Dao接口和实现类，主函数</p><p>以上步骤总结：</p><ol><li>导入AOP坐标</li><li>定义dao接口与实现类</li><li>定义通知类，制作通知</li><li>定义切入点         <strong>说明︰切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</strong></li><li>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<strong>位置</strong></li><li>定义通知类受Spring容器管理，并定义当前类为切面类，即添加 <strong>@Component</strong> 和 <strong>@Aspect</strong></li><li>开启Spring对AOP注解驱动支持，即在主配置类添加 <strong>@EnableAspectJAutoProxy</strong></li></ol><h1 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h1><ol><li>Spring容器启动</li><li>读取所有切面配置中的切入点</li><li>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点<ul><li>匹配失败：创建对象</li><li>匹配成功：创建原始对象（<strong>目标对象</strong>）的<strong>代理对象</strong></li></ul></li><li>获取bean的执行方法<ul><li>获取bean，调用方法并执行，完成操作</li><li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul></li></ol><ul><li>目标对象（Target ）：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理（Proxy）：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><h1 id="AOP深入"><a href="#AOP深入" class="headerlink" title="AOP深入"></a>AOP深入</h1><h2 id="AOP的切入点表达式"><a href="#AOP的切入点表达式" class="headerlink" title="AOP的切入点表达式"></a>AOP的切入点表达式</h2><p>切入点∶要进行增强的方法<br>切入点表达式∶要进行增强的方法的描述方式</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p><strong>即可以对接口进行描述，也可以对实现类进行描述</strong></p><h4 id="切入点表达式标准格式"><a href="#切入点表达式标准格式" class="headerlink" title="切入点表达式标准格式"></a>切入点表达式标准格式</h4><p>动作关键字（访问修饰符 返回值.包名.类&#x2F;接口名.方法名（参数）异常名)</p><blockquote><p>execution (public User com.xxx.service.UserService.findById (int))</p></blockquote><ul><li>动作关键字∶描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>访问修饰符：public , private等，可以省略</li><li>返回值</li><li>包名</li><li>类&#x2F;接口名</li><li>方法名</li><li>参数</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><h4 id="可以使用通配符描述切入点，快速描述"><a href="#可以使用通配符描述切入点，快速描述" class="headerlink" title="可以使用通配符描述切入点，快速描述"></a>可以使用通配符描述切入点，快速描述</h4><ul><li><ul><li>︰单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</li></ul><blockquote><p>execution (public * com.xxx.<em>.UserService.find</em>(*))<br>匹配com.xxx包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></blockquote></li><li><p>.. ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p><blockquote><p>execution (public User com..UserService.findById (..) )<br>匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方法</p></blockquote></li><li><p>+︰专用于匹配子类类型<br>execution(* *..<em>Service+.</em>(..))</p></li></ul><h4 id="切入点表达式的书写技巧"><a href="#切入点表达式的书写技巧" class="headerlink" title="切入点表达式的书写技巧"></a>切入点表达式的书写技巧</h4><ul><li>所有代码按照标准规范开发，否则以下技巧全部失效</li><li>描述切入点<strong>通常描述接口</strong>，而不描述实现类</li><li>访问控制修饰符针对接口开发均采用public描述（<strong>可省略访问控制修饰符描述</strong>）</li><li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</li><li><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用*做单个包描述匹配，或精准匹配</li><li><strong>接口名</strong>&#x2F;类名书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</li><li><strong>方法名</strong>书写以<strong>动词进行精准匹配</strong>，名词采用<em>匹配，例如getByld书写成getBy</em>,selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常<strong>不使用异常作为匹配规则</strong></li></ul><h1 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h1><p><strong>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置AOP通知共分为5种类型</strong></p><ul><li>前置通知   <strong>@Before</strong></li><li>后置通知   <strong>@After</strong></li><li>环绕通知（<strong>重点</strong>）   <strong>@Around</strong>   <strong>需要对原始操作进行调用</strong></li><li>返回后通知（了解）   <strong>@AfterReturning</strong>   正常运行完才会运行</li><li>抛出异常后通知（了解）   <strong>@AfterThrowing</strong>   抛出异常才会运行</li></ul><p>环绕通知对原始操作的调用样例（<strong>注意有返回值时需要返回原始操作的返回值</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;around before advice ...&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;around after advice ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>@Around注意事项</strong></p><ol><li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</li><li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> pjp.getsignature();<span class="hljs-comment">//获取代理类和被代理类的信息。</span><br>system.out.println(signature.getDeclaringTypeName());<span class="hljs-comment">//获取原始方法的类名</span><br>system.out.println(signature.getName());<span class="hljs-comment">//获取原始方法的方法名</span><br></code></pre></td></tr></table></figure><h1 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h1><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p>获取切入点方法的参数</p><ul><li><p>JoinPoint :适用于前置、后置、返回后、抛出异常后通知</p></li><li><p>ProceedJointPoint :适用于环绕通知</p></li></ul><h2 id="获取返回值"><a href="#获取返回值" class="headerlink" title="获取返回值"></a>获取返回值</h2><p>获取切入点方法返回值</p><ul><li><p>返回后通知</p></li><li><p>环绕通知</p></li></ul><h2 id="获取异常"><a href="#获取异常" class="headerlink" title="获取异常"></a>获取异常</h2><p>获取切入点方法运行异常信息</p><ul><li><p>抛出异常后通知</p></li><li><p>环绕通知</p></li></ul><p>样例代码如下（来自黑马程序员，侵删）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//JoinPoint：用于描述切入点的对象，必须配置成通知方法中的第一个参数，可用于获取原始方法调用的参数</span><br><span class="hljs-comment">//    @Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint jp)</span> &#123;<br>        Object[] args = jp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        System.out.println(<span class="hljs-string">&quot;before advice ...&quot;</span> );<br>    &#125;<br><br><span class="hljs-comment">//    @After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint jp)</span> &#123;<br>        Object[] args = jp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        System.out.println(<span class="hljs-string">&quot;after advice ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//ProceedingJoinPoint：专用于环绕通知，是JoinPoint子类，可以实现对原始方法的调用</span><br><span class="hljs-comment">//    @Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> &#123;<br>        Object[] args = pjp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        args[<span class="hljs-number">0</span>] = <span class="hljs-number">666</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ret = pjp.proceed(args);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            t.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-comment">//设置返回后通知获取原始方法的返回值，要求returning属性值必须与方法形参名相同</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint jp,String ret)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning advice ...&quot;</span>+ret);<br>    &#125;<br><br>    <span class="hljs-comment">//设置抛出异常后通知获取原始方法运行时抛出的异常对象，要求throwing属性值必须与方法形参名相同</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(Throwable t)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing advice ...&quot;</span>+t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
