<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/20/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/20/%E8%AE%A1%E7%BD%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="计网学习"><a href="#计网学习" class="headerlink" title="计网学习"></a>计网学习</h1><h1 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络，互联网和因特网"><a href="#网络，互联网和因特网" class="headerlink" title="网络，互联网和因特网"></a>网络，互联网和因特网</h3><ul><li>网络由若干个结点（Node）和链路（link）组成</li><li>不同网络连接起来叫互联网</li><li>因特网（Internet）是最大的互联网</li></ul><h3 id="因特网的三个阶段"><a href="#因特网的三个阶段" class="headerlink" title="因特网的三个阶段"></a>因特网的三个阶段</h3><ul><li>从单个ARPANET（TCP&#x2F;IP）向互联网发展</li><li>逐步构建成三级结构因特网</li><li>逐渐形成了多层次ISP（服务提供者如联通电信）结构的因特网</li></ul><blockquote><p>因特网三层结构：主干网（国际性区域）-&gt;ISP运营商层-&gt;本地层（公司，学校，家等）</p></blockquote><h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3><ul><li>ISOC国际组织对因特网全面管理</li></ul><h2 id="三种交换"><a href="#三种交换" class="headerlink" title="三种交换"></a>三种交换</h2><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><ul><li><p>起因：所有电话两两相连极不现实、</p></li><li><p>电话交换机：将任意两个电话按需要连接</p></li><li><p>电路交换：建立连接占用资源，结束释放</p></li><li><p>对于计算机数据不通用，因为计算机数据是突发的，建立释放连接需要的资源消耗过大，优点是时延小</p></li></ul><h3 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h3><ul><li>直接发送报文，由路由器进行转发，不需要建立连接</li><li>缺点：报文过大时容易占用电路，不利于差错控制，存储转发时延过大</li></ul><h3 id="分组交换（一般使用方式）"><a href="#分组交换（一般使用方式）" class="headerlink" title="分组交换（一般使用方式）"></a>分组交换（一般使用方式）</h3><ul><li>将需要转发的数据（报文）分组然后分别添加头部识别</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E5%9B%A0%E7%89%B9%E7%BD%91-%E4%B8%89%E7%A7%8D%E4%BA%A4%E6%8D%A2.png" alt="image-20231220143135866"></p><h2 id="计算机网络定义以及分类"><a href="#计算机网络定义以及分类" class="headerlink" title="计算机网络定义以及分类"></a>计算机网络定义以及分类</h2><ul><li><p>互连，自治的计算机集合</p></li><li><p>按照覆盖范围分类</p><blockquote><p>广域网WAN：不同国家之间</p><p>城域网MAN：城市之间</p><p>局域网LAN：家，公司，学校之间</p><p>个域网PAN：。。</p></blockquote></li></ul><h2 id="计算机网络性能指标（重点）"><a href="#计算机网络性能指标（重点）" class="headerlink" title="计算机网络性能指标（重点）"></a>计算机网络性能指标（重点）</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ul><li><p>比特（bit）：计算机之中的数据量单位，通常意义为一个1或者0</p></li><li><p>常用数据量单位：</p><blockquote><p>8 bit &#x3D; 1 byte</p><p><strong>KB &#x3D; 2^10 B</strong></p><p>MB &#x3D; K*KB &#x3D; 2^20 B</p><p>GB &#x3D; K*MB &#x3D; 2^30 B</p><p>TB &#x3D; K*GB &#x3D; 2^40 B</p></blockquote><p>对比速率常用单位</p><blockquote><p>bit&#x2F;s</p><p><strong>kb&#x2F;s &#x3D; 10^3 b&#x2F;s(bps)</strong></p><p>Mb&#x2F;s &#x3D; k*kb&#x2F;s &#x3D; 10^6 bps</p><p>Gb&#x2F;s &#x3D; k*Mb&#x2F;s &#x3D; 10^9 bps</p><p>Tb&#x2F;s &#x3D; k*Gb&#x2F;s &#x3D; 10^12 bps</p></blockquote><p>例子：MB&#x2F;Mbps &#x3D; 2^20b &#x2F; 10^6 bps &#x3D; 8.38 s 约等于 B&#x2F;bps &#x3D; 8b&#x2F;bps &#x3D;8 s (可以估算使用)</p></li></ul><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul><li><p>模拟信号系统之中的意义</p><ul><li><p>信号所包含的各种不同频率的成分所占据频率范围</p></li><li><p>单位：Hz （kHz ，MHz，GHz）</p></li></ul></li><li><p>计算机网络之中的意义</p><ul><li>表示通信线路所能传送数据的能力，表示<strong>“最高数据率”</strong></li><li>单位： b&#x2F;s （kb&#x2F;s，Mb&#x2F;s ，Gb&#x2F;s ,Tb&#x2F;s）<strong>也称兆</strong></li></ul></li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul><li>单位时间内通过某个网络的数据量</li><li>吞吐量受带宽或额定速率限制</li></ul><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><ul><li>由不同部分组成</li><li>发送时延，传播时延（多个传播线路），处理时延（多个路由器）</li><li><strong>发送时延</strong><ul><li><strong>分组长度（b） &#x2F; 发送速率 (b&#x2F;s)</strong></li></ul></li><li><strong>传播时延</strong><ul><li><strong>信道长度（m）&#x2F; 电磁传播率（m&#x2F;s）</strong></li><li>不同介质<strong>信号传播率</strong>：自由空间：3<em>10^8 m&#x2F;s ，铜线：2.3</em>10^8 m&#x2F;s，光纤：2*10^8 m&#x2F;s</li></ul></li><li>处理时延<ul><li>难以计算</li></ul></li></ul><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><ul><li><strong>传播时延与带宽的乘积</strong></li></ul><h3 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h3><ul><li>RTT：一次双向交互所需要的时间</li></ul><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><ul><li>信道利用率：某信道被利用的占比</li><li>网络利用率：全网络信道利用率占权平均</li><li><strong>利用率越高，时延越高</strong>，50%占比时会使时延翻倍，50%往后时延急剧增大</li></ul><h3 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h3><ul><li>分组丢失率，丢失分组占总分组比率</li></ul><h2 id="计算机分层体系结构"><a href="#计算机分层体系结构" class="headerlink" title="计算机分层体系结构"></a>计算机分层体系结构</h2><ul><li><p><strong>OSI</strong>模型：应用层，表示层，会话层，运输层，网络层，数据链路层，物理层</p></li><li><p><strong>TCP&#x2F;IP结构体系</strong>：应用层，运输层，网际层，网络接口层</p></li><li><p><strong>五层体系架构</strong>：</p><blockquote><p>应用层： 实现特定网络应用问题                                            </p><p>运输层： 解决进程之间基于网络通信问题</p><p>网络层： 解决分组在多个网络上传输的问题</p><p>数据链路层： 解决一个网络上或者链路上传输的问题</p><p>物理层：解决使用何种信号传输比特的问题</p></blockquote><ul><li><p>应用举例：</p><p><strong>HTTP报文（应用层）+ TCP头部（运输层）+ IP首部（网络层）+ 添加首部尾部成帧（数据链路层）+前导码（物理层）</strong></p><p>之后一层层向上传播剥离</p></li><li><p>一般描述：</p><p>在协议的控制下，同层对等实体之间能够进行逻辑通信（使用下一层服务）从而向上一层提供服务</p></li></ul></li></ul><h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><ul><li><strong>为不同传输媒体设计适当的传输模式以传输比特数据流</strong></li></ul><h2 id="不同的传输媒体"><a href="#不同的传输媒体" class="headerlink" title="不同的传输媒体"></a>不同的传输媒体</h2><ul><li><p>导引型传输媒体</p><ul><li>同轴电缆（局域网领域后被集线器代替），双绞线，光纤（容量大，损耗小，广域网使用），电力线</li></ul></li><li><p>非导引型传输媒体</p><ul><li>无线电波，微波，红外线，可见光</li></ul></li></ul><h2 id="不同的传输方式"><a href="#不同的传输方式" class="headerlink" title="不同的传输方式"></a>不同的传输方式</h2><h3 id="串行和并行"><a href="#串行和并行" class="headerlink" title="串行和并行"></a>串行和并行</h3><ul><li>串行传输：一个接一个，只有一个传输口，常用于计算机之间传输</li><li>并行传输：一次性传多根，成本高，主要用于计算机内部的传输</li></ul><h3 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h3><ul><li><strong>同步传输</strong>：在比特信号中间进行检测信号，这之中存在时间误差，字节长度会累计误差，<ul><li>时钟同步：<ul><li>外同步：外加一根时钟信号线单独传输时钟信号</li><li>内同步：将同步信号编码发送到数据之中一起传输（例如曼彻斯特编码）</li></ul></li></ul></li><li><strong>异步传输</strong>：每个字节由起始表明，即每个字节内每个比特同步（间隔一样），字节之间不同步（间隔不一样）</li></ul><h3 id="单工，半双工，全双工"><a href="#单工，半双工，全双工" class="headerlink" title="单工，半双工，全双工"></a>单工，半双工，全双工</h3><ul><li>单工 ：只能往一个方向发送数据，即一个结点只能固定收或者固定发（收音机）</li><li>半双工：一个节点可以发也可以收，但是同时只能执行一样（BB机）</li><li>全双工：可以同时发和收（电话）</li></ul><h2 id="编码与编制"><a href="#编码与编制" class="headerlink" title="编码与编制"></a>编码与编制</h2><ul><li>信号的演变</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82-%E7%BC%96%E7%A0%81%E4%B8%8E%E7%BC%96%E5%88%B6.png" alt="image-20231220201855337"></p><h3 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h3><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E7%89%A9%E7%90%86%E5%B1%82-%E7%BC%96%E7%A0%812.png" alt="image-20231220203120009"></p><ul><li><strong>不归零编码</strong>：高低电平区分比特0和1，存在同步问题，无法确认连续的0和1</li><li><strong>归零编码</strong>：后半电平重回0电平，以此区分每个码元，但是大部分数据带宽都用来传输归零而浪费了，编码效率低</li><li><strong>曼彻斯特编码</strong>：码元中间的条边既表示数据又表示时钟，被传统以太网应用（10 Mb&#x2F;s）</li><li><strong>差分曼彻斯特编码</strong>：跳变仅仅表示时钟，码元开始处电平是否发生变化表示数据，相较于原版变化更少</li></ul><h3 id="常用调制"><a href="#常用调制" class="headerlink" title="常用调制"></a>常用调制</h3><ul><li><p>将数字基带信号转化为模拟信号</p><ul><li><p>调幅：有振幅为1，无为0</p></li><li><p>调频：频率识别01</p></li><li><p>调相：初相位不同代表不同比特</p></li></ul></li><li><p>缺点：一个比特一个信号，浪费</p></li><li><p>改进：因为频率和相位是相关的，所以可以同时调整相位和振幅以代表不同信号</p></li><li><p><strong>正交振幅调制</strong>（QAM）</p><p>例子：QAM-16</p><ul><li>在星图之中与原点之间距离代表振幅，x轴夹角为相位</li><li><strong>可以调制出16种码元，所以一个码元可以传输4个比特</strong></li><li>码元种类越多，出现偏差时出现识别错误概论越大<ul><li>改进方法：4个比特关系采用<strong>格雷码</strong>，相邻码元仅仅有一个比特不同</li></ul></li></ul></li></ul><h3 id="信道极限容量"><a href="#信道极限容量" class="headerlink" title="信道极限容量"></a>信道极限容量</h3><ul><li><p>信号传输会产生失真，影响因素</p><ul><li><strong>码元传输速率</strong></li><li>信号传输距离</li><li>噪声干扰等</li></ul></li><li><p><strong>奈氏准则</strong>：理想状态下码元传输速率（调制速度）上限</p><ul><li><p>理想低通信道的最高码元传输速率 &#x3D; 2W Baud &#x3D; 2W 码元&#x2F;秒（一般情况下，除非题目说明）</p></li><li><p>理想带通信道的最高码元传输速率 &#x3D; W Baud &#x3D; W 码元&#x2F;秒</p><blockquote><ul><li>理想低通信道：信号的所有低频分量，只要其频率不超过某个上限值，都能够不失真地通过此信道。而频率超过该上限值的所有高频分量都不能通过该信道</li><li>理想带通信道：只允许上下限之间的信号频率成分不失真地通过，其他频率成分不通过</li></ul></blockquote></li><li><p>W ：信道带宽（Hz）</p></li><li><p>Baud：波特，即码元&#x2F;秒，又称<strong>波特率</strong></p><ul><li>在一个码元只携带一比特时，<strong>波特率和比特率</strong>数值上相等</li><li><strong>当一个码元携带n比特信息时（多元制），则波特率转换成比特率，数值要乘以n</strong>，例如时QAM-16的时候要乘以4</li></ul></li></ul></li><li><p><strong>香农公式</strong></p><blockquote><p><strong>C &#x3D; W * log 2 ( 1 + S&#x2F;N )</strong></p></blockquote><ul><li>C：信道极限传输速率（单位b&#x2F;s）</li><li>W：信道带宽（单位：Hz）</li><li>S：信道内传输信号平均功率</li><li>N：信道内高斯噪声功率</li><li>信噪比（dB）&#x3D; 10 * log10（S&#x2F;N）</li></ul><blockquote><p> 举例：相同信道在无噪声条件下的速率要大于信噪比为30dB的极限传输速率，信号状态至少为：</p><p>10 * log10（S&#x2F;N）&#x3D; 30</p><p>2W * log2(X) &#x3D; W * log 2 ( 1 + 1000 )</p><p>x&gt;&#x3D;32</p></blockquote></li></ul><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>链路（Link）：就是从一个结点到相邻结点的一段物理电路，从而中间没有其它任何交换结点</p></li><li><p>数据链路（Data Link） ：就是将是西安通信协议的硬件和软件加到链路，构成了数据链路</p></li><li><p>数据链路层作用（点对点）</p><ul><li>封装成帧</li><li>差错检测</li><li>可靠传输</li></ul></li><li><p>广播信道（共享式局域网）</p><ul><li>发送帧传输线路问题</li><li>不同信号碰撞问题：<strong>CSMA&#x2F;CD</strong> 控制协议</li></ul></li><li><p>交换式局域网</p><ul><li>通过交换机交换信息在有线领域取代了共享式局域网，无线局域网仍然时共享式局域网</li></ul></li></ul><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><ul><li><p><strong>以太网V2</strong>（版本二）MAC帧格式</p><blockquote><p>帧头 ：目的地址（6 Byte）+ 源地址（6 Byte）+ 数据类型（2 Byte） </p><p>数据载荷：46~1500 Byte</p><p>帧尾：FCS</p></blockquote></li><li><p><strong>PPP</strong>帧格式</p><blockquote><p>帧头 ：标志（1 Byte）+ 地址（1 Byte）+ 控制（1 Byte）+ 协议（2 Byte） </p><p>数据载荷：&lt;1500 Byte</p><p>帧尾：FCS + 标志（1 Byte）</p></blockquote></li><li><p>帧在传输给物理层后会加上8字节的前导码，分别是1字节的帧开始定界符和7字节的前同步码，帧的后面时96比特的时间，称为<strong>帧间间隔</strong></p></li><li><p><strong>帧定界符</strong>：帧前后界定帧</p><ul><li>问题：数据内包含有与帧界定符一样的数据如何识别？</li><li>解决办法：<ul><li>在数据内相同字节前面加上转义字符，如果数据内还含有与转义字符一样的数据，则一样在前面加上转义字符</li><li>比特填充例子：<ul><li>在和帧定界符一样的数据内插入一个比特0或者1，接收时剔除</li></ul></li></ul></li><li>考虑到差错控制等因素，帧数据部分有上限称为<strong>MTU最大传送单元</strong></li></ul></li></ul><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><ul><li>误码率：传输错误比特占总比特数的比率为误码率BER</li></ul><h4 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h4><ul><li>在传输数据后面加上一位奇偶校验码</li><li>缺点：无法检测多个或者偶数个误码</li></ul><h4 id="循环冗余校验码CRC"><a href="#循环冗余校验码CRC" class="headerlink" title="循环冗余校验码CRC"></a>循环冗余校验码CRC</h4><ul><li>收发双方约定好一个生成多项式G(X)</li><li>发送防基于待发送的数据和生成多项式计算出差错检测码（冗余码），将其添加到待传输数据的后面一起传输</li><li>接收方通过生成多项式来计算收到的庶几乎是否产生了误码</li></ul><blockquote><p> 举例：G(x) &#x3D; x^3 + x^2 + 1 ,发送信息为 101001</p><p>1.提取系数（x^3 到 x^0） 1101</p><p>2.在待发送信息后面加上生成式G(x)最高次数（3）个的0，也就是101001000</p><p>3.做“除法”，101001000除以1101，不是减去而是做异或操作</p><p>得到余数为001，添加到发送信息后面，接收方将所有数据除以产生式系数余数为0则表示没有误码</p></blockquote><ul><li>检测码无法进行纠错，一般都是使用CRC码</li></ul><h3 id="可靠传输的基本概念"><a href="#可靠传输的基本概念" class="headerlink" title="可靠传输的基本概念"></a>可靠传输的基本概念</h3><ul><li><p>当检测到传输错误的时候该如何处理</p></li><li><p>可靠传输服务：<strong>尽可能实现发送端发送什么，接收端就收到什么</strong></p></li><li><p>不可靠传输服务：仅仅丢弃误码的帧</p></li><li><p>一般情况下，有限链路的误码率较低，为了减少开销，并不要求数据链路层提供可靠服务，交由上层处理</p></li><li><p>无线电路易受干扰，因此要求数据链路层必须向上册提供可靠传输服务</p></li><li><p>传输差错除了比特差错还有分组丢失，分组失序，分组重复等。这些交由上层处理</p></li></ul><h2 id="几种可靠传输的协议"><a href="#几种可靠传输的协议" class="headerlink" title="几种可靠传输的协议"></a>几种可靠传输的协议</h2><ul><li>这几种可靠传输协议不局限于数据链路层</li></ul><h3 id="停止等待协议SW（-或-自动请求重传协议ARQ）"><a href="#停止等待协议SW（-或-自动请求重传协议ARQ）" class="headerlink" title="停止等待协议SW（ 或 自动请求重传协议ARQ）"></a>停止等待协议SW（ 或 自动请求重传协议ARQ）</h3><ul><li><p><strong>接收方确认收到数据分组后才能发送下一分组</strong></p></li><li><p>发送方发送一个分组（DATA）后就停止发送，等待收到接收方确认分组（<strong>ACK</strong>）才继续发送</p></li><li><p>问题1：刚开始发送就丢失，接收方无法得知是否发送了分组</p><ul><li>解决办法：设置一个<strong>超时计时器</strong>，超过时间将重传，设置时间一般为略大于接收双方平均往返时间</li></ul></li><li><p>问题2：发送方发送后，接收方确认分组丢失，发送方超时重传，接收方无法确定是否是重复分组，造成分组重复</p><ul><li>解决办法：发送方给<strong>数据分组带上分组序号</strong>，使得接收方可以识别，<strong>且只需要一个比特编号因为最多同时两组</strong></li></ul></li><li><p>问题3：发送方发送0号后，接收方0号回答延迟了，发送方超时重传0号，并在之后接收到确认分组，发送下一个分组1号，接收方收到超时重传的0号又发送一个确认分组因为无法确定是不是第一个回答丢失了，发送方因此收到两个确认分组，造成重复确认</p><ul><li>解决办法：给<strong>确认分组带上序号</strong></li></ul></li><li><p>注意：当数据分组有误码时候，可以发送否认分组（<strong>NAK</strong>）示意发送方重新发送</p></li><li><p><strong>信道利用率U</strong></p><ul><li><p>忽略处理时延，十分低</p><blockquote><p><strong>U &#x3D; Td &#x2F; (Td + RTT + Ta)</strong></p><p>Td：数据发送(传输时延)耗费时间</p><p>RTT：数据<strong>往返</strong>（传播时延）时间</p><p>Ta：发送确认分组的时间 （因远小于Td，一般可忽略）</p></blockquote></li></ul></li></ul><h3 id="回退N帧协议GBN-（滑动窗口协议）"><a href="#回退N帧协议GBN-（滑动窗口协议）" class="headerlink" title="回退N帧协议GBN （滑动窗口协议）"></a>回退N帧协议GBN （滑动窗口协议）</h3><ul><li><p>采用3个比特给分组编序号，即0~7</p></li><li><p>发送窗口尺寸Wt取值：<strong>1&lt; Wt &lt;&#x3D; 2^3 - 1</strong> </p></li><li><p>接收窗口尺寸Wr取值只能为1</p></li><li><p>无差错情况：</p><ul><li>发送方不断发送发送窗口序号的数据分组</li><li>接收方每确认（<strong>和接收窗口序号比对</strong>）一个数据分组就将接收窗口向后移动，同时发送确认分组</li><li>发送方收到确认分组后同样向后移动，同时新的序号加入窗口，继续发送</li></ul></li><li><p>累积确认：一次性确认多个分组减少占用资源，但是容易出错</p></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E5%8D%8F%E8%AE%AE.png" alt="image-20231221232743895"></p><ul><li><p>发送数据有误码</p><ul><li>接收方只发送接收窗口前确认序列</li><li><strong>发送方收到后将整组序列重传</strong>（因此在通信质量差时，这个协议效率并不比停止等待高）</li></ul></li><li><p>发送窗口尺寸等于上限</p><ul><li>发送方发送0~7组数据，接收方回答确认分组7，当确认分组丢失时候，发送方超时重传8组数据，接收方无法分辨这一组是重传还是下一组的8组数据，会视为确认成功继续接收</li></ul></li></ul><h3 id="选择重传协议SR"><a href="#选择重传协议SR" class="headerlink" title="选择重传协议SR"></a>选择重传协议SR</h3><ul><li>Wr不再限制为1，Wr取值一般可与Wt相同</li><li>不再使用累积确认</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-%E9%80%89%E6%8B%A9%E9%87%8D%E4%BC%A0%E5%8D%8F%E8%AE%AE.png" alt="image-20231221232544313"></p><ul><li><p>接收方收到数据的时候将对接收窗口所有序列进行比对，然后对确认成功的序列进行滑动</p></li><li><p>数据中间丢失只能靠发送窗口超时重发，但<strong>只需要重传错误分组</strong></p></li><li><p>Wt取值问题：<strong>1 &lt; Wt &lt;&#x3D; 2^(n-1)</strong> ，超过这个范围会出现相似的无法区分新旧分组问题</p></li><li><p>Wr取值问题：1 &lt; Wr &lt;&#x3D; Wt</p></li></ul><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><ul><li>三部分构成<ul><li>对各种协议封装方法（封装成帧）</li><li>链路控制协议LCP            （用于建立，配置以及测试数据链路连接）</li><li>一套网络控制协议NCPs  （用以支持不同的网络层协议）</li></ul></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-PPP%E5%8D%8F%E8%AE%AE%E5%B8%A7.png" alt="image-20231221234107598"></p><ul><li><p>透明传输问题：帧数据部分和定界符号一样</p><ul><li>面向字节的异步链路：字节填充法：插入转义字符</li><li>面向比特的同步电路：比特填充法：插入比特流，例如连续5个1，则填充一个0</li></ul></li><li><p>差错检测：</p><ul><li>CRC计算：x^16 + x^12 + x^5 + 1,结果检验通过查表比对减少cpu占用</li><li>出现差错时候直接放弃帧，因此PPP提供的是不可靠传输服务</li></ul></li><li><p>工作状态</p></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-PPP%E5%B7%A5%E4%BD%9C%E7%8A%B6%E6%80%81.png" alt="image-20231221235011792"></p><h2 id="媒体接入控制（MAC）"><a href="#媒体接入控制（MAC）" class="headerlink" title="媒体接入控制（MAC）"></a>媒体接入控制（MAC）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>共享信道中信号容易发生碰撞，要考虑如何处理和协调占用</p></li><li><p>组成</p><ul><li>静态划分：按照频分，时分，码分进行信道划分为每一个划分固定信道<ul><li>缺点：不灵活，信道利用率低，通常再无线网络的物理层使用</li></ul></li><li>动态划分<ul><li>受控接入<ul><li>集中控制：建立一个主站使用轮询制度询问是否需要发送数据，缺点是单点故障问题大</li><li>分散控制（传花球）：使用一个令牌在各个结点之间传播，拿到的可以传送数据</li></ul></li><li>随机接入<ul><li>所有站点通过竞争来发送数据，具体方式各有差异，<strong>共享式以太网便是采用这种方式</strong></li></ul></li></ul></li></ul></li><li><p>注意：随着技术的发展，更高性能的点对点链路和链路交换机式的局域网在有线领域已经完全取代了共享式局域网</p><p>​           但是无线网络因为其特性仍然使用这种技术</p></li></ul><h3 id="静态划分"><a href="#静态划分" class="headerlink" title="静态划分"></a>静态划分</h3><ul><li><p>信道复用，多个用户共用一个信道</p></li><li><p>频分复用FDM</p><ul><li>复用器将不同子信道（子频带）调节到各个频带上，中间设置隔离频带</li><li>分用器将信道里面的各个子频带分开发送</li></ul></li><li><p>时分复用TDM</p><ul><li>将时间划分为各个不同的时隙，轮流将时隙分配给不同用户使用</li><li>每一轮（所有用户都使用一次）称为一个TDM帧</li></ul></li><li><p>波分复用WDM（光的频分复用）</p><ul><li><p>光调制器将多路光载波划分为不同波长的光，通过光复用器合在一起在光纤上传播，因为光纤的衰减性还</p><p>必须设置<strong>掺铒光纤放大器EDFA</strong>放大，最后进行光分用器</p></li><li><p>每一路的光载波波长必须相同，且传播速度一致，<strong>当n路传播速率为v光复用后，总光路的传播速率为n*v</strong></p></li></ul></li><li><p>码分复用CDM</p><ul><li>将频带资源划分为很多子信道，每个只占一部分，用户根据特殊的码分序列区分</li><li>一个站要发送比特1：则发送他自己的 m bit码分序列</li><li>一个站要发送比特0：则发送他自己的 m bit码分序列的二进制反码</li><li>不同站之间的码分序列必须不相同且相互正交（内积为0）【正交时将0看作-1】</li><li>接收方将收到的数据加起来（每一位都相加）和各个站点的码分序列进行相乘，结果为1则视为此站发送了比特1，结果为-1则是比特0，为0则是没有发送（根据各个码分序列相交）</li></ul></li></ul><h3 id="动态划分"><a href="#动态划分" class="headerlink" title="动态划分"></a>动态划分</h3><p>随机接入</p><ul><li>多址接入MA <ul><li>多个站连接在一条总线上。竞争使用总线</li></ul></li><li>载波监听CS<ul><li>每个站在发送帧之前先要检测一下总线是否有其他站点在发送帧（先听后说）</li><li>若检测到忙，则继续检测并等待总线空闲96bit时间，然后发送这个帧</li></ul></li><li>碰撞检测CD<ul><li>每一个正在发送的帧的站点边发送帧边检测碰撞（边说边听）</li><li>检测到碰撞之后立刻重新发送，退避一段时间后发送</li></ul></li></ul><h4 id="CSMA-CD-（广播信道的有线局域网）"><a href="#CSMA-CD-（广播信道的有线局域网）" class="headerlink" title="CSMA&#x2F;CD （广播信道的有线局域网）"></a>CSMA&#x2F;CD （广播信道的有线局域网）</h4><ul><li>状态转换<ul><li>持续监听 –&gt; 发送数据  –&gt; 碰撞检测 -&gt;退避 -&gt;重新监听</li></ul></li><li>碰撞检测的争用期（碰撞窗口）<ul><li>当信息碰撞到其它站点的信息时会<strong>原路返回并被站点检测到</strong></li><li>因此，发生碰撞的时候，发送出去的信息到回来的时间<strong>会小于整个以太网端到端往返的传播时间</strong></li><li>这个传播时间被称为争用期或碰撞窗口</li><li>碰撞窗口越长，碰撞概率越大，因此总长度不能太大</li></ul></li><li>最小帧长<ul><li>如果主机发送的帧太短，则<strong>在帧发送完毕后就不会再对其负责</strong>，然而帧仍然在信道传播，当发生碰撞的时候，主机将不会检测到碰撞并重发帧</li><li><strong>以太网规定最小帧长为64字节，即512比特</strong>（即为争用期）</li><li>最小帧长确保了主机在发送完成之前就检测到是否发生了碰撞</li><li>当检测到发生的时候立马停止发送，已经发送的<strong>小于64字节的帧会被视为无效帧</strong></li></ul></li><li>最大帧长<ul><li>主机缓存区有上限，且帧过长会导致信道堵塞使其它主机服务无法满足</li><li>帧64 ~ 1518字节，数据46 ~ 1500</li></ul></li><li>退避时间<ul><li>退避时间  &#x3D;  基本退避时间（争用期2t）* 随机数r </li><li>r 从离散的整数集合{0，1，……..，2^k -1} 随机选出一个数</li><li>k &#x3D; min {重传次数，10} </li><li>当k &gt; 16 时候，丢弃该帧，并向上层报告</li></ul></li><li>信道利用率（不考虑碰撞等情况）<ul><li>S &#x3D; t0 &#x2F; ( t0 + t )</li><li>t0：发送时间</li><li>t：传播时间</li></ul></li></ul><h4 id="CSMA-CA-（广播信道的无线局域网）"><a href="#CSMA-CA-（广播信道的无线局域网）" class="headerlink" title="CSMA&#x2F;CA （广播信道的无线局域网）"></a>CSMA&#x2F;CA （广播信道的无线局域网）</h4><ul><li><p>由于无线信道条件特殊，接收信号强度远小于发送信号强度并且存在隐蔽站（无法检测其它站点信号）问题，无法实现碰撞检测CD</p></li><li><ol start="802"><li>11无线局域网采用CSMA&#x2F;CA协议，使用碰撞避免CA功能</li></ol></li><li><p>由于不可能完全避免且无线信道误码率较高，所以碰撞避免实际上是停止等待协议的翻版</p></li><li><p>802.11实际上在MAC层定义了两种不同的媒体接入方式</p><ul><li>分布式协调功能DCF：没有中心站点，各自竞争，是默认的主要使用方式</li><li>点协调功能PCF：集中控制算法在接入点AP实现集中控制，使用较少</li></ul></li><li><p>帧间间隔IFS</p><ul><li>所有站点必须在持续检测到信道空闲在一段指定时间后才能发送帧，这个时间被称为IFS</li><li>帧间间隔长度主要受帧优先级影响，高优先级间隔更短<ul><li>短帧间间隔SIFS：最短帧间间隔，用于分隔开属于同一次对话的各个帧，多用来发送ACK帧，CTS帧等</li><li>DCF帧间间隔DIFS：多用来发送数据帧和管理帧</li></ul></li></ul></li><li><p>退避算法</p><ul><li>减少碰撞</li><li>使用时机：<ul><li>在发送数据帧之前检测到信道处于忙状态时，在经过DIFS后，还要退避一段时间</li><li>重传帧时</li><li>成功发送一个帧后连续发送下一个帧时</li></ul></li><li>执行退避算法：<ul><li>开始时，站点为退避计时器设置一个随机的退避时间</li><li>退避时间为0时，开始发送数据</li><li>当退避计时器计时的时候信道变忙，则冻结计时器，等待信道空闲后再经过DIFS后，继续启动计时器</li></ul></li><li>执行第 <strong>i</strong> 次退避的时候<ul><li>退避时间将在时隙编号{0，1，….，2^(2+i)-1}之中随机选择并乘以基本退避时间（一个时隙的长度）就可以得到随机的退避时间，从而减少不同站点拥有一样的退避时间，当时隙编号到达255时（也就是第六次退避），就不再增加</li></ul></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-CSMA%2FCA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="image-20231222172938230"></p></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-CSMA%E9%80%80%E9%81%BF%E7%AE%97%E6%B3%95.png" alt="image-20231222173850892"></p><ul><li><p>CSMA&#x2F;CA的信道预约和虚拟载波监听</p><ul><li><p>为尽可能减少碰撞影响，要求发送数据节点对信进行<strong>预约</strong></p><ul><li><p>源站在发送数据帧之前发送一个短的控制帧，称为<strong>请求发送RTS</strong>，包括源地址，目的地址以及这次通信所持续时间</p></li><li><p>目的站收到RTS后，若媒体空闲（等待一个SIFS）则发送一个响应控制帧，称为<strong>允许发送CTS</strong>，包括持续时间</p></li><li><p>源站收到CTS，等待SIFS后，便发送数据帧</p></li><li><p>其它站点接收到CTS和RTS后就推迟接入到无线局域网之中</p></li></ul></li><li><p>虚拟载波监听</p><ul><li>只要收到RTS或者CTS就知道信道要被占用多久</li></ul></li></ul></li></ul><h3 id="MAC地址，IP地址，ARP协议"><a href="#MAC地址，IP地址，ARP协议" class="headerlink" title="MAC地址，IP地址，ARP协议"></a>MAC地址，IP地址，ARP协议</h3><h4 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h4><ul><li>多个主机连接在同一个广播信道时，要想实现两个主机之间的通信，每个主机必须有一个唯一的标识，即<strong>一个数据链路层的地址</strong></li><li>这个地址也被称为MAC（Media Access Control 媒体控制接收）地址</li><li>MAC地址被固化在网卡的只读存储器之中，因此也被称为硬件地址或者物理地址</li></ul><p>IEEE 802局域网Mac地址格式</p><ul><li><p>48个比特，六个字节，十二个十六进制字符表示</p></li><li><p>MAC地址全为1时，也就是FF-FF-FF-FF-FF-FF，表示<strong>广播地址</strong></p></li><li><p>第一个字节的b0和b1位比特0分别表示单播（广播）地址，全球（相反就是本地）</p><ul><li><p>比如：07-E0-12-F6-2A-D8，其中第一字节07表示00000111，b0是1，第一位发送表示广播地址，b1是1表示是本地</p><p>本地多播就是属于某个多播组内，组内会选择接收</p></li><li><p>一般设备都是全球单播地址</p></li></ul></li><li><p>随机MAC地址</p><ul><li>防止被监听</li></ul></li></ul><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><ul><li>IP地址是因特网上的主机和路由器所使用的地址</li><li>组成<ul><li>网络编号：用于标识因特网上数以百万计的接口，例如：192.168.1.X</li><li>主机编号：标识同一网络的不同主机，例如：XXX.XXX.X.1</li></ul></li><li>作用：<strong>MAC地址不具备区分不同网络的功能。IP地址因此用于在用户接入因特网的时候来区分不同网络</strong></li><li>在因特网的数据传输之中，一次不同网络主机之间的通信随着路由器的转发，<strong>帧中MAC地址目的地址和源地址会随着设备的不同而变化</strong>，但是IP地址则是一直不变，MAC地址只在同一个网络有效</li></ul><h4 id="ARP地址解析协议"><a href="#ARP地址解析协议" class="headerlink" title="ARP地址解析协议"></a>ARP地址解析协议</h4><ul><li><p>通过IP地址获取MAC地址，用于进行MAC帧封装</p></li><li><p>在数据通信之中，发送信息方无法获取对方的MAC地址，需要通过<strong>ARP高速缓存表</strong>（储存在主机之中）来获取IP地址所对应的MAC地址，当ARP表中没有记录IP所对应的MAC地址时将发送<strong>ARP请求报文</strong>（MAC文的广播帧）来获取MAC地址</p></li><li><p>ARP报文</p><ul><li>包含自身的IP和MAC地址</li><li>收到报文的主机识别到正确请求报文会先记录这个报文内容在ARP表内，然后发送ARP响应（MAC帧中的单播地址），包含自身信息</li></ul></li><li><p>ARP高速缓存表</p><ul><li><p>记录IP地址所对应的MAC地址，类型为静态或者动态</p><ul><li><p>动态：自动获取，生命周期默认为两分钟</p></li><li><p>静态：手工配置，不同操作系统的生命周期不同，例如系统重启后不存在或者系统重启后依然有效</p></li></ul></li></ul></li><li><p>作用范围</p><ul><li>同一网络之中</li><li><strong>不同网络的通信通过获取路由器MAC来发送信息，事实上，发送方不知道接收方MAC地址</strong>，但是知道IP地址</li></ul></li></ul><h2 id="集线器和交换机"><a href="#集线器和交换机" class="headerlink" title="集线器和交换机"></a>集线器和交换机</h2><ul><li><p>早期的总线型以太网：同轴电缆（被淘汰）</p></li><li><p>集线器HUB的星型以太网：双绞线电缆连接</p><ul><li><p>逻辑上仍是一个总线网，使用CSMA&#x2F;CD协议</p></li><li><p>集线器只用于进行转发比特，作用于物理层，也具备一定的网络管理功能</p></li><li><p>集线器扩展网络方便，但同时会扩展广播域和碰撞域</p></li></ul></li></ul><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a>以太网交换机</h3><ul><li>特性<ul><li><strong>交换机可以将数据比特流转发给特定主机而不是所有主机</strong>，对比集线器拥有显著优势</li><li>以太网交换机拥有多个接口，每个接口都连接在主机上或者交换机上，采用全双工方式</li><li>以太网交换机具有<strong>并行性</strong>，<strong>同时连通多个接口，使多对主机同时通信而无碰撞</strong></li><li>以太网交换机支持多种速率</li><li>工作在数据链路层，收到帧后，<strong>在帧交换表之中查找帧的目的MAC地址对应的接口号</strong>，然后转发该帧</li><li>扩展以太网时，只会扩大广播域而不会扩展碰撞域</li></ul></li></ul><blockquote><p>由于交换机的出现基本杜绝的帧碰撞的发生，许多高性能的网络例如千兆万兆以太网之中不再使用CSMA&#x2F;CD协议，因为退避算法可能会反而使得性能下降</p></blockquote><ul><li><p>以太网自学习和转发帧的流程</p><ul><li>以太网交换机拥有一个<strong>帧交换表</strong>用于查找MAC地址对应的接口</li><li>交换机时即插即用的设备，刚上电的帧交换表是空的，随着网络只占总各主机通信的进行，通过子<strong>学习算法自动建立</strong>起帧交换表</li><li>遇到没有记录的MAC地址时，将会<strong>盲目的对所有接口转发该帧</strong>（与集线器一样，也称泛洪），在泛洪前先记录来源地址的MAC地址以及对应接口</li><li>收到正确主机发送的接收信息后会先记录相应的MAC地址和接口然后转发给来源地址接口</li><li><strong>可以理解为过路的帧都要记录</strong></li><li>每条地址也具有生命周期，到期自动删除</li></ul></li><li><p>以太网交换机的<strong>生成树协议STP</strong></p><ul><li>添加冗余链路可以提高以太网的可靠性，但是冗余链路会带来负面效应–<strong>形成网络环路</strong><ul><li>网络环路上会重复发送给广播帧引发网络风暴</li><li>同一MAC地址来源可能来自不同接口造成反复帧交换表震荡</li></ul></li><li><strong>生成树协议STP可以在增加冗余链路来提高网络的可靠性的同时又避免网络环路的各种问题</strong></li><li>不论交换机之间采用怎样的物理连接，交换机都能自动的计算并构建一个逻辑上没有闭环的网络并连接到每个网络</li></ul></li></ul><h2 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>不断拓展以太网后，巨大的广播域即使不存在网络闭环也会消耗许多资源并变得难以维护带来许多安全问题</li><li>分割广播域方法<ul><li>使用路由器隔离广播域，路由器默认情况下不会转发广播，但是成本较高</li><li>虚拟局域网来隔离，VLAN将局域网之中的设备划分为与物理位置无光的逻辑组的技术，这些逻辑具有某些共同的需求</li></ul></li><li>同一个VLAN之间可以广播通信，不同的VLAN之间则不可以</li></ul><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><ul><li><p>在以太网的MAC帧上进行扩展，扩展4字节的VLAN标记</p></li><li><p>交换机的端口类型</p><ul><li>Access<ul><li>只连接用户计算机，只能属于一个VLAN</li><li>交换机会对此端口发送到广播帧插入VLANID，然后转发到那些相同的ID的端口上</li></ul></li><li>Trunk<ul><li>用于交换机之间或者交换机和路由器之间连接，可以属于多个VLAN</li><li>对于VID不等于Trunk端口的默认VID的帧，Trunk端口是<strong>不去掉VID</strong>直接转发的，接收到不去掉VID的帧时候则直接放到交换机里匹配转发</li><li>对于VID等于Trunk端口的默认ID的帧，Trunk端口是去掉VID直接转发的，接收到去掉VID的帧时候则<strong>先插入Trunk端口的默认VID</strong>，然后直接放到交换机里匹配转发</li></ul></li><li>Hybrid<ul><li>华为交换机私有类型</li></ul></li></ul></li><li><p>缺省VLAN ID</p><ul><li><p>在思科交换机称为本征VLAN，所有端口交换机的都是VLAN1</p></li><li><p>华为交换机上称为Port VLAN ID，即端口VLAN ID ，简称PVID</p></li></ul></li></ul><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><ul><li>作用：实现网络互联，实现数据包之间在各个网络之间的传输，又称网际层</li><li>主要问题：<ul><li>是否提供可靠或者不可靠传输服务（IP不可靠）</li><li>网络层寻址问题（路由表）</li><li>路由选择问题</li></ul></li></ul><h2 id="网络层的两种服务"><a href="#网络层的两种服务" class="headerlink" title="网络层的两种服务"></a>网络层的两种服务</h2><h3 id="面向连接的虚电路服务"><a href="#面向连接的虚电路服务" class="headerlink" title="面向连接的虚电路服务"></a>面向连接的虚电路服务</h3><ul><li><p>可靠通信需要通过网络来保证</p></li><li><p>必须建立网络层的连接-虚电路VC（逻辑连接）</p></li><li><p>通信双方沿着已建立的虚电路发送分组</p></li><li><p>目的主机的地址仅在建立连接的阶段使用，之后再每个分组的首部携带一条虚电路编号即可</p></li><li><p>通信结束，再释放之前建立的虚电路</p></li></ul><h3 id="无连接的数据报服务（实际采用）"><a href="#无连接的数据报服务（实际采用）" class="headerlink" title="无连接的数据报服务（实际采用）"></a>无连接的数据报服务（实际采用）</h3><ul><li>可靠通信应该由用户主机来保证</li><li>不需要建立网络连接</li><li>每个分组可走不同捷径</li><li>每个分组的首部必须携带目的主机的完整地址</li><li>不提供端到端的可靠传输服务，路由器造假更为简单，且价格低廉</li><li>但同时通信质量有所下降</li></ul><h2 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h2><ul><li>IPv4地址是给因特网上每一台主机（或者路由器）的每一个接口分配一个在全世界范围内是唯一的32比特的标识符</li><li>表示：<ul><li>每八个bit分为一组，共4组</li><li>将八个比特表示为10进制数，然后用“ . ”分割</li><li><strong>IPv4地址由网络号（前）和主机号（后）构成</strong></li></ul></li><li>三种分址方式</li></ul><h3 id="分类编址"><a href="#分类编址" class="headerlink" title="分类编址"></a>分类编址</h3><ul><li><p>分为ABCDE类地址</p><ul><li><p><strong>A类</strong>：网络号占8位，首位（也就是网络号第一位）固定为0</p><ul><li><p><strong>主机号全0地址是网络地址，主机号全1是广播地址，不能分配给主机或者路由器接口</strong></p></li><li><p>最小网络号0保留不指派，0.0.0.0只能作为源地址使用，表示“在本网络上的本主机”</p></li><li><p>第一个可指派网络号1，<strong>网络地址</strong>（本身不能指派）为1.0.0.0，最后一个可指派为126，即<strong>网络地址</strong>为126.0.0.0</p><blockquote><p>共有2^7 - 2 &#x3D; 126个网路号可以指派</p><p>共有2^24-2个主机号供一个网络号指派</p></blockquote></li><li><p>最大网络号为127，即0111111，作为本地回环测试地址，也不能指派</p><blockquote><p>本地环回测试指派地址由127.0.01~127.255.255.254</p></blockquote></li></ul></li><li><p><strong>B类</strong>：网络号占16位，最高两位固定为10</p><ul><li><p>最小网络号也就是第一个可指派的网络号128.0，网络地址为128.0.0.0</p></li><li><p>最大网络号也就是最后一个可指派的网络号191.255，网络地址为191.255.0.0</p><blockquote><p>共有2^(16-2)&#x3D;16384个网络号可分配</p><p>每个网络号可指派 2^16 - 2 &#x3D; 65534</p></blockquote></li></ul></li><li><p><strong>C类</strong>：网络号占24位，最高三位固定为110</p><ul><li><p>最小网络号也就是第一个可指派的网络号192.0，网络地址为192.0.0.0</p></li><li><p>最大网络号也就是最后一个可指派的网络号223.255，网络地址为191.255.255.0</p><blockquote><p>共有2^(24-3)&#x3D;16384个网络号可分配</p><p>每个网络共有2^8-2&#x3D;254个可分配IP地址</p></blockquote></li></ul></li><li><p>D类：分为多播地址，最高四位固定为1110，不区分网络号与主机号</p></li><li><p>E类：保留为今后使用，最高位1111</p></li></ul></li></ul><h4 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h4><ul><li><p>缘由：ABC类每个网络号可分配IP地址差异巨大，不能满足需求</p><blockquote><p>例如某个公司网络需要300个IP地址分配，但是每个C类网络号只能分配254个，于是分配B类，但是B类足足有65534个地址，</p><p>这造成资源严重浪费</p><p>注意：每个网络只能分配给一个网络号</p><p>其次，进行网络拓展的时候，新增网络号需要等待较长的时间并花费更高的费用，会增加路由表的记录负担</p></blockquote></li><li><p>解决办法：<strong>从主机号部分借用一部分作为子网号</strong></p><ul><li>问题：如何让其它计算机区分主机号哪部分比特被当作子网号了呢？</li><li>划分子网工具：子网掩码</li></ul><blockquote><p>将IP地址划分为网络、子网和主机有多种重要作用，包括：</p><ol><li><strong>资源管理：</strong> 子网划分允许网络管理员更有效地管理IP地址，确保它们被合理地分配给不同的网络和子网。这有助于防止IP地址的浪费，并使网络更容易维护。</li><li><strong>网络设计和规划：</strong> 子网划分使网络设计更加灵活。不同的部门或功能组可以被分配到不同的子网，使网络结构更加有条理。这有助于规划和适应不同网络需求的变化。</li><li><strong>安全性：</strong> 子网划分有助于提高网络的安全性。通过对不同子网之间的流量进行控制，可以实施安全策略，减少横向移动和未经授权的访问。</li><li><strong>路由效率：</strong> 子网划分有助于提高路由效率。路由器可以更准确地识别目标子网，减少广播和无效的路由请求，从而提高整个网络的性能。</li><li><strong>故障隔离：</strong> 子网划分可以帮助隔离网络故障。如果一个子网出现问题，它不会直接影响其他子网，从而减小故障对整个网络的影响范围。</li><li><strong>IP地址分配：</strong> 子网划分有助于更灵活地分配IP地址，确保每个子网都有足够的地址空间，同时避免浪费。</li></ol></blockquote></li><li><p>子网掩码</p><ul><li>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</li><li>子网烟漫使用连续的比特1来表示网络号和子网号</li><li>比特0来对应主机号</li><li>使用划分子网的IPv4地址与其对应的子网掩码进行逻辑运算就可以得到IPv4地址躲在子网的网络地址</li></ul></li></ul><blockquote><p>例：某个网络地址为218.75.230.0，子网掩码为255.255.128</p><p>可知为C类地址，子网掩码除去网络号部分为128为10000000，子网部分为1</p><p>可以得出划分了 2^1 &#x3D; 2 个子网，每个子网可分配IP数量为2^(8-1)-2 &#x3D; 126 个</p><p>第一个子网可分配地址为 218.75.230.1 ~ 218.75.230.126，子网也有网络地址和广播地址</p></blockquote><h3 id="无分类编制的IPv4地址"><a href="#无分类编制的IPv4地址" class="headerlink" title="无分类编制的IPv4地址"></a>无分类编制的IPv4地址</h3><ul><li><p>划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是因特网的急速扩张，IPv4难以满足要求</p></li><li><p>出现了IETF发布的无分类路由选择CIDR</p><ul><li>CIDR消除了传统的A类，B类和C类地址</li><li>CIDR更加有效的分配IPv4的地址空间</li></ul></li><li><p>CIDR表现方式</p><ul><li><p>采用斜线记法，在IPv4地址后面加上斜线 “ &#x2F; ” 来协商网络前缀所占的比特数量</p><blockquote><p>举例： 128.14.35.7&#x2F;20，表示前20号为网络前缀所占用的比特数量</p></blockquote></li></ul></li><li><p>CIDR实际上是将网络前缀相同的连续的IP地址组成了一个 “ CIDR地址块 ”</p><ul><li>地址块中的所有地址都包含了<ul><li>该地址块的最小地址，最大地址</li><li>地址数量</li><li>地址块聚合某类网络（ABC类）的数量</li><li>地址掩码（或称子网掩码）</li></ul></li></ul></li><li><p>路由聚合（超网）</p><ul><li><p>将具有相同网络前缀的路由器接口一端的所有地址块聚合成同一地址块，<strong>相同前缀保留，其余取比特0</strong></p><blockquote><p>举例：路由器上某一接口具有网络地址35.230.32.0&#x2F;21，35.230.40.0&#x2F;21，35.230.48.0&#x2F;21，35.230.56.0&#x2F;21</p><p>聚合找到共同前缀35.230.001，即前缀35.230.32，共19位</p><p>最后聚合为35.230.32.0&#x2F;19</p></blockquote></li><li><p>这种经过路由聚合的网络称为超网</p></li><li><p>前缀越长，地址块越小，路由越具体</p></li></ul></li></ul><h3 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h3><p>不同的应用需求</p><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/%E8%AE%A1%E7%BD%91-%E7%BD%91%E7%BB%9C%E5%B1%82-IP%E5%9C%B0%E5%9D%80%E5%BA%94%E7%94%A8%E8%A7%84%E5%88%92.png" alt="image-20231224164400881"></p><ul><li><p>定长子网掩码FLSM</p><ul><li><p>使用同一个子网掩码来划分子网</p></li><li><p>每个子网所分配的IP地址数量相同，造成IP地址的浪费</p><blockquote><p>对于上述图片的应用需求，若申请到的C类网络号位218.75.230.0，剩余8位</p><p>共有5个子网数量，选择2^3&#x3D;8个子网数量的比特位，即3个比特位的子网位</p><p>每个子网地址数量即位2^(8-3) &#x3D; 32位 </p><p>但即使这样也仍然造成了IP地址浪费</p></blockquote></li></ul></li><li><p>变长子网掩码VLSM</p><ul><li>使用不同的子网掩码来划分子网</li><li>每个子网所分配的IP地址数量可以不相同，减少浪费</li></ul></li></ul><blockquote><p>变长子网掩码便是尽可能分配更少的子网地址拥有数量</p></blockquote><h2 id="IP数据报的发送与转发"><a href="#IP数据报的发送与转发" class="headerlink" title="IP数据报的发送与转发"></a>IP数据报的发送与转发</h2><ul><li><p>直接交付：同一网络发送数据</p></li><li><p>间接交付：不同网络发送数据</p></li><li><p><strong>发送主机将目的IP地址与自身子网掩码进行相 “ 与 ” ，得到的网络地址与自己的网络地址不相符合便是不同网络</strong></p></li><li><p><strong>默认网关</strong></p><ul><li><strong>路由器将接口的IP地址设为接口下主机的默认网关</strong></li><li>主机要发送间接交付的时候直接将数据发送给默认网关，也就是交给路由器处理</li><li>对于需要转发的数据包，路由器会在路由表中查找下一跳所需要进入的路由器或子网接口</li></ul></li><li><p>对于子网广播，路由器不会进行转发</p></li></ul><h2 id="静态路由配置与环路问题"><a href="#静态路由配置与环路问题" class="headerlink" title="静态路由配置与环路问题"></a>静态路由配置与环路问题</h2><ul><li><p>采用人工配置路由表，开销小但是不能及时适应网络状态变化</p></li><li><p>默认路由条目</p><ul><li>路由器中配置因特网所有目的IP网络的下一跳显然不太现实</li><li>默认条目由人工配置，属于静态类型，目的网络为0.0.0.0&#x2F;0，下一跳为默认接口</li><li>当找不到路由表时默认转发为默认条目，网络前缀最短，路由最模糊</li></ul></li><li><p>特定主机路由条目</p><ul><li>与默认路由相反，目的网络时某一特定的主机</li><li>网络前缀最长，路由最具体</li><li>多条路由（例如默认路由）可选时，最长前缀匹配</li></ul></li><li><p>路由环路</p><ul><li>配置错误<ul><li>反复互相转发</li><li>防止路由环路的出现，出现了<strong>生存时间TTL字段</strong>，规定了数据包转发次数，TTL为0时，被丢弃</li></ul></li><li>聚合了不存在的网络<ul><li>也就是聚合的地址块中包含了不存在的主机</li><li>解决办法：将不存在的主机设为黑洞路由，不可转发</li></ul></li></ul></li></ul><blockquote><p>在路由表中，当网络地址中主机号部分不为0时，通常表示这个路由表项是在指定的网络范围内的一个子网（Subnet）。这是由于子网划分的实施，其中网络地址被分为更小的子网，而主机号部分被用于区分这些子网内的主机。</p><p>IPv4地址由网络地址和主机地址组成，例如 “192.168.1.0” 是一个IPv4网络地址，而 “.1” 是主机号部分。在常规的IP地址中，主机号部分为0表示整个网络，而当主机号部分不为0时，通常意味着该地址被用于子网内的主机。</p><p>例如，假设有一个网络 “192.168.1.0”，而路由表中有一项 “192.168.1.16”，这可能表示一个子网，其中 “.16” 是子网内的主机地址。这种子网划分有助于更有效地管理IP地址，提高网络的安全性和可伸缩性。</p></blockquote><h2 id="路由选择协议概述"><a href="#路由选择协议概述" class="headerlink" title="路由选择协议概述"></a>路由选择协议概述</h2><h3 id="静态路由选择与动态路由选择"><a href="#静态路由选择与动态路由选择" class="headerlink" title="静态路由选择与动态路由选择"></a>静态路由选择与动态路由选择</h3><ul><li><p>由人工配置的网络路由，默认路由，特定主机路由，黑洞路由等都属于静态路由</p></li><li><p>人工配置方式方式简单，开销小，但是不能即使适应网络状态变化</p></li><li><p>适用于小规模网络</p></li><li><p>由路由器通过路由选择协议自动获取路由信息</p></li><li><p>比较复杂，开销较大</p></li><li><p>适用于大规模网络</p></li></ul><h4 id="因特网路由选择"><a href="#因特网路由选择" class="headerlink" title="因特网路由选择"></a>因特网路由选择</h4><ul><li>自适应：采用动态路由选择</li><li>分布式：路由之间交换信息</li><li>分层次：将许多因特网划分为许多较小的<strong>自治系统AS</strong>（Autonomous System）<ul><li>自治系统由内部网关（路由）协议<strong>IGP</strong>和外部网关（路由）协议<strong>EGP</strong></li></ul></li></ul><h3 id="内部网关协议IGP"><a href="#内部网关协议IGP" class="headerlink" title="内部网关协议IGP"></a>内部网关协议IGP</h3><ul><li>路由信息协议RIP<ul><li>基于距离向量</li><li>RIP在因特网上最早使用，是思科最早的私有的协议，现已经被EIGRP取代</li></ul></li><li>内部网关路由协议IGRP</li><li>增强型内部网关路由协议EIFRP</li><li>开放式最短路径优先OSPF<ul><li>基于链路状态</li><li>OSPF在各种网络之中广泛使用</li></ul></li><li>中间系统到中间系统IS-IS<ul><li>基于链路状态</li><li>主要应用与骨干网上</li></ul></li></ul><h3 id="外部网关协议EGP"><a href="#外部网关协议EGP" class="headerlink" title="外部网关协议EGP"></a>外部网关协议EGP</h3><ul><li>边界网关协议BGP</li></ul><h3 id="路由表结构"><a href="#路由表结构" class="headerlink" title="路由表结构"></a>路由表结构</h3><ul><li><p>路由选择部分</p><ul><li>路由表<ul><li>仅仅包含从目的地址到下一跳的映射</li><li>需要对网络拓扑结构变化的计算最优化</li></ul></li><li>路由选择处理机</li></ul></li><li><p>分组转发部分</p><ul><li>输入端口：物理层 -&gt; 链路层-&gt;网络层</li><li>输出端口：网络层 -&gt; 链路层-&gt;物理层</li><li>分组处理：转发表（由路由表得来，使得查找过程最优化）</li></ul></li></ul><h3 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h3><ul><li><p>RIP定义一组每一个路由器到其它网络的距离称为<strong>距离向量D-V</strong></p></li><li><p>RIP使用条数来衡量到达目的网络的距离</p><ul><li>到直连网络距离为1</li><li>路由器到非直连网络的定义为所经过路由器数加一</li><li>允许经过一条路径最多只能包含15个路由器，等于16时候相当于不可达，只适用于小型互联网</li></ul></li><li><p><strong>RIP认为好的路由就是距离短的路由，也就是通过路由器数量最少的路由</strong></p><ul><li>当有多条距离相等的时候，进行<strong>等价负载均衡</strong>，也就是将通信量均衡分发至两条道路上</li></ul></li><li><p>RIP获取路由信息三要素</p><ul><li>仅和相邻路由器交换信息，也就是直连的路由器</li><li>交换路由表信息</li><li>周期性交换信息（例如30秒）</li></ul></li><li><p>基本工作过程</p><ul><li><p>开始时候只知道直连网络距离为1</p></li><li><p>然后开始和相邻路由器周期性交换路由信息</p></li><li><p>多次交换后，每个路由器都知道到达本AS各网络的最短距离和下一跳地址，称为<strong>收敛</strong></p></li><li><p>更新规则</p><ul><li>新路由表（也就是其它路由发过来的路由表）有更高的优先级，这标示着网络拓扑结构的最新变化</li><li><strong>所有新路由表条目距离都要加一</strong></li><li>相同目的网络，相同下一跳：选择新路由表的距离</li><li>相同目的网络，不同下一跳，新路由器距离更短：将原来记录覆盖为新路由表条目</li><li>相同目的网络，不同下一跳，新路由器距离和原来一样：添加一条新条目，等价负载均衡</li><li>相同目的网络，不同下一跳，新路由器距离比原来长：不更新</li></ul></li><li><p>RIP坏消息传播缓慢</p><ul><li><p>路由判断出某一网络出现故障并将距离改写为16，发送给其它路由</p></li><li><p>但同时其它路由发送了包含R1距离“ 正常 ”的路由表，路由将会误判（新路由表优先级更高）然后继续更新</p></li><li><p>然后一直循环形成路由环路，直到到达故障网络的条目距离不断累加到16</p></li><li><p>解决办法：（减缓，不能解决）</p><ul><li>限制最大路径距离为15</li><li>路由表发生变化的时候立刻发送更新报文，即“<strong>触发更新</strong>”</li><li>收到异常信息后不再发送，“水平分割”</li></ul></li></ul></li></ul></li></ul><h3 id="开放性最短路径优先OSPF"><a href="#开放性最短路径优先OSPF" class="headerlink" title="开放性最短路径优先OSPF"></a>开放性最短路径优先OSPF</h3><ul><li><p>使用了Dijkstra的最短路径算法SPF</p></li><li><p>基于链路状态的</p></li><li><p>不会产生路由环路</p></li><li><p>不限制网络规模，更新效率块，归敛速度快</p></li><li><p>链路状态是指本路由器和哪些路由相邻，以及相应的“代价”</p></li><li><p>代价表示cost，表示费用，距离等，这些都由网络管理人员决定，思科路由器采用100Mbps &#x2F; 链路带宽</p></li><li><p>OSPF相邻路由器通过交互<strong>问候（Hello）</strong>分组来进行维护<strong>邻居关系</strong></p><ul><li>Hello分组封装在IP数据报之中，发往组播地址224.0.0.5</li><li>发送周期为10秒</li><li>用于发现和维护邻居路由器的可达性</li></ul></li><li><p>OSPF链路路由器，都会产生<strong>链路状态警告LSA</strong></p><ul><li>直连网络的链路数据状态</li><li>邻居路由器的链路状态信息</li></ul></li><li><p>LSA被封装在<strong>链路状态更新分组LSU</strong>中，采用洪泛法发送</p></li><li><p>每个路由器都有一个链路状态数据库<strong>LSDB</strong>，用于<strong>存储LSA</strong></p></li><li><p>基于LSDB进行最短路径优先SPF计算，即构建出各自到达其他各路由器的最短路径</p></li><li><p>基本工作过程</p><ul><li>先进行问候分组，建立和维护邻居关系</li><li>然后进行链路状态数据库同步（通过交换数据库描述分组，和发送链路状态请求分组和链路状态更新分组，链路状态确认分组）</li><li>每30分钟或者链路状态变化的时候路由器都会发送链路状态更新分组（洪泛）</li><li>当多个路由器相互连接的时候，会产生多个广播分组（例如hello分组）<ul><li>采用<strong>指定路由器DR</strong>和<strong>备用的指定路由器BDR</strong></li><li>非BDR和DR之间不能交换信息，只能通过DR，BDR进行交换</li><li>这种方法类似于交换机生成树，叶子节点之间不能发送信息</li></ul></li></ul></li><li><p>OSPF能用于非常大的网络，OSPF把一个自治系统AS再划分为若干个更小的<strong>区域Area</strong></p><ul><li>限制洪泛法交换信息的范围，减少整个网络通信量</li></ul></li></ul><h3 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h3><ul><li><p>在不同的自治系统内，通过度量路由的“代价”（距离，带宽，费用等）可能不同</p><p>因此，对于自治系统之间的路由选择，使用“代价”作为度量来寻找最佳路由是不行的</p></li><li><p>必须考虑相关策略（政治，经济，安全等）</p></li><li><p>配置BGP的时候，每个自治系统要至少配置至少<strong>一个路由器</strong>作为该自治系统的<strong>“BGP”发言人</strong></p></li><li><p>不同自治系统的发言人要交换路由信息，首先必须确立TCP连接，端口号为179</p><ul><li>在<strong>TCP连接</strong>上交换BGP报文以<strong>建立BGP会话</strong></li><li><strong>利用BGP会话交换路由信息</strong></li><li>这两个路由器称为邻站或者对等站</li></ul></li></ul><h2 id="IPv4数据报首部格式"><a href="#IPv4数据报首部格式" class="headerlink" title="IPv4数据报首部格式"></a>IPv4数据报首部格式</h2><ul><li><p>20字节固定部分，每行4字节，32比特</p><ul><li><p>第一行</p><ul><li><p>【0~4】4比特，版本字段，表示<strong>IP协议版本</strong>，例如IPv4</p></li><li><p>【4~8】4比特，首部长度字段，该字段取值<strong>单位是4字节</strong>，最小十进制取值为5，表示IP数据报首部只有20字节固定部分</p><p>最大取值15，表示IP数据报首部包含20字节固定部分和最大40字节的可变部分</p></li><li><p>【8~16】8比特，区分服务字段，用来获得更好服务，实际上一直未使用</p></li><li><p>【16~32】16比特，总长度，表示<strong>IP数据报的总长度</strong>，即 首部+数据载荷 ，最大取值未十进制65535，字节为单位</p></li></ul></li><li><p>第二行</p><ul><li>【0~16】16比特，标识，当IP数据报超过封装成帧的最大长度（例如以太网的1500字节）时候，需要进行<strong>分片操作</strong>，标识则用来区分这些分片属于哪一个IP数据报，<strong>属于同一IP数据报，标识应该一样</strong>，标识产生于一个IP软件的计数器，每产生一个IP数据报，计数器加一并赋值给此字段</li><li>【16~19】3比特，标志位，分为DF，MF和一个保留位<ul><li><strong>DF</strong>：1表示不允许分片，0表示允许分片</li><li><strong>MF</strong>：1表示后面还有分片，0表示这是最后一个分片</li></ul></li><li>【19~32】13比特，片偏移，指出<strong>分片数据报的数据载荷部分偏移在源（最开始，因为可能会多次分片）数据报位置多少个单位</strong>，以8字节为单位，例如0&#x2F;8，意思就是第一个分片的片偏移，&#x2F;8是因为以8字节为单位，除以8后必须为整数</li></ul></li><li><p>第三行</p><ul><li>【0~8】8比特，生存时间TTL，以跳数为单位</li><li>【8~16】8比特，协议，指明IP数据报的数据部分是何种协议单元，例如1表示ICMP，2为IGMP，6为TCP，17是UDP</li><li>【16~32】16比特，首部检验和，用于检测首部传输过程中是否出现差错，比CRC简单名称为因特网检验和</li></ul></li><li><p>第四行</p><ul><li>【0~32】，源IP地址</li></ul></li><li><p>第五行</p><ul><li>【0~32】，目的IP地址</li></ul></li></ul></li><li><p>1~40字节可变部分</p><ul><li>可选字段，用来支持排错，测量和安全等措施</li><li>填充字段，保证可变部分是4字节的整数倍，采用全0填充，服务于首部长度字段</li></ul></li></ul><h2 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h2><ul><li><p>主机或者路由器使用路由器来发送差错报告报文和询问报文，封装在IP数据报中</p></li><li><p>共有以下5种：</p><ul><li>终点不可达：当路由器或者主机不能交付数据的时候，就向源地址发送不可达报文，里面包含各种错误</li><li>源点抑制：当路由器或者主机因为拥塞丢弃数据的时候，回发此报文</li><li>时间超过：当路由器或者主机因为生存时间TTL归零丢弃数据的时候，回发此报文</li><li>参数问题：当路由器或者主机因为误码等丢弃数据的时候，回发此报文</li><li>改变路由（重定向）：用于提醒主机下次应该将数据报发给另外的路由器</li></ul></li><li><p>对于以下几种情况不再发送ICMP错误报文</p><ul><li>由于ICMP差错报文引起的差错</li><li>第一个分片的数据报片出错了，所有后续数据报片不发送</li><li>具有多播地址的数据报不发送</li><li>对于具有特殊地址的（如127.0.0.0或者0.0.0.0）不发送</li></ul></li><li><p>应用举例</p><ul><li>分组间探测PING<ul><li>用于测试主机或者路由器之间的连通性</li><li>直接使用ICMP协议而不是TCP和UDP</li></ul></li><li>跟踪路由<ul><li>测试IP数据报从源主机到达目的主机要经过哪些路由器</li></ul></li></ul></li></ul><h2 id="虚拟专用网VPN和网络地址转换NAT"><a href="#虚拟专用网VPN和网络地址转换NAT" class="headerlink" title="虚拟专用网VPN和网络地址转换NAT"></a>虚拟专用网VPN和网络地址转换NAT</h2><ul><li><p>在所有IP地址中有一些专业私有地址给与单独的网络使用而不能在公网使用，例如192.168.0.0~192.168.255.255</p></li><li><p>用于两个专用网之间进行通信</p></li><li><p>类似于在专用网IP之中套了一层公网的壳，这个壳只需要一个公网的IP地址（路由器中）即可</p></li><li><p><strong>NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源</strong></p><blockquote><p>例如学校就是一个巨大的专用内网使用192.168.0.0~192.168.255.255然后申请一个公有地址172.38.1.5放在NNAT路由器上</p><p>在因特网中，来自学校的数据报的IP地址都是公有地址，而在学校网内部都是用私有地址</p></blockquote></li><li><p>减少了IPv4地址的消耗</p></li><li><p>问题</p><ul><li>如果NAT路由器上只有n个全球IP地址，则最多只有n个内网主机能够同时和因特网上的主机通信</li><li>解决办法：<ul><li>理由运输层的端口号和IP地址一起转换，这样就可以一个IP多个主机进行通信，这种技术称为<strong>NAPT</strong></li></ul></li></ul></li><li><p>外网主机不能首先发起访问内网的主机，也就是内网主机不能当服务器</p></li></ul><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><ul><li>网络层之前的服务解决了主机之间通过网络互联起来所面临的问题，实现了主机到主机之间的通信</li><li>但实际上计算机网络中进行通信的真正时提示是位于通信两端中的进程</li><li>运输层的任务是为不同主机上应用进程提供直接的通信服务，运输层协议又称端到端协议</li></ul><h2 id="端口号，复用与分用的概念"><a href="#端口号，复用与分用的概念" class="headerlink" title="端口号，复用与分用的概念"></a>端口号，复用与分用的概念</h2><ul><li>运行在计算机的进程使用进程标识符PID来标志，但是不同操作系统进程标识不统一</li><li>TCP&#x2F;IP体系的运输层使用<strong>端口号</strong>来区分应用层的不同应用进程</li><li>端口号使用16比特表示，取值范围0~65535<ul><li>0~1023，熟知端口号被分配给了一些重要的应用协议</li><li>1024~49151，不熟知应用使用</li><li>其余：留给客户进程短暂使用</li></ul></li><li>复用：不同的协议都使用TCP或者UDP协议，被TCP或者UDP进行封装</li></ul><h2 id="TCP与UDP对比"><a href="#TCP与UDP对比" class="headerlink" title="TCP与UDP对比"></a>TCP与UDP对比</h2><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><ul><li>可以随时发送数据</li><li>支持单播，多播和广播</li><li>UDP对上层的应用报文仅仅包裹一层UDP首部发送，是面向应用报文的</li><li>UDP基于同样无连接不可靠的IP协议，因此UDP是无连接不可靠的，对误码，丢失问题不关心，这种情况适用于IP电话，视频会议等实时应用</li><li>UDP封装的首部组成<ul><li>【0~2】2字节，源端口</li><li>【2~4】2字节，目的端口</li><li>【4~6】2字节，长度</li><li>【6~8】2字节，检验和</li><li>数据部分</li></ul></li></ul><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ul><li>传输数据前必须建立连接</li><li>仅支持单播</li><li>TCP仅将应用报文视作字节流，按照自身的算法提取字节逐个包装发送，并不在乎应用报文实际的大小和用户接收大小是否一致，识别字节流的工作由上层处理，TCP是面向字节流的</li><li>TCP提供可靠传输服务，提供流量控制和拥塞服务，适用于要求可靠传输的应用，例如文件传输</li><li>TCP报文段<ul><li>更加复杂</li></ul></li></ul><h2 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h2><ul><li>当发送方发送数据过快，接收方可能来不及接收</li><li><strong>流量控制来控制发送方的发送速率</strong></li><li>工作原理<ul><li>类似于回退N帧协议，拥有一个<strong>发送窗口rwnd</strong>标志着哪些字节要发送</li><li>在收到累积确认前，不能超前发送数据</li><li>内置有超时重传计时器，超时了就重新发送未确认的可发送数据</li><li>当收到接受方的累积确认后移动发送窗口，但不同的是，<strong>累积确认报文含有调整发送窗口大小的命令，这样实现流量控制</strong></li><li>当发送方收到一个窗口大小调控为0的时候，就启动一个持续计时器，当计时器超时的时候，发送一个一字节数据的零窗口探测报文段，如果接收方回复仍然是0，则再次启动计时器</li></ul></li></ul><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><ul><li>某一时间，网络中的某一资源需求超过了该资源的所能提供的可用部分，网络性能被破坏，这便是拥塞</li><li>四种拥塞控制办法：慢开始，拥塞避免，快重传，快恢复</li><li>几个前提<ul><li>数据单方向传输</li><li>接收方缓存空间足够</li></ul></li></ul><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><ul><li><p><strong>发送方维护一个拥塞窗口cwnd，其值取决于网络的拥塞程度，并且动态变化</strong></p><ul><li>维护原则：只要网络没有拥塞，拥塞窗口就变大一些，一旦出现拥塞，拥塞窗口就缩小</li><li>判断网络拥塞出现机制：没有按时收到应当到达的确认报文</li></ul></li><li><p>发送方将拥塞窗口作为<strong>发送窗口swnd，即swnd&#x3D;cwnd</strong></p></li><li><p>维护一个<strong>慢开始门限ssthresh变量</strong></p><ul><li>当cwnd &lt; ssthresh时，使用慢开始算法</li><li>当cwnd &gt; ssthresh，停止慢开始算法而是使用拥塞避免算法</li><li>当cwnd &#x3D; ssthresh，两种算法都可以使用</li></ul><blockquote><p>假设cwnd初始为1，ssthresh门限为16，因为cwnd为1，只能发送一个报文段</p><p>于是发送报文段0，接收到确认报文段0</p><p>cwnd慢启动，值加1，能发送两个报文段</p><p>于是发送报文段1，2，接收到确认报文段1，2</p><p>cwnd慢启动，值加2，能发送4个报文段  （<strong>每收到一个报文段，值加一</strong>）</p><p>于是发送报文段3，4，5，6，接收到确认报文段</p><p>cwnd慢启动，值加4，能发送8个报文段</p><p>于是发送报文段7~14，接收到确认报文段</p><p>cwnd慢启动，值加8，能发送16个报文段，此时等于ssthresh</p><p>改用拥塞调控算法（<strong>每传输一次，只能线性加一</strong>）</p><p>发送报文段15~30，接收到确认报文段</p><p>cwnd拥塞调度，值加1，能发送17个报文段</p><p>…………….</p><p>直到重传计时器超时，出现拥塞，执行以下步骤</p><ul><li><strong>将ssthresh值更新为拥塞时候cwnd的一半</strong></li><li><strong>将cwnd值减少为1，并重新开始执行慢开始算法</strong></li></ul></blockquote></li></ul><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><ul><li><p>快重传：使发送发尽快重传而不是等待重传计时器超时再重传</p><ul><li>要求接受方不是自己要发送数据的时候捎带确认，而是<strong>立刻确认</strong></li><li>即使收到了<strong>失序的报文段</strong>也要立即发出对已收到的报文段的重复确认</li><li>发送发一旦受到了3个连续的重复确认就要立刻将相应报文段重传，而不是等计时器超时</li></ul><blockquote><p>重复确认，当收到失序的报文段的时候（例如中间报文段丢失），发送应该受到的报文段的重复确认报文段</p></blockquote><ul><li>提高了网络吞吐量</li></ul></li><li><p>快恢复</p><ul><li>发送方一旦受到<strong>3个重复的确认</strong>，于是知道有数据报文段丢失，于是不启动慢开始算法，而是执行<strong>快恢复算法</strong></li><li><strong>发送方将慢开始们限ssthresh值和拥塞窗口cwnd调整为当前窗口一半；开始执行拥塞避免算法</strong></li><li>不同的设备有不同的实现方式</li></ul></li></ul><h2 id="TCP超时重传时间选择"><a href="#TCP超时重传时间选择" class="headerlink" title="TCP超时重传时间选择"></a>TCP超时重传时间选择</h2><ul><li><p>如果重传时间小于一次传播的时间，会造成不必要的重传</p></li><li><p>如果重传时间远大于<strong>一次往返时间RTT</strong>的值，则会使网络的空闲时间增大，降低了传输效率</p></li><li><p>因此<strong>超时重传时间RTO</strong>应该略大于一次往返的时间</p></li><li><p>不能使用某一次测量的带的RTT样本来计算<strong>超时重传时间RTO</strong></p></li><li><p>利用每次测量的RTT样本，计算加权平均往返时间RTTs</p><blockquote><p>newRTT &#x3D; （1-a）旧RTT+a*新RTT样本</p></blockquote></li></ul><h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ul><li><strong>以基于字节为单位的滑动窗口来实现可靠传输</strong></li><li>发送窗口和接收窗口不总是一样大<ul><li>发送窗口受拥塞控制影响</li></ul></li><li>TCP不处理不按序到达的报文段，而是缓存起来等都集齐后同一交给上层处理</li><li>接收方回答报文必须有<strong>累积确认和捎带确认机制</strong><ul><li>接收方不应该过分推迟发送确认</li></ul></li><li>TCP是全双工通信</li></ul><h2 id="TCP连接的确立"><a href="#TCP连接的确立" class="headerlink" title="TCP连接的确立"></a>TCP连接的确立</h2><ul><li><strong>三次报文握手建立TCP连接</strong></li><li><strong>四次挥手释放TCP连接</strong></li></ul><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><ul><li><p>TCP用户向服务器发起建立连接过程</p></li><li><p>SYN：同步位，表明是否是一个连接请求报文</p></li><li><p>seq：表明TCP客户进程所选择的初始序号</p></li><li><p>ack：表示发送发期望从接收方接收到起始报文序号</p></li><li><p>具体过程</p><ul><li><p>第一次握手：客户机向服务器申请建立连接：报文内容STN&#x3D;1，seq&#x3D;x</p></li><li><p>第二次握手：当服务器同意此报文时，返回一个确认报文SYN&#x3D;1，ACK&#x3D;1，seq&#x3D;y，ack&#x3D;x+1</p></li><li><p>第三次握手：受到服务器连接确认报文后，再发送<strong>一个普通的确认报文段</strong>，ACK&#x3D;1，seq&#x3D;x+1，ack&#x3D;y+1</p><blockquote><p>SYN报文段即使不携带数据也要消耗一个序号，普通的TCP数据包如果不携带数据则不消耗序号</p></blockquote></li><li><p>两次握手的不可行性：</p><ul><li>当客户端发送的请求报文超时重传了，客户端将此报文视为无效，但服务器不知道，会回应此请求报文，客户端对服务器的报文不予理会，但是服务器会以为进入了连接</li></ul></li></ul></li></ul><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><ul><li><p>FIN：是否是连接释放报文</p></li><li><p>具体过程</p><ul><li><p>第一次挥手： 客户主动发起断开连接（同时对之前的报文进行确认），连接释放报文为：FIN&#x3D;1，ACK&#x3D;1，seq&#x3D;u，ack&#x3D;v</p></li><li><p>第二次挥手：服务器受到后会发送<strong>一个普通的TCP确认报文段</strong>：ACK&#x3D;1，seq&#x3D;v，ack&#x3D;u+1</p><blockquote><p>此时从客户进程到服务器进程的TCP连接已经被释放了</p><p>客户主动发起的连接释放称为主动释放连接，相应服务器进程就叫被动关闭连接</p></blockquote></li><li><p>第三次挥手：服务器发送完数据后被动关闭连接，发送TCP连接释放报文：FIN&#x3D;1，ACK&#x3D;1，seq&#x3D;w，ack&#x3D;u+1</p></li><li><p>第四次挥手：客户进程收到服务器连接释放请求后发送一个普通的TCP确认报文：ACK&#x3D;1，seq&#x3D;u+1，ack&#x3D;w+1</p></li></ul></li></ul><blockquote><p>FIN报文段不携带数据也要消耗报文段</p></blockquote><ul><li>MSL：最长报文段寿命，<strong>第四次挥手后还要等待两个MSL才能彻底关闭进程</strong></li></ul><h2 id="TCP报文段首部格式"><a href="#TCP报文段首部格式" class="headerlink" title="TCP报文段首部格式"></a>TCP报文段首部格式</h2><ul><li><p>报文段分为首部和数据载荷</p></li><li><p>首部分为固定首部（20字节）和扩展首部</p></li><li><p>固定首部组成，5行，每行4个字节32个比特</p><ul><li><p>第一行</p><ul><li>【0~15】，源端口，用于标识发送该报文的应用进程</li><li>【16~31】，目的端口，用于标识接收该报文的应用进程</li></ul></li><li><p>第二行</p><ul><li>【0~31】，序号，用于指出数据载荷部分开始序号，序号最大值为2^32-1,扩展到最大值后，下一个序号为0</li></ul></li><li><p>第三行</p><ul><li>【0~31】，确认号，期望收到对方下一个TCP报文段的数据载荷部分第一个字节的序号，标志位ACK取值为1时候才有效</li></ul></li><li><p>第四行</p><ul><li><p>【0~3】，数据偏移，以4字节为单位，用于指出TCP报文段数据载荷部分距离报文段起始处有多远，<strong>也就是首部长度</strong></p></li><li><p>【4~9】，保留部分，置0</p></li><li><p>【10~15】，6个标志位</p><ul><li>URG：紧急标志位URG，标志紧急指针是否有效</li><li>ACK</li><li>PSH</li><li>RST：用于复位TCP连接，比特为1时候表明TCP连接出现了异常，必须释放连接再建立连接，也可用于拒绝连接</li><li>SYN：在TCP连接建立时用来同步序号</li><li>FIN：用于释放TCP连接</li></ul></li><li><p>【16~31】，窗口，指出本报文段的一方的接收窗口，也就是以接受方的能力来控制发送方的能力，也就是流量控制</p><blockquote><p>发送窗口还受拥塞窗口影响，从接收窗口和拥塞窗口之间取小者</p></blockquote></li></ul></li><li><p>第五行</p><ul><li><p>【0~15】，校验和，检查包括TCP报文首部和数据载荷部分</p></li><li><p>【16~31】，紧急指针，指明紧急数据长度</p><blockquote><p>紧急数据：发送方有紧急数据的时候，可以将紧急数据插队发送到缓存最前面</p></blockquote></li></ul></li><li><p>扩展首部：一些其它功能，并确保首部为4字节整数倍</p></li></ul></li></ul><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><ul><li>解决通过应用进程交互来实现网络应用的问题</li></ul><h2 id="客户服务器方式和对等方式（P2P）"><a href="#客户服务器方式和对等方式（P2P）" class="headerlink" title="客户服务器方式和对等方式（P2P）"></a>客户服务器方式和对等方式（P2P）</h2><ul><li>网络应用程序运行在处于网络边缘的不同端系统上，通过彼此通信来协作任务</li><li>网络应用在各种端系统上的组织方式和它们之间的关系</li></ul><h3 id="客户服务器方式"><a href="#客户服务器方式" class="headerlink" title="客户服务器方式"></a>客户服务器方式</h3><ul><li><p>进程之间是服务和被服务的关系</p></li><li><p>服务器总是处于运行状态并等待客户请求</p></li><li><p>服务器具有固定的端口号</p></li><li><p>运行服务器主机具有固定的IP地址</p></li><li><p>最成熟的方式</p><ul><li>例如万维网www，电子邮件，文件传输FTP都是这个</li></ul></li></ul><h3 id="P2P对等方式"><a href="#P2P对等方式" class="headerlink" title="P2P对等方式"></a>P2P对等方式</h3><ul><li><p>没有固定的服务请求和服务提供者</p></li><li><p>对等方之间直接通信</p></li><li><p>应用举例：P2P文件共享，即时通信，分布式存储等</p></li><li><p>系统性能不会因为对等方的增加而降低性能</p></li></ul><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><ul><li>给网络中的各个主机分配相应的IP</li><li>主机启动的时候向DHCP服务器请求网络配置</li><li>工作过程<ul><li>客户广播DHCP发现报文（<strong>DHCP DISCOVER</strong>），源IP地址为0.0.0.0，封装有事务ID和DHCP客户端MAC地址</li><li>DHCP收到后广播回应报文（<strong>DHCP OFFER</strong>），配置有IP地址，子网掩码，地址租期，默认网关，DNS服务器等</li><li>客户选择其中一个DHCP服务器，然后广播请求请求报文，源地址仍为0.0.0.0</li><li>被选中DHCP给主机发送确认广播报文（同时检查此IP有没有被占用），客户开始使用IP地址</li><li>然后是租用期</li></ul></li></ul><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><ul><li><p>层次树状结构</p></li><li><p>…次级域名.二级域名。顶级域名</p></li><li><p>每一级域名都由英文和字母组成，不超过63个字符，不区分大小写字母</p></li><li><p>完整域名不超过255个字符</p></li><li><p>域名解析潮汛</p><ul><li>递归查询：一层一层往上反应最后返回给主机，开销较大</li><li>迭代查询：主机向所有级别服务器都请求一次然后获得地址</li><li>一般采用本地服务递归，其它迭代</li></ul></li></ul><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><ul><li>具有一台FTP服务器</li><li>应用：<ul><li>用户登录后可以访问FTP上所有文件并下载</li></ul></li></ul><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><ul><li>组成：邮件客户端+邮件服务器+邮件传输协议</li><li>SMTP协议<ul><li>使用TCP，端口25</li><li>传呼过程三个阶段，建立连接，报文传输，关闭</li><li>命令响应交互模式LASCII文本，状态代码和语句</li></ul></li><li>MIME多媒体扩展协议</li><li>邮件读取协议POP3，IMAP</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/17/Mysql%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/12/17/Mysql%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql学习（二）"><a href="#Mysql学习（二）" class="headerlink" title="Mysql学习（二）"></a>Mysql学习（二）</h1><h2 id="Mysql单表查询"><a href="#Mysql单表查询" class="headerlink" title="Mysql单表查询"></a>Mysql单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>字段列表<br><span class="hljs-keyword">from</span><br>表名列表<span class="hljs-comment">-- 基本查询</span><br><span class="hljs-keyword">where</span><br>条件列表<span class="hljs-comment">-- 条件查询</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>分组字段列表 <br><span class="hljs-keyword">having</span><br>分组后条件列表<span class="hljs-comment">-- 分组查询</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>排序列表字段<span class="hljs-comment">-- 拍寻查询</span><br>limit<br>分页参数<span class="hljs-comment">-- 分页查询</span><br></code></pre></td></tr></table></figure><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询多个字段</span><br><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment">-- 查询所有字段</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment">-- 设置别名（表现出来的名字）,as可省略</span><br><span class="hljs-keyword">select</span> 字段<span class="hljs-number">1</span> [<span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;别名1&#x27;</span> ] ,字段<span class="hljs-number">2</span> [<span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;别名2&#x27;</span> ] <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment">-- 去除重复记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>,字段<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件列表;<br></code></pre></td></tr></table></figure><ul><li>一些特殊运算符</li></ul><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&lt;&gt;  或 |&#x3D;</td><td>不等于</td></tr><tr><td>between … and …</td><td>在范围内</td></tr><tr><td>in(…)</td><td>在in后面列表之中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>is null</td><td>是null</td></tr><tr><td><strong>逻辑运算符</strong></td><td></td></tr><tr><td>and 或 &amp;&amp;</td><td>并且，同时成立</td></tr><tr><td>or 或 ||</td><td>或者，二者其中之一</td></tr><tr><td>not 或 |</td><td>非，不是</td></tr></tbody></table><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ul><li>聚合函数</li><li>将表中的一列数据作为一个整体进行纵向计算</li></ul><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 聚合函数使用</span><br><span class="hljs-keyword">select</span> 聚合函数(字段列表) <span class="hljs-keyword">from</span> 表名;<br><br><span class="hljs-comment">-- 分组查询</span><br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件] <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段名 [<span class="hljs-keyword">having</span> 分组后的过滤条件];<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 错误示范：查询对应性别的数量</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><span class="hljs-comment">-- 注意：分组查询使用group by ，select返回的是分组字段+聚合函数</span><br><span class="hljs-comment">-- 正确用法</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender;<br><br><span class="hljs-comment">-- 示例二：找到年龄小于等于20的用户并根据性别进行分组，获取人数大于20的组的人数</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件列表][<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组字段] <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 字段<span class="hljs-number">1</span> 排序方式<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span> 排序方式<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><blockquote><p>升序：asc （默认值）</p><p>降序： desc</p></blockquote><ul><li><p>注：多字段排序时，当第一个字段相同的时候，才会根据第二个字段进行排序，<strong>也就是先排字段一，在不影响字段一排序的基础上再   进行后续排序</strong>，是一种逻辑处理</p></li><li><p>示例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 找到年龄小于等于20的用户并根据性别进行分组，获取数量并进行降序排序</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h3 id="分页排序"><a href="#分页排序" class="headerlink" title="分页排序"></a>分页排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 limit 起始索引,查询记录数; <br></code></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 起始索引0，5条记录</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;<br><br><span class="hljs-comment">-- 找到年龄小于等于20的用户并根据性别进行分组，获取数量最多的那一组</span><br><span class="hljs-keyword">select</span> gender,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">20</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span> limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/12/17/Mysql%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/12/17/Mysql%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql学习（一）"><a href="#Mysql学习（一）" class="headerlink" title="Mysql学习（一）"></a>Mysql学习（一）</h1><h2 id="表（table）结构操作"><a href="#表（table）结构操作" class="headerlink" title="表（table）结构操作"></a>表（table）结构操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>字段<span class="hljs-number">1</span> 字段类型 [约束] [comment <span class="hljs-string">&#x27;字段1注释&#x27;</span>],<span class="hljs-comment">-- []代表可写可不写</span><br>    .......<br>    字段n 字段类型 [约束] [comment <span class="hljs-string">&#x27;字段n注释&#x27;</span>]<br>)[comment <span class="hljs-string">&#x27;字段1注释&#x27;</span>];<br></code></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;id 唯一标识&#x27;</span>,<br>    username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    age <span class="hljs-type">int</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) comment <span class="hljs-string">&#x27;性别&#x27;</span><br>)comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>约束：保证数据库之中数据的正确性，有效性，完整性</li></ul><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段不能为空</td><td>not null</td></tr><tr><td>唯一约束</td><td>保证字段的所有数据都是唯一，不重复的</td><td>unique</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>primary key(auto_increment自增)</td></tr><tr><td>默认约束</td><td>未指定则为默认值</td><td>default</td></tr><tr><td>外键约束</td><td>让两张表建立连接，保证数据的一致性和完整性</td><td>foreign key</td></tr></tbody></table><ul><li>约束使用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 可以连续添加多个约束</span><br>use sqlstudy;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment comment <span class="hljs-string">&#x27;id 唯一标识&#x27;</span>,<br>    username <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) comment <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>    age <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;性别&#x27;</span><br>)comment <span class="hljs-string">&#x27;用户表&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table><thead><tr><th>数值类型</th><th>大小（byte）</th><th>无符号范围（unsigned）</th><th>描述</th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>（0，255）</td><td>小整数值</td></tr><tr><td>smallint</td><td>2</td><td>（0，65535）</td><td>大整数值</td></tr><tr><td>mediumint</td><td>3</td><td>（0，16777215）</td><td>大整数值</td></tr><tr><td>int</td><td>4</td><td>（0，4294967295）</td><td>大整数值</td></tr><tr><td>bigint</td><td>8</td><td>（0，2^64-1）</td><td>极大整数值</td></tr><tr><td>float</td><td>4</td><td>略</td><td>单精度浮点数</td></tr><tr><td>double</td><td>8</td><td>略</td><td>双精度浮点数</td></tr><tr><td>decimal</td><td></td><td></td><td>以字符串形式存储，精度更高</td></tr></tbody></table><ul><li>注：float(5,2)和double(5,2)表示5个数字长度，2为小数为个数</li><li><strong>尽可能选择占用磁盘小的满足需求的数值类型</strong></li><li>在数值声明后面加<strong>unsigned</strong>表示无符号数</li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table><thead><tr><th>字符串类型</th><th>大小(bytes)</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>0-255</td><td>定长字符串，char(10)表示最多只能存10个字符，且必定占用十个字符空间，但性能高</td></tr><tr><td>varchar</td><td>0-65535</td><td>变长字符串，varchar(10),超出十个字符报错，不足10个字符灰暗实际长度存储</td></tr><tr><td>tinyblob</td><td>0-255</td><td>不能超过255个字符的二进制数据</td></tr><tr><td>tinytext</td><td>0-255</td><td>短文本字符串</td></tr><tr><td>blob</td><td>0-65535</td><td>二进制形式长文本数据</td></tr><tr><td>text</td><td>0-65535</td><td>长文本数据</td></tr><tr><td>mediumblob</td><td>0-16777215</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>mediumtext</td><td>0-16777215</td><td>中等文本数据</td></tr><tr><td>longblob</td><td>0-4294967295</td><td>二进制形式的极大长度文本数据</td></tr><tr><td>longtext</td><td>0-4294967295</td><td>极大文本数据</td></tr></tbody></table><h4 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h4><table><thead><tr><th>类型</th><th>大小（byte）</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或者持续时间</td></tr><tr><td>year</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:00 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h3 id="表查询"><a href="#表查询" class="headerlink" title="表查询"></a>表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询当前数据库下所有表</span><br><span class="hljs-keyword">show</span> tables;<br><span class="hljs-comment">-- 查看指定表结构</span><br><span class="hljs-keyword">desc</span> 表名;<br><span class="hljs-comment">-- 查询建表语句,图形化操作则是go to DDL</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名;<br></code></pre></td></tr></table></figure><h3 id="表修改"><a href="#表修改" class="headerlink" title="表修改"></a>表修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在表中添加字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 字段名 类型（长度） [comment 注释] [约束]；<br><span class="hljs-comment">-- 修改字段类型</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 modify 字段名 新数据类型（长度）;<br><span class="hljs-comment">-- 修改字段名和字段类型</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 旧字段名 新字段名 新数据类型（长度） [comment 注释] [约束];<br><span class="hljs-comment">-- 删除字段</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> 字段名;<br><span class="hljs-comment">-- 修改表名</span><br>rename <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">to</span> 新表名;<br><span class="hljs-comment">-- 删除表</span><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [if <span class="hljs-keyword">exists</span>] 表名;<br></code></pre></td></tr></table></figure><h2 id="添加数据（insert）"><a href="#添加数据（insert）" class="headerlink" title="添加数据（insert）"></a>添加数据（insert）</h2><ul><li>insert 语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 指定字段添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>)；<br><span class="hljs-comment">-- 全部字段添加数据</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2.</span>...);<br><span class="hljs-comment">-- 批量添加数据（指定字段）</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名(字段名<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>);<br><span class="hljs-comment">-- 批量添加数据（所有字段）</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>，值<span class="hljs-number">2.</span>..),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2.</span>..);<br></code></pre></td></tr></table></figure><h2 id="修改数据（update）"><a href="#修改数据（update）" class="headerlink" title="修改数据（update）"></a>修改数据（update）</h2><ul><li>update语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改数据</span><br><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段<span class="hljs-number">1</span><span class="hljs-operator">=</span>值<span class="hljs-number">1</span>，字段名<span class="hljs-number">2</span><span class="hljs-operator">=</span>值<span class="hljs-number">2</span>，...[<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><ul><li><strong>没有修改条件会修改整张表数据</strong></li></ul><h2 id="删除数据（delete）"><a href="#删除数据（delete）" class="headerlink" title="删除数据（delete）"></a>删除数据（delete）</h2><ul><li>delete语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 [<span class="hljs-keyword">where</span> 条件];<br></code></pre></td></tr></table></figure><ul><li><strong>没有修改条件会删除整张表数据</strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot的web学习（二）</title>
    <link href="/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Springboot的Web学习与应用</p><span id="more"></span><h1 id="SpringBoot的web学习"><a href="#SpringBoot的web学习" class="headerlink" title="SpringBoot的web学习"></a>SpringBoot的web学习</h1><h2 id="请求响应原理"><a href="#请求响应原理" class="headerlink" title="请求响应原理"></a>请求响应原理</h2><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-1%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E5%8E%9F%E7%90%86.png" alt="image-20231213141803762"></p><ul><li>HttpServletRequest：DispathcherServlet生成的请求体</li><li>HttpServletReponse：DispathcherServlet生成的响应体</li><li>CS架构：客户端&#x2F;服务器架构（开发维护麻烦，体验良好）</li><li>BS架构：浏览器&#x2F;服务器的架构。客户只需要浏览器，应用程序的逻辑和数据存储抖子啊服务端</li></ul><h2 id="测试工具：Postman（Apipost-Apifox）"><a href="#测试工具：Postman（Apipost-Apifox）" class="headerlink" title="测试工具：Postman（Apipost,Apifox）"></a>测试工具：Postman（Apipost,Apifox）</h2><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><ul><li><strong>Parameter：（GET）附带在URL后面</strong></li><li>获取方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//原始方法，较为繁琐以及类型转换</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">//验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//建议方法，会自动进行类型转换</span><br><span class="hljs-meta">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simpleParam</span><span class="hljs-params">(String name,String password)</span>&#123;<span class="hljs-comment">//使用@RequestParam(name=&quot;name&quot;)+参数 可以进行映射而不必参数名一致，但此时参数必须传递，也可以设置为不必须传递</span><br>    <span class="hljs-comment">//验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>Post</strong>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-2%E7%AE%80%E5%8D%95%E5%8F%82%E6%95%B0Post.png" alt="image-20231213150925747"></p><h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><ul><li>简单实体对象：请求参数名于实体类属性名一致，定义POJO接收即可</li><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span>&#123;<br>    <span class="hljs-keyword">private</span> String city;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Address address;<span class="hljs-comment">//另外一个实体类作为属性</span><br>    <span class="hljs-comment">//.....实现方法</span><br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/simplePojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">simplePojo</span><span class="hljs-params">(User user)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>传递方式：与简单参数基本一致</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-5%E5%AE%9E%E4%BD%93%E8%AF%B7%E6%B1%82.png" alt="image-20231213172515628"></p><ul><li>address.city表示adress的属性</li></ul><h3 id="数组参数"><a href="#数组参数" class="headerlink" title="数组参数"></a>数组参数</h3><ul><li>请求参数名和数组名称相同且有多个</li><li>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E6%95%B0%E7%BB%84%E8%AF%B7%E6%B1%82.png" alt="image-20231214134154738"></p><ul><li>接收方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(String[] hobby)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-meta">@RequestMapping(&quot;/arrayParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">arrayParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><ul><li>使用@DateTimeFormat注解完成日期参数格式转换</li><li>请求方式</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E8%AF%B7%E6%B1%82.png" alt="image-20231214134957056"></p><ul><li>请求方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/dateParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">dateParam</span><span class="hljs-params">(<span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:MM:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;<br>    <span class="hljs-comment">//......验证方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Json格式"><a href="#Json格式" class="headerlink" title="Json格式"></a>Json格式</h3><ul><li>附在请求体之中，所以是Post请求</li><li>Json参数键名需要与形参对象属性名相同，可以自定义接受数据雷接收</li><li>请求方法</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-Json%E8%AF%B7%E6%B1%82.png" alt="image-20231214144132444"></p><ul><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jsonParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">jsonParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><ul><li>@PathVarible获取路径参数</li><li>请求方法</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96.png" alt="image-20231214145347401"></p><ul><li>接收方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">path</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id,<span class="hljs-meta">@PathVariable</span> String name)</span>&#123;<br>        System.out.println(id+<span class="hljs-string">&quot; &quot;</span>+name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><ul><li>Controller：接收请求，响应数据</li><li>Servicce：逻辑处理</li><li>Dao：数据访问，包括数据的增删改查</li></ul><h3 id="分层解耦-1"><a href="#分层解耦-1" class="headerlink" title="分层解耦"></a>分层解耦</h3><ul><li><p>内聚：软件之中各个功能呢模块的数据关系</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖，关联的程度</p></li><li><p>高内聚，低耦合</p></li></ul><h3 id="IOC与DI"><a href="#IOC与DI" class="headerlink" title="IOC与DI"></a>IOC与DI</h3><ul><li><p>控制反转（IOC）：对象的控制权由程序自身转移到外部，这种思想称为控制反转</p></li><li><p>自动注入（DI）：容器为应用程序提供运行时所依赖的资源，称之为依赖注入</p></li><li><p>Bean对象：IOC容器中创建，管理的对象，称之为Bean</p></li></ul><h3 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h3><ul><li>Bean对象的声明：将某个对象交给IOC容器管理</li></ul><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类的时候使用这个注解</td></tr><tr><td>@Controller</td><td>@Component衍生注解</td><td>标注在控制器上</td></tr><tr><td>@Service</td><td>@Component衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Respository</td><td>@Component衍生注解</td><td>标注在数据访问类上</td></tr></tbody></table><ul><li>Bean组件扫描<ul><li>Bean声明注解生效需要被组件扫描注解@ComponetScan扫面</li><li>@ComponentScan虽然无显示配置但实际上包含在启动类注解@SpringBootApplication之中，默认扫描范围在启动类所在包以及子包</li></ul></li></ul><h3 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h3><ul><li><p>Bean注入</p><ul><li><p>@Autowired注解，默认时按照类型进行，如果存在多个类型相同的Bean，将会报出错误</p></li><li><p>可以通过以下几个注解解决</p><blockquote><p>@Primary：设置bean的优先级</p><p>@Qualifier：配合@Autowired注解指定注入特定Bean</p><p>@Resource：相当于@Autowired与@Qualifier合并，直接指定并注入</p></blockquote></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmpServiceimpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmpService</span>&#123;<br>    <span class="hljs-comment">//注入时优先使用此bean</span><br>&#125;<br><br><span class="hljs-comment">//注入</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;EmpServiceimpl&quot;)</span><br><span class="hljs-comment">//或者</span><br><span class="hljs-meta">@Resource(name=&quot;EmpServiceimpl&quot;)</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot的web学习（一）</title>
    <link href="/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/12/12/Springweb%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Springboot的Web学习与应用</p><span id="more"></span><h1 id="SpringBoot的web学习"><a href="#SpringBoot的web学习" class="headerlink" title="SpringBoot的web学习"></a>SpringBoot的web学习</h1><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><ul><li><p><strong>超文本传输协议</strong>，规定了浏览器和服务器之间数据传输的规则</p></li><li><p>特点：</p><ul><li>基于TCP协议，稳定安全</li><li>基于请求-响应模型：一次请求对应一次响应</li><li>HTTP协议是无状态协议，对于事务处理没有记忆能力，每次请求都是独立的<ul><li>优点：速度快</li><li>缺点：多次请求不能共享数据</li></ul></li></ul></li></ul><h3 id="HTTP请求数据格式"><a href="#HTTP请求数据格式" class="headerlink" title="HTTP请求数据格式"></a>HTTP请求数据格式</h3><h4 id="POST请求和GET请求形式"><a href="#POST请求和GET请求形式" class="headerlink" title="POST请求和GET请求形式"></a>POST请求和GET请求形式</h4><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javaweb-1http%E8%AF%B7%E6%B1%82.png" alt="image-20231212150159442"></p><ul><li>请求头</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-2http%E8%AF%B7%E6%B1%82%E5%A4%B4.png" alt="image-20231212150419411"></p><ul><li><p>请求体：POST请求，存放请求参数</p></li><li><p>GET请求与POST请求区别</p><ul><li><p>GET请求无请求体，大小有限制，<strong>通过URL参数传递的，这些参数属于查询字符串（Query String）</strong></p><blockquote><p>查询字符串是位于URL末尾的一组键值对，键值对之间用”&amp;”符号连接，键和值之间使用”&#x3D;”符号连接</p><p>GET请求的查询字符串通常用于向服务器传递简单的数据</p></blockquote></li><li><p>POST请求有大小限制</p></li></ul></li></ul><h3 id="HTTP响应数据格式"><a href="#HTTP响应数据格式" class="headerlink" title="HTTP响应数据格式"></a>HTTP响应数据格式</h3><ul><li>图例</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-3http%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F.png" alt="image-20231212160809457"></p><ul><li>响应码</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaWeb-4http%E5%93%8D%E5%BA%94%E7%A0%81.png" alt="image-20231212161134707"></p><ul><li>常见状态码</li></ul><table><thead><tr><th>状态码</th><th>英文描述</th><th>解释</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求处理<strong>成功</strong></td></tr><tr><td>302</td><td>Found</td><td>只是所请求的<strong>资源已移动</strong>到由Location响应头给定的URL,浏览器会自动重新访问</td></tr><tr><td>304</td><td>Not Modified</td><td>隐式重定向。请求<strong>资源上次获取后并未更改</strong>，可以自己在本地缓存访问</td></tr><tr><td>400</td><td>Bad Request</td><td>请求有<strong>语法错误</strong>，服务器并不理解</td></tr><tr><td>403</td><td>Forbidden</td><td>收到请求，但是<strong>拒绝提供服务</strong>（无权限等）</td></tr><tr><td>404</td><td>Not Found</td><td>请求<strong>资源不存在</strong></td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求<strong>方法有误</strong>，例如POST请求用了GET</td></tr><tr><td>428</td><td>Precondition Required</td><td>服务器要求此请求<strong>有条件</strong>，比如特定的请求头</td></tr><tr><td>429</td><td>Too Many Requests</td><td>太多请求被<strong>限速</strong>了，配合Retry-After(多长时间后可以请求)请求头使用</td></tr><tr><td>431</td><td>Request Header Fields Too Large</td><td><strong>请求头太大</strong>，服务器不愿意处理这个请求</td></tr><tr><td>500</td><td>Internal Serval Error</td><td>服务器<strong>发生不可预期的错误</strong></td></tr><tr><td>503</td><td>Service Unavailable</td><td><strong>服务器未能准备</strong>好处理请求</td></tr></tbody></table><h3 id="协议解析"><a href="#协议解析" class="headerlink" title="协议解析"></a>协议解析</h3><ul><li>web服务器用于处理和返回http格式的请求和数据，对HTTP协议进行封装</li><li>常见的web服务器： <strong>Tomcat</strong></li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ul><li>一个Apache旗下的开源免费的Web服务器，支持Servlet&#x2F;JSP少量javaEE规范</li><li>JavaEE：Java企业版，指Java企业级开发的计数规范的总和，包括JDBC，JNDL等等</li><li>Tomcat也被称为Web容器，Servlet容器，Servclet依赖于Tomcat运行</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>SpringBoot内嵌了Tomcat,也可自行下载</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue学习</title>
    <link href="/2023/12/11/Vue%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/11/Vue%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Vuet的学习与应用</p><span id="more"></span><h1 id="Vue学习"><a href="#Vue学习" class="headerlink" title="Vue学习"></a>Vue学习</h1><h2 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h2><ul><li>是一套前端开那关键，免除原生JavaScript中的DOM操作</li><li>基于MVVM的思想，实现数据的双向绑定</li></ul><h2 id="Vue的快速使用"><a href="#Vue的快速使用" class="headerlink" title="Vue的快速使用"></a>Vue的快速使用</h2><ul><li>定义数据模型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">e1</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">message</span>:<span class="hljs-string">&quot;Hello Vue!&quot;</span><br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>编写试图</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;app&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span>//输入框</span><br><span class="language-xml">        &#123;&#123;message&#125;&#125;//一个插值表达式，文本会随着输入框内容变化而变化</span><br><span class="language-xml">        /*表达式内容</span><br><span class="language-xml">        变量</span><br><span class="language-xml">        三元运算符</span><br><span class="language-xml">        函数调用</span><br><span class="language-xml">        算术运算</span><br><span class="language-xml">        */</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaVue-1%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="image-20231211213929358"></p><ul><li><p>常用指令</p><ul><li><p>带有**v-**前缀的特殊指令</p></li><li><p><strong>v-bind与v-model</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">e1</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://www.XXX.com&quot;</span><br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br><span class="hljs-comment">//v-bind为标签绑定属性值</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>XXX网<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>或者<br>&lt;a :href=<span class="hljs-string">&quot;url&quot;</span>&gt;<span class="hljs-variable constant_">XXX</span>网&lt;/a&gt;<br><span class="hljs-comment">//v-model在表单元素上创建双向数据绑定</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>v-if和v-show</strong></p></li></ul><table><thead><tr><th>v-if</th><th>条件性渲染某元素，判断为true渲染，否则不渲染</th></tr></thead><tbody><tr><td><strong>v-else-if</strong></td><td><strong>同上</strong></td></tr><tr><td><strong>v-else</strong></td><td><strong>同上</strong></td></tr><tr><td><strong>v-show</strong></td><td><strong>根据条件展示某元素，区别子啊与切换的是display属性的值</strong></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//年龄&#123;&#123;age&#125;&#125;,经判定为</span><br>&lt;span v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;age&lt;=35&quot;</span>&gt;年轻人&lt;/span&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;age&gt;35&amp;&amp;age&lt;60&quot;</span>&gt;</span>中年人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>老年人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">//v-show</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;age&lt;=35&quot;</span>&gt;</span>年轻人<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaVue-2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="image-20231211220648485"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2023/12/11/JavaScript/"/>
    <url>/2023/12/11/JavaScript/</url>
    
    <content type="html"><![CDATA[<p>JavaScript的学习与应用</p><span id="more"></span><h1 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h1><h2 id="JacaScript是什么"><a href="#JacaScript是什么" class="headerlink" title="JacaScript是什么"></a>JacaScript是什么</h2><ul><li><strong>是一门跨平台的，面向对象的，不需要编译而仅仅需要解析的脚本语言</strong>，用于控制网页行为来进行交互</li></ul><h2 id="JavaScript基本使用"><a href="#JavaScript基本使用" class="headerlink" title="JavaScript基本使用"></a>JavaScript基本使用</h2><ul><li><script></script>标签用于Html文档之中<blockquote><p>注：此标签不能自闭合</p></blockquote></li><li><p>内部注入：一般置于<body>元素底部，以改善显示速度</p></li><li><p>外部脚本：<Script src="js/demo.js"></script></p></li><li><p>注释：&#x2F;&#x2F;，&#x2F;**&#x2F;</p></li><li><p><strong>输出语句</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-variable language_">window</span>/<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//弹出警告框</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//写入Html在浏览器显示</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello JavaScript&quot;</span>);<span class="hljs-comment">//写入控制台</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>声明变量</strong>：var (variable)</p><ul><li><p>弱类型语言，变量可以重复输入类型或者值进行覆盖，且作用域一律为全局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">20</span>;<br>a=<span class="hljs-string">&quot;张三&quot;</span><br><span class="hljs-comment">//ES6新增了let声明局部变量，只在对应代码块生效，const声明变量不能修改</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>数据类型</strong></p><ul><li>原始类型<ul><li>number：整数，小数类型，<strong>条件判断时</strong>只有0与NaN视为为false</li><li>string: 字符串，单双引号均可，只有空字符串视为为false</li><li>Boolean：布尔类型</li><li>null：对象为空</li><li>undefined：变量未进行初始化，视为false</li></ul></li><li><strong>typeof+变量名</strong> 可以获取变量类型</li></ul></li><li><p><strong>函数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">functioname</span>(<span class="hljs-params">参数列表</span>)&#123;<br><span class="hljs-comment">//有返回值则返回，没有则不需要操作</span><br>&#125;<br>另外的形式:<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>或者<br><span class="hljs-keyword">var</span> add=<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result=<span class="hljs-title function_">add</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">//超出函数列表的参数会被视为抛弃</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Array数组</strong></p><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(元素列表)；<br><span class="hljs-keyword">var</span> 变量名=[元素列表]；<br>例子<br><span class="hljs-keyword">var</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><ul><li>调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr[索引]=值;<br><span class="hljs-comment">//例子：</span><br>arr[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;hello&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>String对象</strong></p><ul><li>定义</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;...&quot;</span>);<br><span class="hljs-keyword">var</span> 变量名=<span class="hljs-string">&quot;..&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li><p>调用</p><ul><li>属性：length</li><li>方法：</li></ul><table><thead><tr><th>charAt()；</th><th>返回指定位置的字符</th></tr></thead><tbody><tr><td><strong>indexOf()；</strong></td><td><strong>检索字符串</strong></td></tr><tr><td><strong>trim();</strong></td><td><strong>去除字符串两边空格</strong></td></tr><tr><td><strong>substring();</strong></td><td><strong>提取字符串两个指定的索引号值之间的字符</strong></td></tr></tbody></table></li></ul></li><li><p><strong>自定义对象</strong></p><ul><li><p>定义格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 对象名 =&#123;<br><br>    属性名<span class="hljs-number">1</span>：属性值，<br><br>    属性名<span class="hljs-number">2</span>：属性值，<br><br>    函数名称: <span class="hljs-keyword">function</span>(<span class="hljs-params">形参列表</span>)&#123;&#125;<br>&#125;<br><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">var</span> user=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;male&quot;</span>,<br>    eat=<span class="hljs-string">&quot;function&quot;</span>()&#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用膳&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">user.<span class="hljs-title function_">eat</span>();<span class="hljs-comment">//对象.函数名();</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user.<span class="hljs-property">name</span>);<span class="hljs-comment">//对象.属性名</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Json对象</strong></p><ul><li><p>通过JavaScript对象标记法书写的文本，<strong>本质是一个带键值对的字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Tom&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>    <span class="hljs-string">&quot;gender&quot;</span>:<span class="hljs-string">&quot;male&quot;</span><br>&#125;<br><span class="hljs-comment">//key必须用&quot;&quot;标记</span><br></code></pre></td></tr></table></figure></li><li><p>定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 变量名=<span class="hljs-string">&#x27;&#123;&quot;key1&quot;:value1,&quot;key2&quot;:value2&#125;&#x27;</span>;<br><span class="hljs-comment">//示例</span><br><span class="hljs-keyword">var</span> userstr=<span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;Herry&quot;,&quot;age&quot;:18,&quot;addr&quot;:[&quot;北京&quot;，&quot;上海&quot;]&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>Json字符串转换为JS,JSON字符串对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jsObject =<span class="hljs-title class_">Json</span>.<span class="hljs-title function_">parse</span>(userstr);<br><span class="hljs-keyword">var</span> jsonStr=<span class="hljs-title class_">Json</span>.<span class="hljs-title function_">stringify</span>(jsObject);<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>BOM对象</strong></p><ul><li><p>JavaScript将浏览器的各个组成部分封装成对象</p></li><li><p>组成</p><ul><li>Window：浏览器窗口对象</li><li>Navigator:：浏览器对象</li><li>Screen：屏幕对象</li><li>History：历史记录对象</li><li>Location： 地址栏对象</li></ul></li><li><p>Window</p><ul><li>属性（window.属性名直接调用，window.可以省略）<ul><li>history：对History的只读引用</li><li>Location：用于窗口或者框架的Location对象</li><li>navigator：对Nagvitor对象的只读引用</li></ul></li><li>方法<ul><li>alert()：显示带有一段消息和一个确认按钮的警告框</li><li>confirm()：显示带有一段消息以及确认按钮和取消按钮的对话框</li><li>setInterval：按照指定的周期（ms）来调用安徽念书或者计算表达式</li><li>setTimeout：在指定的毫秒后调用函数或计算表达式</li></ul></li></ul></li><li><p>Location</p><ul><li><p>window对象调用</p></li><li><p>一般调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.属性；<br></code></pre></td></tr></table></figure></li><li><p>属性：</p><ul><li>href：设置返回完整的URL</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">location.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;https://www.XXX.cn&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>DOM</strong></p><ul><li><p><strong>文档对象模型</strong></p><ul><li>将标记语言的各个组成部分封装为对应的对象<ul><li>Docurment：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaScript-1DOM.png" alt="image-20231211211737750"></p><ul><li>XMLDOM-XML 文档标准模型</li><li>HTMLDOM-HTML 文档的标准模型<ul><li>Image:<img></li><li>Button:<input type='button'></li></ul></li></ul></li><li><p>Dcument对象中提供了以下获取Element元素</p><table><thead><tr><th>getElementById(‘h1’);</th><th>根据id属性获取，返回单个Element对象</th></tr></thead><tbody><tr><td><strong>getElementByTagname(‘div’);</strong></td><td><strong>根据标签名称获取，返回单个Element对象数组</strong></td></tr><tr><td><strong>getElementByName(‘hobby’);</strong></td><td><strong>根据name属性获取，返回单个Element对象数组</strong></td></tr><tr><td><strong>getElementByClassName(‘hobby’);</strong></td><td><strong>根据class属性获取，返回单个Element对象数组</strong></td></tr></tbody></table></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2023/12/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/12/09/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>网络编程基础知识和反射讲解</p><span id="more"></span><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络编程三要素"><a href="#网络编程三要素" class="headerlink" title="网络编程三要素"></a>网络编程三要素</h2><ul><li>IP地址：设备在网络之中的地址</li><li>端口号：应用程序在设备之中的唯一标识</li><li>协议：数据在网络之中传播的规则</li></ul><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li><p>常见的是IPv4协议</p></li><li><p>32bit，4字节长度</p></li><li><p>分类：公网地址（万维网）和私有地址（局域网地址）</p><p>私有地址： 192.168.0.0~192.168.255.255</p><p>本机地址：127.0.0.1也称localhost</p></li><li><p>InetAddress类：通过ip获取主机对象</p></li></ul><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><ul><li>由两个字节表示的整数，取值为0~65535</li><li>0~1023一般是被占用的</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ul><li><strong>反射允许对封装类的字段，方法和构造函数的信息进行编程访问</strong></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Java%E5%8F%8D%E5%B0%84-1%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9B" alt="image-20231210163819945"></p><ul><li>能够获取函数的所有信息</li></ul><h2 id="获取字节码对象的三种方式（获取Class类对象）"><a href="#获取字节码对象的三种方式（获取Class类对象）" class="headerlink" title="获取字节码对象的三种方式（获取Class类对象）"></a>获取字节码对象的三种方式（获取Class类对象）</h2><table><thead><tr><th align="left">1.Class.forName(“全类名”);</th><th>源代码阶段使用（最为常用）</th></tr></thead><tbody><tr><td align="left"><strong>2.类名.class</strong></td><td><strong>加载阶段</strong></td></tr><tr><td align="left"><strong>3.对象.getClass</strong></td><td><strong>运行阶段</strong></td></tr></tbody></table><h2 id="利用反射获取构造方法"><a href="#利用反射获取构造方法" class="headerlink" title="利用反射获取构造方法"></a>利用反射获取构造方法</h2><ul><li><p>Class类之中用于获取构造函数方法的方法</p><table><thead><tr><th>Constructor&lt;?&gt;[] getConstructors()；</th><th>返回所有公共构造方法</th></tr></thead><tbody><tr><td><strong>Constructor&lt;?&gt;[] getDeclaredConstructors();</strong></td><td><strong>返回所有构造方法对象的数组</strong></td></tr><tr><td><strong>Constructor<T> getConstructor(Class&lt;?&gt;…parameterTypes)</strong></td><td><strong>返回单个公共构造方法对象</strong></td></tr><tr><td><strong>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;..paramterTypes)</strong></td><td><strong>返回单个构造函数方法对象</strong></td></tr></tbody></table></li><li><p>Constructor类中用于创建对象的方法</p><table><thead><tr><th>T newInstance(Object… initargs);</th><th>根据指定的构造方法创建对象</th></tr></thead><tbody><tr><td><strong>setAccessible(boolean flag)</strong></td><td><strong>设置为true，表示取消访查</strong></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>Class.forName(<span class="hljs-string">&quot;com.itheima.myreflect.Student&quot;</span>);<br>Constructor[] cons1=clazz.getContructors();<br><span class="hljs-comment">//获取所有构造函数</span><br><span class="hljs-keyword">for</span>(Constructor con: cons2)&#123;<br>System.out.println(cons2);<br>&#125;<br><span class="hljs-comment">//获取空参构造</span><br>Constructor con2=clazz.getDeclaredConstructor();<br><span class="hljs-comment">//一个String参数构造,依次类推,有多个的话会抛异常</span><br>Constructor con3=clazz.getDeclaredConstructor(String.class);<br><span class="hljs-comment">//获取所有参数</span><br>Parameter[]=parameter=con3.getParameters();<br></code></pre></td></tr></table></figure><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span>Class.forName(<span class="hljs-string">&quot;org.example.student&quot;</span>);<br>Constructor con3=clazz.getDeclaredConstructor(<span class="hljs-type">int</span>.class);<br>System.out.println(con3);<br><span class="hljs-comment">//通过构造函数创建对象</span><br>student stu=(student) con3.newInstance(<span class="hljs-number">23</span>);<br>System.out.println(stu);<br></code></pre></td></tr></table></figure><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Java%E5%8F%8D%E5%B0%84-2%E7%BB%93%E6%9E%9C%2Cpng" alt="image-20231210233613971"></p><ul><li>后面的标识符号为16进制的指针</li><li>getClass().getName()+‘@’+Integer.toHexString(hashCode())</li><li>类所在的包名.类名 + @ + 哈希码值</li></ul><h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><ul><li><p>Class内获取成员变量</p><table><thead><tr><th><strong>Field[] getFields();</strong></th><th><strong>返回所有公共成员变量数组</strong></th></tr></thead><tbody><tr><td><strong>Field[] getDeclaredFields();</strong></td><td><strong>返回所有成员变量数组</strong></td></tr><tr><td><strong>Field getField(String name);</strong></td><td><strong>返回单个公共成员变量数组</strong></td></tr><tr><td><strong>Field getDeclaredField(String name);</strong></td><td><strong>返回单个成员变量数组</strong></td></tr></tbody></table></li><li><p>Field用于创建对象方法</p><blockquote><p>void set(Object obj,Object value);</p><p>Object get(Object obj);</p><p>int getmodifier();&#x2F;&#x2F;获取修饰符号</p><p>String getName();</p></blockquote></li></ul><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><ul><li><p>Class之中获取成员方法</p><table><thead><tr><th>Method[] getmethods();</th><th>获取所有公共成员方法</th></tr></thead><tbody><tr><td><strong>Method[] getDeclaredmethods();</strong></td><td><strong>获取所有成员方法</strong></td></tr><tr><td><strong>Method getmethod(Class&lt;?&gt;…parameterTypes);</strong></td><td><strong>返回单个公共成员方法</strong></td></tr><tr><td><strong>Method getDeclaredmethod(Class&lt;?&gt;…parameterTypes);</strong></td><td><strong>返回单个成员方法</strong></td></tr></tbody></table></li><li><p>Method类用于创建对象</p><blockquote><p>Object invoke(Object obj,Object…args);</p><p>参数一：用obj对象调用</p><p>参数二：调用方法传递的参数</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>反射</tag>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程</title>
    <link href="/2023/12/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/12/08/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Java多线程的一些解释与应用</p><span id="more"></span><h1 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h1><h2 id="多线程的一些概念"><a href="#多线程的一些概念" class="headerlink" title="多线程的一些概念"></a>多线程的一些概念</h2><ul><li><strong>并发和并行</strong>，二者并不排斥<ul><li>并发： <strong>单个CPU</strong>交替执行指令</li><li>并行： 多个指令在<strong>多个CPU</strong>上执行</li></ul></li><li><strong>死锁</strong><ul><li>一种错误情形，两个锁互相钳制无法释放锁导致崩溃</li></ul></li></ul><h2 id="多线程的实现"><a href="#多线程的实现" class="headerlink" title="多线程的实现"></a>多线程的实现</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><blockquote><p>重写run方法</p><p>启动start</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 2.创建MyRunnable对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.把MyRunnable对象交给Thread处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>注意：</p><ul><li>不使用run方法而是start方法是因为调用run方法只是调用执行一次，<strong>start才是开启线程</strong></li></ul></li><li><p>优缺点：</p><p><strong>优点：编程简单</strong></p><p><strong>缺点：单继承的局限性，不能继承其他类，不便于扩展。</strong></p></li></ul><h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><blockquote><p>1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</p><p>2.创建MyRunnable对象</p><p>3.把MyRunnable对象交给Thread处理 </p></blockquote><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一，常规写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 2.创建MyRunnable对象</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.把MyRunnable对象交给Thread处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(target);<br>        t.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个线程任务类MyRunnable实现Runnable接口，重写run方法</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;子线程执行输出&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//二，建议写法</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过匿名内部类来实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;匿名内部类子线程的输出&quot;</span> + i);<br><br>        &#125;<br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h3 id="实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）"><a href="#实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）" class="headerlink" title="实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）"></a>实现Callable接口，通过FutureTask接口接收返回值（JDK5新增）</h3><blockquote><p>1.得到任务对象</p><p>第一步：定义一个线程任务类MyCallable实现Callable接口，重写call方法，该方法可以返回结果</p><p>第二步：用Future吧Callable对象封装成线程任务对象</p><p>2.把线程任务对象交给Thread处理</p><p>3.调用Thread的start方法启动任务</p><p>4.线程执行完毕后，通过FutureTask的get方法获得结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<br><span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 3.创建任务对象</span><br><span class="hljs-comment">         */</span><br>        Callable&lt;String&gt; call1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 4.把Callable任务对象交给FutureTask对象</span><br><span class="hljs-comment">         * FutureTask的作用1：FutureTask实现了Runnable接口，此时就可以交给Thread了</span><br><span class="hljs-comment">         * FutureTask的作用2：可以在线程执行完毕后调用get方法得到线程执行的结果</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//Thread t = new Thread(call);  报错，Thread不能接收call对象</span><br>        FutureTask&lt;String&gt; f1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call1);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 5.交给线程处理</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f1);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 6.启动线程</span><br><span class="hljs-comment">         */</span><br>        t1.start();<br><br><br><br>        Callable&lt;String&gt; call2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>);<br>        FutureTask&lt;String&gt; f2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(call2);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(f2);<br>        t2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs1</span> <span class="hljs-operator">=</span> f1.get();   <span class="hljs-comment">//直接调用call方法，可能还没有执行完，使用get时若发现线程未执行完会先等线程执行完毕</span><br>            System.out.println(<span class="hljs-string">&quot;第一个结果为：&quot;</span> + rs1);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> f2.get();   <span class="hljs-comment">//直接调用call方法，可能还没有执行完，使用get时若发现线程未执行完会先等线程执行完毕</span><br>            System.out.println(<span class="hljs-string">&quot;第二个结果为：&quot;</span> + rs2);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.定义一个实现类，实现Callable接口，记得声明结果的数据类型</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;String&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2.重写call方法</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCallable</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum += i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;子线程执行的结果是&quot;</span> + sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后两种方式优缺点：</p><p>1.优点： 可扩展性强，实现接口同时还可继承其它类</p><p>2.缺点： 编程相对复杂，不能直接使用Thread的方法</p></blockquote><h2 id="常见成员方法"><a href="#常见成员方法" class="headerlink" title="常见成员方法"></a>常见成员方法</h2><ul><li>具体例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;一号线程&quot;</span>);<br>        t1.start();<br><span class="hljs-comment">//        t1.setName(&quot;一号线程&quot;);</span><br>        System.out.println(t1.getName());<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;二号线程&quot;</span>);<br>        t2.start();<br><span class="hljs-comment">//        t2.setName(&quot;二号线程&quot;);</span><br>        System.out.println(t2.getName());<br><br>        <span class="hljs-comment">//获取当前线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        System.out.println(m.getName());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Main线程输出&quot;</span> + i);<br>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)<br>                Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>); <span class="hljs-comment">//主线程休眠3000ms</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br>自定义线程<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>            <span class="hljs-comment">//让父类的构造器进行构造</span><br>            <span class="hljs-built_in">super</span>(name);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;输出&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>一些特殊线程：<ul><li>守护线程：会随着非守护线程的消亡而消亡</li><li>出让线程：将自身CPU执行权出让，重新和其它线程抢夺</li></ul></li></ul><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ul><li><strong>基本周期</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSethread-1.png" alt="image-20231208151125777"></p><ul><li><strong>6种状态</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSethread-3%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="JavaSE01-08线程状态之间的转换"></p><blockquote><p><strong>注意以下几点：</strong><br><strong>sleep()是睡眠，过程中不会释放锁对象，醒来后直接进入可运行状态</strong><br><strong>wait()是等待，过程中会释放锁对象，但是时间到了或者被notity时会重新获得锁对象，进入可运行状态</strong></p></blockquote><h2 id="线程的安全问题"><a href="#线程的安全问题" class="headerlink" title="线程的安全问题"></a>线程的安全问题</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><strong>多个线程同时操作一个共享资源可能会出现业务安全问题，称为线程安全问题</strong></p><ul><li><strong>源码解析</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//两个售票员卖同一批票</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    <span class="hljs-type">MyThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>    <br>    t1.setName(<span class="hljs-string">&quot;窗口一&quot;</span>);<br>    t2.setName(<span class="hljs-string">&quot;窗口二&quot;</span>);<br>    <br>    t1.start();<br>    t2.start();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> ticket=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ticket&lt;<span class="hljs-number">100</span>)&#123;<br>                ticket++;<br>                System.out.println(getName()+<span class="hljs-string">&quot;正在卖第&quot;</span>+ticket+<span class="hljs-string">&quot;张票&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>运行上述代码后会出现一些错误现象</strong>：</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javasethread-2%E9%94%99%E8%AF%AF%E7%A4%BA%E4%BE%8B.png" alt="image-20231208155324026"></p><ul><li><p><strong>解决办法</strong>： </p><ul><li><strong>同步</strong>代码块——<strong>对象锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span><br>synchronize(锁对象)&#123;<span class="hljs-comment">//锁对象要唯一</span><br><span class="hljs-comment">//临界数据操作代码</span><br>&#125;<br><span class="hljs-number">2.</span><br>synchronize关键字修饰方法<br><span class="hljs-comment">//锁对象：1静态：当前字节码文件对象，2静态：this</span><br><span class="hljs-number">3.</span><br>Stringbuffer类方法自动上锁<br></code></pre></td></tr></table></figure><ul><li><p><strong>Lock</strong>锁（JDK5之后）</p><p><strong>Lock是接口，采用实现类ReentrantLock来构建Lock锁对象</strong></p><blockquote><table><thead><tr><th>public ReentrantLock()</th><th>获得Lock锁的实现类对象</th></tr></thead><tbody><tr><td>void lock()</td><td>获得锁</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr></tbody></table></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> ticket=<span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(ticket&lt;<span class="hljs-number">100</span>)&#123;<br>                    ticket++;<br>                    System.out.println(getName()+<span class="hljs-string">&quot;正在卖第&quot;</span>+ticket+<span class="hljs-string">&quot;张票&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<span class="hljs-comment">//放进finally以保证锁的释放</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这两种同步方式有很多相似之处，它们都是加锁方式同步，而且都是阻塞式的同步，也就是说当如果一个线程获得了对象锁，进入了同步块，其他访问该同步块的线程都必须阻塞在同步块外面等待，而进行线程阻塞和唤醒的代价是比较高的（操作系统需要在用户态与内核态之间来回切换，代价很高，不过可以通过对锁优化进行改善）</p></blockquote><h3 id="锁的释放"><a href="#锁的释放" class="headerlink" title="锁的释放"></a>锁的释放</h3><blockquote><p>在以下情况下，<strong>持有锁的线程会释放锁</strong>：</p><ol><li><p>执行完同步代码块。</p></li><li><p>在执行同步代码块的过程中，遇到异常而导致线程终止。</p></li><li><p>在执行同步代码块的过程中，执行了锁所属对象的wait()方法，这个线程会释放锁，进行对象的等待池。</p></li></ol><p>除了以上情况外，只要持有锁的此案吃还没有执行完同步代码块，就不会释放锁。<strong>因此在以下情况下，线程不会释放锁</strong>：</p><ol><li><p>在执行同步代码块的过程中，执行了Thread.sleep()方法，当前线程放弃CPU，开始睡眠，在睡眠中不会释放锁。</p></li><li><p>在执行同步代码块的过程中，执行了Thread.yield()方法，当前线程放弃CPU，但不会释放锁。</p></li><li><p>在执行同步代码块的过程中，其他线程执行了当前对象的suspend()方法，当前线程被暂停，但不会释放锁。但Thread类的suspend()方法已经被废弃。</p></li></ol></blockquote><h2 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h2><ul><li><strong>常用的模型：生产者与消费者模型</strong></li></ul><p><strong>object中提供的等待唤醒方法如下</strong></p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>当前线程等待并且释放所占锁，直到另外一个线程调用notify()或者notifyaAll</td></tr><tr><td>void notify()</td><td>唤醒正在等待的单个线程</td></tr><tr><td>void notufyAll()</td><td>唤醒正在等待的所有线程</td></tr></tbody></table><blockquote><p><strong>上述方法应该使用当前同步锁对象调用</strong><br><strong>注意：一定是先唤醒别人在等待，相当于自己叫醒别人再晕过去，否则相当于自己先晕过去没法叫人</strong></p></blockquote><p>代码实现：</p><ul><li>账户类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> String cardId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> money;   <span class="hljs-comment">//余额</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(String cardId, <span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 小红 小明：取钱</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DrawMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName(); <span class="hljs-comment">//取钱人</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money &gt;= money) &#123;<br>                <span class="hljs-comment">// 钱够，可以取钱</span><br>                <span class="hljs-built_in">this</span>.money -= money;<br>                System.out.println(name + <span class="hljs-string">&quot;取钱成功，取出&quot;</span> + money + <span class="hljs-string">&quot;元！余额是：&quot;</span> + <span class="hljs-built_in">this</span>.money);<br>                <span class="hljs-comment">// 没钱了</span><br>                <span class="hljs-comment">// 钱不够</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 钱不够，不可取</span><br>                <span class="hljs-comment">// 唤醒别人存钱，等待自己取钱</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待，顺便放弃锁</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 亲爹 干爹 岳父：取钱</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> money</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">depositMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> Thread.currentThread().getName(); <span class="hljs-comment">//存钱人</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.money == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//没钱了，存钱</span><br>                <span class="hljs-built_in">this</span>.money += money;<br>                System.out.println(name + <span class="hljs-string">&quot;存钱&quot;</span> + money + <span class="hljs-string">&quot;元成功，余额为&quot;</span> + <span class="hljs-built_in">this</span>.money + <span class="hljs-string">&quot;元！&quot;</span>);<br>                <span class="hljs-comment">// 存完钱了</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 有钱了，不用存钱</span><br>                <span class="hljs-built_in">this</span>.notifyAll();   <span class="hljs-comment">//唤醒其他所有的线程</span><br>                <span class="hljs-built_in">this</span>.wait();    <span class="hljs-comment">//锁对象，让当前线程进入等待</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCardId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCardId</span><span class="hljs-params">(String cardId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.cardId = cardId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMoney</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>取钱线程类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Account acc;    <span class="hljs-comment">//定义一个账户对象，便于对账户对象进行操作</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DrawThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//不断的存取前</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.DrawMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);     <span class="hljs-comment">//每隔三秒取一次钱</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>存钱线程类：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 取钱的线程类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DepositThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> Account acc;    <span class="hljs-comment">//定义一个账户对象，便于对账户对象进行操作</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DepositThread</span><span class="hljs-params">(Account acc, String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>        <span class="hljs-built_in">this</span>.acc = acc;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//不断的存取前</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            acc.depositMoney(<span class="hljs-number">100000</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">2</span> * <span class="hljs-number">1000</span>);     <span class="hljs-comment">//每隔两秒存一次钱</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主程序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 三个父亲线程（生产者） 两个孩子线程（消费者） 模拟存取钱通信思想（一存 一取）</span><br>        <span class="hljs-comment">// 1.创建账户对象，代表五个人共同操作的账户</span><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-string">&quot;ICBC-999&quot;</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">//初始化零元</span><br><br>        <span class="hljs-comment">// 2.创建两个取钱线程 小明 小红</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小明&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawThread</span>(acc, <span class="hljs-string">&quot;小红&quot;</span>).start();<br><br>        <span class="hljs-comment">// 3.创建三个存钱线程 亲爹 干爹 岳父</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;亲爹&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;干爹&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">DepositThread</span>(acc, <span class="hljs-string">&quot;岳父&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="线程池的创建与使用"><a href="#线程池的创建与使用" class="headerlink" title="线程池的创建与使用"></a>线程池的创建与使用</h2><ul><li><p><strong>线程池是一个可以复用线程的技术。解决了每次都为新请求创建线程，导致开销较大的问题</strong></p><p>JDK5.0起提供了代表线程池的接口：ExecutorService</p><blockquote><p>得到线程池对象的两种办法：<br>一、使用ExecutorService的实现类ThreadPoolExecutor自己创建一个线程池对象。<br>二、使用Executors（线程池的工具类）调用方法放回不同特点的线程池对象。</p></blockquote></li><li><p><strong>ThreadPoolExecutor构造器</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ThreadPoolExecutor（<span class="hljs-type">int</span> corePoolSize<span class="hljs-comment">//指定线程池的线程数量（核心线程）,不小于0</span><br><span class="hljs-type">int</span> maximumPoolSize,<span class="hljs-comment">//指定线程池可支持的最大线程数，最大数量&gt;=核心线程数量</span><br><span class="hljs-type">long</span> keepAliveTIme,<span class="hljs-comment">//指定临时线程的最大存活时间，大于0</span><br>TimeUnit unit,<span class="hljs-comment">//存活时间的单位（秒，分，时，天）：unit，时间单位</span><br>BlockingQueue workQueue,<span class="hljs-comment">//指定任务队列：workQueue，不能为null</span><br>ThreadFactory threadFactory,<span class="hljs-comment">//指定用那个线程工厂创建线程：threadFactory ,不能为null</span><br>RejectedExecutionHandler handler)<span class="hljs-comment">//指定线程忙，任务慢的时候，新任务来了怎么办，即拒绝策略：handler,不能为null</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>（重要！！！）注意两点：</strong><br><strong>临时线程什么时候创建：新任务提交时发现核心线程都在忙，任务队列满，还可以创建临时线程时才会创建。</strong><br><strong>什么时候开始拒绝任务：核心线程和临时线程都在忙，任务队列都满，新任务过来会拒绝。</strong></p></blockquote><p>ExecutorService的常用方法：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>void execute(Runable command)</td><td>执行任务，无返回值，一般用于执行Runnable任务</td></tr><tr><td>Future submit(Callable Task</td><td>执行任务，返回未来任务对象获取线程结果，一般用于执行Callable任务</td></tr><tr><td>void shutdown()</td><td>等待任务执行完毕后关闭线程池</td></tr><tr><td>List shutdownNow()</td><td>立即关闭，停止正在执行的任务，返回队列中未执行的任务</td></tr></tbody></table><p>拒绝策略：</p><table><thead><tr><th>策略</th><th>详解</th></tr></thead><tbody><tr><td>ThreadPoolExecutor.AbortPolicy</td><td>丢弃任务抛出RejectedExecutionException异常</td></tr><tr><td>ThreadPoolExecutor.DiscardPolicy</td><td>丢弃任务不抛出异常（不推荐）</td></tr><tr><td>ThreadPoolExecutor.DiscardOldestPolicy</td><td>抛弃等待最久的任务并把当前任务加入队列</td></tr><tr><td>ThreadPoolExecutor.CallerRunsPolicy</td><td>由主线程负责调用的run()方法绕过线程池直接执行，即来新任务主线程亲自服务</td></tr></tbody></table></li><li><p><strong>Runnabler任务处理</strong></p><p>Runnable实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;输出了：HelloWorld&quot;</span> + i);<br>        &#125;<br>        <span class="hljs-comment">// 睡眠线程，观察线程的执行情况</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;本任务与线程绑定了，进入休眠状态了~~~&quot;</span>);<br>            Thread.sleep(<span class="hljs-number">1000000</span>);  <span class="hljs-comment">//让其睡眠时间久一点，便于观察线程池的复用情况</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程池创建代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">threadPoolDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1.创建线程池对象</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *     public ThreadPoolExecutor(int corePoolSize,</span><br><span class="hljs-comment">         *                               int maximumPoolSize,</span><br><span class="hljs-comment">         *                               long keepAliveTime,</span><br><span class="hljs-comment">         *                               TimeUnit unit,</span><br><span class="hljs-comment">         *                               BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-comment">         *                               ThreadFactory threadFactory,</span><br><span class="hljs-comment">         *                               RejectedExecutionHandler handler) &#123;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">// 2.把任务给线程池处理</span><br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">//核心线程运行</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//不创建临时线程</span><br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);<br>        pool.execute(target);       <span class="hljs-comment">//任务队列满了！！核心线程都忙！！</span><br><br>        <span class="hljs-comment">//创建临时线程</span><br>        pool.execute(target);<br>        pool.execute(target);<br><br>        <span class="hljs-comment">//拒绝策略触发</span><br>        pool.execute(target);<br><br>        <span class="hljs-comment">//关闭线程池（开发一般不使用，线程池作用就是长久存活）</span><br>        <span class="hljs-comment">//pool.shutdownNow();     //立即关闭，即使任务未完成也关闭</span><br>        <span class="hljs-comment">//pool.shutdown();    //等待任务执行完毕再关闭</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/Javasethread-4%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="image-20231208193517302"></p></li><li><p><strong>callable任务处理</strong></p></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">threadPoolDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.创建线程池对象</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *     public ThreadPoolExecutor(int corePoolSize,</span><br><span class="hljs-comment">         *                               int maximumPoolSize,</span><br><span class="hljs-comment">         *                               long keepAliveTime,</span><br><span class="hljs-comment">         *                               TimeUnit unit,</span><br><span class="hljs-comment">         *                               BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-comment">         *                               ThreadFactory threadFactory,</span><br><span class="hljs-comment">         *                               RejectedExecutionHandler handler) &#123;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">5</span>), Executors.defaultThreadFactory(),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.AbortPolicy());<br><br>        <span class="hljs-comment">// 2.把任务给线程池处理</span><br>        Future&lt;String&gt; f1 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">100</span>));<br>        Future&lt;String&gt; f2 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">200</span>));<br>        Future&lt;String&gt; f3 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">300</span>));<br>        Future&lt;String&gt; f4 = pool.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>(<span class="hljs-number">400</span>));<br><br>        System.out.println(f1.get());<br>        System.out.println(f2.get());<br>        System.out.println(f3.get());<br>        System.out.println(f4.get());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="重要！）-Executors工具类实现线程池"><a href="#重要！）-Executors工具类实现线程池" class="headerlink" title="重要！） Executors工具类实现线程池"></a><strong>重要！） Executors工具类实现线程池</strong></h2><p>Executors获得线程池的常用方法：</p><table><thead><tr><th align="left">方法名称</th><th>说明</th></tr></thead><tbody><tr><td align="left">public static ExecutorService newCachedThreadPool()</td><td>线程数随着任务增加而增加，若线程任务执行完毕且空闲一段时间会被回收</td></tr><tr><td align="left">public static ExecutorService newFixedThreadPool()</td><td>创建固定数量的线程池。若某个线程因为异常而结束，那么线程池会补充一个新线程代替它</td></tr><tr><td align="left">public static ExecutorService newSingleThreadExecutor()</td><td>创建只有一个线程对象的线程池对象，如果该线程因为异常而结束，那么线程池会补充一个新线程</td></tr><tr><td align="left">public static ScheduledExecutorService newScheduledThreadPool(int PoolSize)</td><td>创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务</td></tr></tbody></table><blockquote><p><strong>注意：Executors的底层其实也是基于线程池的实现类ThreadPoolExecutor创建线程池对象</strong><br><strong>注意：大型并发环境使用Executors如果不注意可能会出现系统风险，例如阿里开发手册不建议使用Executors创建线程池对象，而是建 议使用ThreadPoolExecutor自己创建</strong></p></blockquote><table><thead><tr><th align="left">方法名称</th><th>存在问题</th></tr></thead><tbody><tr><td align="left">public static ExecutorService newCachedThreadPool()</td><td>允许请求的任务队列长度为Integer.MAX_VALUE，可能出现OOM错误(OutOfMemoryError)</td></tr><tr><td align="left">public static ExecutorService newFixedThreadPool()</td><td>同上</td></tr><tr><td align="left">public static ExecutorService newSingleThreadExecutor()</td><td>创建的线程数量上限为Integer.MAX_VALUE，线程数随着任务1:1增长，可能出现OOM错误(OutOfMemoryError)</td></tr><tr><td align="left">public static ScheduledExecutorService newScheduledThreadPool(int PoolSize)</td><td>同上</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象进阶</title>
    <link href="/2023/12/05/Java%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/12/05/Java%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<p>Java面向对象主要知识点</p><span id="more"></span><h1 id="Java面向对象进阶"><a href="#Java面向对象进阶" class="headerlink" title="Java面向对象进阶"></a>Java面向对象进阶</h1><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ul><li>static修饰的静态变量和方法是所有实例或者类名共用。<strong>堆之中的内存也是如此，随着类的加载而加载</strong></li><li>调用：类名和实例都可以调用</li><li>作用： 多用于工具类和测试类</li><li><strong>注意事项：静态方法只能访问静态变量和方法，但非静态可以访问静态</strong></li></ul><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul><li>本质：一个指向对象地址的变量，在函数参数列表内默认加载</li></ul><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>封装对应数据并提供数据对应的行为</li></ul><h3 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（extends）</h3><ul><li><p>类于类之间存在共性的时候，考虑使用继承，减少代码复用以及代码维护</p></li><li><p>区别于C++：Java只能单继承，不能多继承但是能多次继承</p></li><li><p>特点：</p><ul><li><strong>子类继承父类的所有成员变量和非私有的成员方法</strong>（构造函数不继承），存储在堆之中的形式和方法也有所不同</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-2.png" alt="image-20231205232908915"></p><ul><li><p>变量，方法的赋值与调用：</p><ul><li>当子类的相关（未区分）变量被调用或者赋值的时候会优先寻找子类的变量，<strong>就近原则</strong>（局部-&gt;本类-&gt;父类）</li><li><strong>Super</strong>修饰方法被调用的时候直接调用父类中的同名方法，本质是父类存储空间</li><li><strong>@Override</strong>重写父类方法<ul><li>重写的本质：<strong>虚方法表</strong>（一个类之中非静态，非私有，非固定（final）的方法表）<ul><li>当子类继承的时候会将父类的虚方法表中的方法加到虚方法表内，在此基础上加上自己的方法</li><li>当重写发生的时候会将父类的继承方法进行<strong>覆盖</strong></li><li>重写的方法会影响继承子类的子类</li></ul></li><li>重写方法名称和形参列表应与父类一致</li></ul></li></ul></li><li><p>构造方法：</p><ul><li><p>无法继承</p></li><li><p>子类之中的所有构造方法<strong>默认</strong>先访问父类之中的无参构造，再执行自己<strong>以访问父类数据</strong></p></li><li><p>可以使用super（参数列表）调用父类有参构造</p></li></ul></li></ul></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li><p>代码形式：（<strong>继承&#x2F;实现是多态的前提条件</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当Person是Student父类时候</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure></li><li><p>本质：将子类对象赋值给父类类型引用</p></li><li><p>特点：</p><ul><li><p>调用变量时优先调用<strong>父类变量</strong></p></li><li><p>调用方法时调用<strong>子类方法</strong>，但是父类未含有此方法编译会报错</p><ul><li>原因：子类方法将虚方法表内父类方法覆盖了，但变量无法覆盖</li></ul></li></ul></li><li><p>优势：</p><ul><li>可以实现解耦合，便于维护</li><li>函数参数传入方便，子类共用父类传参函数</li></ul></li></ul><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><ul><li><p>修饰变量</p><ul><li>修饰基本类型： 值不变</li><li>修饰引用类型： <strong>地址不变，但是内部值可以改变</strong></li></ul></li><li><p>修饰方法： 最终方法，不能重写</p></li><li><p>修饰类：最终类，无法继承</p></li></ul><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><ul><li><p><strong>无法实例化</strong>，但可以有构造方法</p></li><li><p>有抽象方法一定是抽象类，反之不一定</p></li><li><p>抽象子类：</p><ul><li>要实例化则要重写所有抽象方法，否则仍就是抽象类</li></ul></li><li><p>目的：规范子类格式</p></li></ul><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><ul><li><p>无法实例化</p></li><li><p>通过implements实现</p></li><li><p>接口子类：</p><ul><li>要实例化则要重写所有接口方法，否则仍就是抽象类</li></ul></li><li><p><strong>一个类可以实现多个接口</strong>，还可以同时继承</p></li><li><p>特点：</p><ul><li>成员变量： 只能是常量，默认public static final修饰</li><li>不含有构造方法</li><li>成员方法： 只能是抽象方法，默认public abstract修饰</li></ul></li></ul><h2 id="内部类和外部类"><a href="#内部类和外部类" class="headerlink" title="内部类和外部类"></a>内部类和外部类</h2><p>…….</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面向对象基础</title>
    <link href="/2023/12/05/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/12/05/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Java面向对象的一些基础知识点</p><span id="more"></span><h1 id="Java基础：面向对象"><a href="#Java基础：面向对象" class="headerlink" title="Java基础：面向对象"></a>Java基础：面向对象</h1><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><ul><li><strong>private</strong> ：可以修饰成员变量，成员方法，构造方法，不能修饰类(此刻指的是外部类，内部类不加以考虑)。被private修饰的成员只能在其修饰的本类中访问，在其他类中不能调用（这里也可以看出为什么不能修饰class，因为private本来就是作用于类内部的东西）。</li><li><strong>default</strong> ：可以修饰类，成员变量，成员方法，构造方法。被默认权限修饰后，其只能被<strong>本类以及同包下</strong>的其他类访问。</li><li><strong>protected</strong>：可以修饰成员变量，成员方法，构造方法，但不能修饰类(此处指的是外部类，内部类不加以考虑)。被protected修饰后，只能被<strong>同包下的其他类</strong>访问。如果不同包下的类要访问被protected修饰的成员，这个类必须是<strong>其子类</strong>。</li><li><strong>public</strong> ：权限最大的修饰符，他可以修饰类，成员变量，成员方法，构造方法。被public修饰后，可以再任何一个类中，不管同不同包，任意使用。</li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-3.png" alt="image-20231205233323143"></p><h2 id="工作内存管理"><a href="#工作内存管理" class="headerlink" title="工作内存管理"></a>工作内存管理</h2><ul><li><p>方法区：字节码文件记载时进入的内存（<strong>类似于声明，不同文件class记录的变量和方法</strong>）</p></li><li><p>栈： 方法运行时所进入的内存，变量也是一样。运行完毕的时候移出，相应的指向堆中的变量存储空间也会消失</p></li><li><p>堆：new出来的变量（<strong>非静态实例</strong>）都会储存在这里（<strong>但是new的本体是一个指向堆空间的变量存储在栈之中</strong>）</p><p><strong>注： 进行简单的赋值操作如A b&#x3D;new A（）；A a&#x3D;b; 会使得a,b两个变量指向同一片堆内存;</strong></p></li></ul><p><img src="https://fluid-1322937929.cos.ap-beijing.myqcloud.com/image/JavaSe-1.png" alt="image-20231205232708431"></p><h2 id="工具类ArrayList集合使用"><a href="#工具类ArrayList集合使用" class="headerlink" title="工具类ArrayList集合使用"></a>工具类ArrayList集合使用</h2><ul><li><p>对比于数组： 长度不固定，有自然的相应接口函数</p></li><li><p>特点：只能存引用数据类型而非基本数据类型</p></li><li><p>使用：<strong>ArrayList本身含有索引</strong></p><ul><li><p>定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;String&gt; list =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;;<br></code></pre></td></tr></table></figure></li><li><p>操作函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(E e)</span>;<span class="hljs-comment">//删除</span><br>E <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<span class="hljs-comment">//索引删除</span><br>set(); size();<span class="hljs-comment">//等等</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>集合拓展：</p><ul><li><p>单列集合<Conllection></p><ul><li><p>List系列集合：有序，可重复，有索引</p></li><li><p>Set系列：无序，不重复，无索引</p></li><li><p>迭代器扫描集合：</p></li><li><pre><code class="java">Iteretor&lt;String&gt; it = list.iterator();while(it.hasNext())&#123;    String str=it.next();&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>+ 增强<span class="hljs-keyword">for</span>遍历：<br><br>  ```<span class="hljs-function">java</span><br><span class="hljs-function">  <span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">String</span> s:List)</span></span>&#123;<br>  <span class="hljs-comment">//s的操作不会影响list的数据</span><br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>lamada表达式</p><p>…</p></li></ul></li><li><p>双列集合<map></p><ul><li>键值集合对象</li><li>键不可以重复，值可以重复,无序无索引</li><li>三种遍历..</li><li>hashmap（<strong>重复的键put进去会覆盖原有键值，与hashset相反</strong>）<ul><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证键的唯一</li><li><strong>如果键存储的是自定义对象，需要重写hashCode和equals方法,如果值存储自定义对象，不需要重写hashCode和equals方法</strong></li></ul></li><li>treemap等….</li></ul></li></ul></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ul><li><p>包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;泛型&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>面向对象</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC学习</title>
    <link href="/2023/12/01/JDBC%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/01/JDBC%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>JDBC连接数据库的学习与应用</p><span id="more"></span><h1 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h1><ul><li>Java DataBase Connectivity</li><li>JDBC就是一套使用java语言操作关系数据库的一套API，不同类型数据库都有相应实现类</li></ul><h1 id="JDBC基本流程"><a href="#JDBC基本流程" class="headerlink" title="JDBC基本流程"></a>JDBC基本流程</h1><ul><li><p>导入jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;mysql&lt;/groupId&gt;<br>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.28</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverMannager.getConnection(url,username,password);<br></code></pre></td></tr></table></figure></li><li><p>自定义sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String sql=<span class="hljs-string">&quot;Update...&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>获取执行对象并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.creatStatement();<br><span class="hljs-comment">//执行,返回影响行数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stmt.executeUpdate(sql);<br></code></pre></td></tr></table></figure></li><li><p>处理返回结果</p></li><li><p>释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">stmt.close();<br>conn.close();<span class="hljs-comment">//Resultset资源也要释放</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="JDBC具体API实现"><a href="#JDBC具体API实现" class="headerlink" title="JDBC具体API实现"></a>JDBC具体API实现</h1><h2 id="Drivermanager驱动管理类"><a href="#Drivermanager驱动管理类" class="headerlink" title="Drivermanager驱动管理类"></a>Drivermanager驱动管理类</h2><ul><li><p>本质：<strong>一个可以直接调用其静态方法的工具类</strong></p></li><li><p>作用：注册驱动并且获取数据库连接</p></li><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//forName方法实际调用</span><br>DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>());<br></code></pre></td></tr></table></figure><p>在jar包里面的有自动的加载驱动方法，可以不写</p></li><li><p>获取数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Static Connection <span class="hljs-title function_">getconnection</span><span class="hljs-params">(string url,string user,string passowrd)</span>;<br></code></pre></td></tr></table></figure><ul><li><p>url: 连接路径</p><ul><li><p>语法： &#x3D;&#x3D;jdbc:mysql:&#x2F;&#x2F;ip地址(域名)：端口号&#x2F;数据库名称？参数键值对1&amp;参数键值对2&#x3D;&#x3D;</p></li><li><p>示例：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1</p></li><li><p>如果连接的是本地的mysql则可以省略ip地址</p></li><li><p>注：配置userSSL&#x3D;false,禁用安全连接方式，解决ssl警告提示：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db1?useSSL&#x3D;false</p></li></ul></li><li><p>user: 连接端口用户名</p></li><li><p>password: 密码</p></li></ul></li></ul><h2 id="Connection数据库连接对象"><a href="#Connection数据库连接对象" class="headerlink" title="Connection数据库连接对象"></a>Connection数据库连接对象</h2><ul><li><p>作用： 获取sql执行对象，管理事务</p></li><li><p>获取执行sql对象</p><ul><li><p>普通执行对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Statement <span class="hljs-title function_">creatstatement</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>预编译sql执行对象：防止sql注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PreparedStatement <span class="hljs-title function_">preparedStatement</span><span class="hljs-params">(sql)</span>;<br></code></pre></td></tr></table></figure></li><li><p>执行存储过程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">CallableStatement <span class="hljs-title function_">prepareCall</span><span class="hljs-params">(sql)</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>事务管理</p><ul><li><p>Mysql事务管理</p><ul><li>开启事务：BEGIN;&#x2F;START TRANSACTION;</li><li>提交事务：COMMIT;</li><li>回滚事务：ROLLBACK;</li></ul></li><li><p>JDBC事务管理</p><ul><li><p>&#x3D;&#x3D;一般用于异常处理&#x3D;&#x3D;</p></li><li><p>开启： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">setAutoCommit(<span class="hljs-type">boolean</span> autoCommit);<span class="hljs-comment">//true为自动提交，false为手动提交即为开启事务</span><br></code></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">commit();<br></code></pre></td></tr></table></figure></li><li><p>回滚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">rollback();<br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="Statement执行对象"><a href="#Statement执行对象" class="headerlink" title="Statement执行对象"></a>Statement执行对象</h2><ul><li><p>作用：执行sql语句</p></li><li><p>&#x3D;&#x3D;执行sql语句细节&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> exeuteUpdate;<span class="hljs-comment">//执行DML（增删改），DDL（库的增删改）语句</span><br>-&gt;返回值（<span class="hljs-number">1</span>）DML为影响行数，<span class="hljs-number">0</span>为失败 （<span class="hljs-number">2</span>）DDL执行成功为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet <span class="hljs-title function_">exeuteQuery</span><span class="hljs-params">(sql)</span>; <span class="hljs-comment">//执行DQL（查询）语句</span><br>-&gt;返回值： ResultSet结果集对象<br></code></pre></td></tr></table></figure></li></ul><h2 id="ResultSet结果集对象"><a href="#ResultSet结果集对象" class="headerlink" title="ResultSet结果集对象"></a>ResultSet结果集对象</h2><ul><li><p>作用：<strong>对查询结果进行封装</strong></p></li><li><p>获取查询结果</p><ul><li><p>结果行移动以及判断是否有效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<span class="hljs-comment">//（1）将光标向下移动一行 （2）判断当前行是否有效，true为有效</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">(xxx数据类型) getxxx(参数); <span class="hljs-comment">//获取一行里面的数据，由resultset对象调用</span><br>-&gt;参数：<span class="hljs-number">1.</span> <span class="hljs-type">int</span> 类型参数: 列编号，从<span class="hljs-number">1</span>开始 <span class="hljs-number">2.</span>String 类型参数：列名称<br></code></pre></td></tr></table></figure><ul><li>注：<strong>每调用一次next()方法，光标向下移动一行。最初它位于第一行之前，因此第一次调用next()应把光标置于第一行上，使它成为当前行。</strong></li></ul></li></ul></li></ul><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><ul><li><p>作用：继承自statement,用于执行预编译sql对象，防止sql注入</p><blockquote><p>sql注入：通过操作输入修改事先定义的sql语句，以达到执行代码对服务器攻击的方法（核心是字符拼接）</p></blockquote></li><li><p>&#x3D;&#x3D;一般用于用户登录&#x3D;&#x3D;</p><ul><li><p>获取Preparedstatement对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//?使用占位符替代</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select *from user where username=? and password=?&quot;</span>;<br><span class="hljs-comment">//通过Connection对象的函数preparestatement()方法获取，传入相应sql语句</span><br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">pstmt</span> <span class="hljs-operator">=</span>conn.preparestatement(sql);<br></code></pre></td></tr></table></figure></li><li><p>设置参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">setxxx(参数<span class="hljs-number">1</span>，参数<span class="hljs-number">2</span>)；<span class="hljs-comment">//给？赋值</span><br>-&gt;参数：参数<span class="hljs-number">1</span>：？的位置编号,从<span class="hljs-number">1</span>开始；参数<span class="hljs-number">2</span>：？的值<br></code></pre></td></tr></table></figure></li><li><p>执行sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">exeuteUpdate()/exeuteQuery();<span class="hljs-comment">//不需要再传sql</span><br></code></pre></td></tr></table></figure></li><li><p>预编译功能开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jdbc:mysql:<span class="hljs-comment">//127.0.0.1:3306/db1?useSSL=false&amp;useServerPreStmts=true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><ul><li><p>介绍： 数据库连接池本质是个容器，负责分配管理数据库连接；</p></li><li><p>功能：允许应用重复使用一个现有的数据库连接，而不是重新建立一个；<strong>意思就是从一个用户一个连接到所有用户共享一个到数据库的连接</strong>，&#x3D;&#x3D;本质是通过管理多个connection都通过一个连接到数据库&#x3D;&#x3D;</p></li><li><p>好处：资源重用，提升响应速度，避免数据库连接遗漏</p></li></ul><h2 id="数据库池实现"><a href="#数据库池实现" class="headerlink" title="数据库池实现"></a>数据库池实现</h2><ul><li><p>标准接口： &#x3D;&#x3D;Datasource&#x3D;&#x3D;</p><ul><li><p>官方（SUN）提供的数据库连接池标准接口，由第三方实现此接口</p></li><li><p>功能：获取连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见数据库连接池</p><ul><li>DBCP</li><li>C3P0</li><li>Druid</li></ul></li><li><p>&#x3D;&#x3D;Druid（德鲁伊）&#x3D;&#x3D;</p><ul><li>Druid是阿里巴巴开源的数据库连接池项目</li><li>功能强大</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JDBC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security介绍与认证功能</title>
    <link href="/2023/11/25/Spring%20Security%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD/"/>
    <url>/2023/11/25/Spring%20Security%E4%BB%8B%E7%BB%8D%E4%B8%8E%E8%AE%A4%E8%AF%81%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>Spring sercurity框架介绍</p><span id="more"></span><h1 id="Security-是什么"><a href="#Security-是什么" class="headerlink" title="Security 是什么"></a>Security 是什么</h1><p><strong>Spring Security 是一个功能强大且可高度定制的身份验证和访问控制框架，它专注于为 Java 应用程序提供身份验证和授权。</strong></p><h1 id="Sercurity-的主要功能构成"><a href="#Sercurity-的主要功能构成" class="headerlink" title="Sercurity 的主要功能构成"></a>Sercurity 的主要功能构成</h1><p>&#x3D;&#x3D;Spring sercurity 所有的功能都来源于来自构成它的各种 Filters (过滤器)&#x3D;&#x3D;</p><ul><li>Sercurity 的功能我们可以划分为传统的两大类：</li></ul><p><strong>1. 认证：确认用户身份的合法性即识别用户</strong><br><strong>2. 授权：检验用户所拥有权限并返回给用户</strong></p><p>这里主要介绍认证的应用接口</p><h1 id="Sercurity-认证流程"><a href="#Sercurity-认证流程" class="headerlink" title="Sercurity 认证流程"></a>Sercurity 认证流程</h1><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>Sercurity 识别框架主要提供了四个接口：</p><ul><li>Userdetails 接口：用于封装用户的详细信息例如用户名和密码之类，默认实现类是 User，自定义实现需求的用户主体只需要实现这个接口即可，下面是示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;  <br><span class="hljs-comment">//必要方法请自行补充，table注释为数据库链接注释，下文会讲</span><br><span class="hljs-meta">@TableId(value=&quot;id&quot;,type= IdType.AUTO)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">long</span> id;  <br><span class="hljs-meta">@TableField(&quot;username&quot;)</span><br><span class="hljs-keyword">private</span> String username;  <br><span class="hljs-meta">@TableField(&quot;password&quot;)</span><br><span class="hljs-keyword">private</span> String password;  <br><span class="hljs-meta">@TableField(exist = false)</span><span class="hljs-comment">//不在表内</span><br><span class="hljs-keyword">private</span> List&lt;GrantedAuthority&gt; authorities;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>UserDetailsService 接口：用于进行用户验证的地方，其中提供了一个加载用户的方法        loadUserByUsername，重写这段方法即可自定义用户验证方法, 常见的比如通过数据库验证，这里以 mysql 数据库为例（这里实际上实现通过数据库授权）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用user类型均为自定义用户类型</span><br><span class="hljs-comment">此外，除了需要配置数据库端口，还需要引入入mybatis-plus进行连接和sql语句操作</span><br><span class="hljs-comment">具体需求如下：1，多余的对应数据库中需要操作的表的类，我这里多加了一个权限类perm对应权限表，并进行相应注释</span><br><span class="hljs-comment"> 2，实现相应的数据库操作marpper类</span><br><span class="hljs-comment"> 3，写出对应表的service接口         </span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//实现service，以user为例子</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;User&gt; &#123;  <br>&#125;<br><br><span class="hljs-comment">//实现marpper类，以user类为例子</span><br><span class="hljs-meta">@Mapper</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;  <br>&#125;<br><br><span class="hljs-comment">//具体重写方法</span><br><span class="hljs-comment">//拦截返回的用户信息（username）进行user加载  </span><br><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span>, UserDetailsService &#123;  <br><br><span class="hljs-meta">@Autowired</span>  <br>UserMapper userMapper;  <br><br><span class="hljs-meta">@Autowired</span>  <br>PermMapper permMapper;<br><br><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;  <br><span class="hljs-comment">//在数据库内查找username对应的用户对象  </span><br>QueryWrapper queryWrapper=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();  <br>queryWrapper.eq(<span class="hljs-string">&quot;username&quot;</span>,username);  <br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>userMapper.selectOne(queryWrapper);  <br><br><span class="hljs-comment">//异常处理  </span><br><span class="hljs-keyword">if</span> (user==<span class="hljs-literal">null</span>) &#123;  <br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;用户名未找到&quot;</span>);  <br>&#125;  <br><br><span class="hljs-comment">//根据id查找权限  </span><br><span class="hljs-type">QueryWrapper</span> <span class="hljs-variable">permQueryWrapper</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>();  <br>permQueryWrapper.eq(<span class="hljs-string">&quot;id&quot;</span>,user.getId());  <br><br>List&lt;Perm&gt; perms= permMapper.selectList(permQueryWrapper);  <br><br>List&lt;String&gt; permTags=perms.stream().map(Perm::getAuthority).collect(Collectors.toList());  <br><br>user.setAuthorities(AuthorityUtils.createAuthorityList(permTags));  <br><br><span class="hljs-keyword">return</span> user;  <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Authentication：主要包含认证过的用户信息，UsernamePasswordAuthenticationToken 便是它的一个实现类</p></li><li><p>AuthenticationManager：接口用于执行认证 Authentication 操作，这里直接在     userdetailservice执行认证即可</p></li></ul><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><ul><li>初步认证过后可以进行 token 令牌校验来减少反复认证，默认实现是 UsernamePasswordAuthenticationToken</li></ul><p>这里我们将进行自定义的 Jwt 令牌校验，以及</p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>Sercurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM05-Spring中的AOP概念</title>
    <link href="/2023/05/30/SSM05-Spring%E4%B8%AD%E7%9A%84AOP%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/05/30/SSM05-Spring%E4%B8%AD%E7%9A%84AOP%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>详细的描述了Spring中的AOP概念。</p><span id="more"></span><h1 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p><strong>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构</strong></p><p>​<strong>OOP(object Oriented Programming)面向对象编程</strong></p><p><strong>作用：在不惊动原始设计的基础上为其进行功能增强</strong></p><p><strong>Spring理念：无入侵式&#x2F;无侵入式</strong></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><ol><li><p>连接点 ( JoinPoint )：程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等</p><ul><li><p>在SpringAOP中，理解为方法的执行</p></li><li><p>切入点 ( Pointcut )：匹配连接点的式子</p><ul><li>在springAoP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法<ul><li>一个具体方法: com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li><li>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li></ul></li></ul></li></ul></li><li><p>通知(Advice) ：在切入点处执行的操作，也就是共性功能</p><ul><li>在SpringAOP中，功能最终以方法的形式呈现</li></ul></li><li><p>通知类∶定义通知的类</p></li><li><p>切面( Aspect )︰描述通知与切入点的对应关系</p></li></ol><p>样例（源自黑马程序员，<strong>侵删</strong>）</p><p><img src="https://wang-nine.cn/images/SSM04-01AOP%E6%A0%B7%E4%BE%8B.png" alt="SSM04-01AOP样例"></p><h1 id="AOP入门案例"><a href="#AOP入门案例" class="headerlink" title="AOP入门案例"></a>AOP入门案例</h1><p>案例设定:测定接口执行效率<br>简化设定:在接口执行前输出当前系统时间<br>开发模式:XML or <strong>注解</strong></p><p>思路分析∶</p><ol><li>导入坐标（ pom.xml )</li><li>制作连接点方法（原始操作，Dao接口与实现类）</li><li>制作共性功能（通知类与通知)</li><li>定义切入点</li><li>绑定切入点与通知关系（切面)</li></ol><p>基础代码样例（源自黑马程序员）：</p><ol><li>导入坐标</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>切面类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br><br>    <span class="hljs-meta">@Pointcut(&quot;execution(切入点表达式)&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-meta">@Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;------------------------------&quot;</span>);<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10000</span> ; i++) &#123;<br>            <span class="hljs-comment">//调用原始操作</span><br>            pjp.proceed();<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">totalTime</span> <span class="hljs-operator">=</span> endTime-startTime;<br>        System.out.println(<span class="hljs-string">&quot;执行万次消耗时间：&quot;</span> + totalTime + <span class="hljs-string">&quot;ms&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>主配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">加上注解 <span class="hljs-meta">@EnableAspectJAutoProxy</span><br></code></pre></td></tr></table></figure><p>剩余的代码不变，例如Dao接口和实现类，主函数</p><p>以上步骤总结：</p><ol><li>导入AOP坐标</li><li>定义dao接口与实现类</li><li>定义通知类，制作通知</li><li>定义切入点         <strong>说明︰切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑</strong></li><li>绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行<strong>位置</strong></li><li>定义通知类受Spring容器管理，并定义当前类为切面类，即添加 <strong>@Component</strong> 和 <strong>@Aspect</strong></li><li>开启Spring对AOP注解驱动支持，即在主配置类添加 <strong>@EnableAspectJAutoProxy</strong></li></ol><h1 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h1><ol><li>Spring容器启动</li><li>读取所有切面配置中的切入点</li><li>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点<ul><li>匹配失败：创建对象</li><li>匹配成功：创建原始对象（<strong>目标对象</strong>）的<strong>代理对象</strong></li></ul></li><li>获取bean的执行方法<ul><li>获取bean，调用方法并执行，完成操作</li><li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li></ul></li></ol><ul><li>目标对象（Target ）：原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li><li>代理（Proxy）：目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现</li></ul><h1 id="AOP深入"><a href="#AOP深入" class="headerlink" title="AOP深入"></a>AOP深入</h1><h2 id="AOP的切入点表达式"><a href="#AOP的切入点表达式" class="headerlink" title="AOP的切入点表达式"></a>AOP的切入点表达式</h2><p>切入点∶要进行增强的方法<br>切入点表达式∶要进行增强的方法的描述方式</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><p><strong>即可以对接口进行描述，也可以对实现类进行描述</strong></p><h4 id="切入点表达式标准格式"><a href="#切入点表达式标准格式" class="headerlink" title="切入点表达式标准格式"></a>切入点表达式标准格式</h4><p>动作关键字（访问修饰符 返回值.包名.类&#x2F;接口名.方法名（参数）异常名)</p><blockquote><p>execution (public User com.xxx.service.UserService.findById (int))</p></blockquote><ul><li>动作关键字∶描述切入点的行为动作，例如execution表示执行到指定切入点</li><li>访问修饰符：public , private等，可以省略</li><li>返回值</li><li>包名</li><li>类&#x2F;接口名</li><li>方法名</li><li>参数</li><li>异常名：方法定义中抛出指定异常，可以省略</li></ul><h4 id="可以使用通配符描述切入点，快速描述"><a href="#可以使用通配符描述切入点，快速描述" class="headerlink" title="可以使用通配符描述切入点，快速描述"></a>可以使用通配符描述切入点，快速描述</h4><ul><li><ul><li>︰单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</li></ul><blockquote><p>execution (public * com.xxx.<em>.UserService.find</em>(*))<br>匹配com.xxx包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p></blockquote></li><li><p>.. ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p><blockquote><p>execution (public User com..UserService.findById (..) )<br>匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方法</p></blockquote></li><li><p>+︰专用于匹配子类类型<br>execution(* *..<em>Service+.</em>(..))</p></li></ul><h4 id="切入点表达式的书写技巧"><a href="#切入点表达式的书写技巧" class="headerlink" title="切入点表达式的书写技巧"></a>切入点表达式的书写技巧</h4><ul><li>所有代码按照标准规范开发，否则以下技巧全部失效</li><li>描述切入点<strong>通常描述接口</strong>，而不描述实现类</li><li>访问控制修饰符针对接口开发均采用public描述（<strong>可省略访问控制修饰符描述</strong>）</li><li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</li><li><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用*做单个包描述匹配，或精准匹配</li><li><strong>接口名</strong>&#x2F;类名书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</li><li><strong>方法名</strong>书写以<strong>动词进行精准匹配</strong>，名词采用<em>匹配，例如getByld书写成getBy</em>,selectAll书写成selectAll</li><li>参数规则较为复杂，根据业务方法灵活调整</li><li>通常<strong>不使用异常作为匹配规则</strong></li></ul><h1 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h1><p><strong>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置AOP通知共分为5种类型</strong></p><ul><li>前置通知   <strong>@Before</strong></li><li>后置通知   <strong>@After</strong></li><li>环绕通知（<strong>重点</strong>）   <strong>@Around</strong>   <strong>需要对原始操作进行调用</strong></li><li>返回后通知（了解）   <strong>@AfterReturning</strong>   正常运行完才会运行</li><li>抛出异常后通知（了解）   <strong>@AfterThrowing</strong>   抛出异常才会运行</li></ul><p>环绕通知对原始操作的调用样例（<strong>注意有返回值时需要返回原始操作的返回值</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;around before advice ...&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;around after advice ...&quot;</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>@Around注意事项</strong></p><ol><li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知</li><li>通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li><li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</li><li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object</li><li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">signature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> pjp.getsignature();<span class="hljs-comment">//获取代理类和被代理类的信息。</span><br>system.out.println(signature.getDeclaringTypeName());<span class="hljs-comment">//获取原始方法的类名</span><br>system.out.println(signature.getName());<span class="hljs-comment">//获取原始方法的方法名</span><br></code></pre></td></tr></table></figure><h1 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h1><h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><p>获取切入点方法的参数</p><ul><li><p>JoinPoint :适用于前置、后置、返回后、抛出异常后通知</p></li><li><p>ProceedJointPoint :适用于环绕通知</p></li></ul><h2 id="获取返回值"><a href="#获取返回值" class="headerlink" title="获取返回值"></a>获取返回值</h2><p>获取切入点方法返回值</p><ul><li><p>返回后通知</p></li><li><p>环绕通知</p></li></ul><h2 id="获取异常"><a href="#获取异常" class="headerlink" title="获取异常"></a>获取异常</h2><p>获取切入点方法运行异常信息</p><ul><li><p>抛出异常后通知</p></li><li><p>环绕通知</p></li></ul><p>样例代码如下（来自黑马程序员，侵删）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.aop;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvice</span> &#123;<br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.itheima.dao.BookDao.findName(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pt</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//JoinPoint：用于描述切入点的对象，必须配置成通知方法中的第一个参数，可用于获取原始方法调用的参数</span><br><span class="hljs-comment">//    @Before(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint jp)</span> &#123;<br>        Object[] args = jp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        System.out.println(<span class="hljs-string">&quot;before advice ...&quot;</span> );<br>    &#125;<br><br><span class="hljs-comment">//    @After(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint jp)</span> &#123;<br>        Object[] args = jp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        System.out.println(<span class="hljs-string">&quot;after advice ...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//ProceedingJoinPoint：专用于环绕通知，是JoinPoint子类，可以实现对原始方法的调用</span><br><span class="hljs-comment">//    @Around(&quot;pt()&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp)</span> &#123;<br>        Object[] args = pjp.getArgs();<br>        System.out.println(Arrays.toString(args));<br>        args[<span class="hljs-number">0</span>] = <span class="hljs-number">666</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ret = pjp.proceed(args);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            t.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-comment">//设置返回后通知获取原始方法的返回值，要求returning属性值必须与方法形参名相同</span><br>    <span class="hljs-meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(JoinPoint jp,String ret)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterReturning advice ...&quot;</span>+ret);<br>    &#125;<br><br>    <span class="hljs-comment">//设置抛出异常后通知获取原始方法运行时抛出的异常对象，要求throwing属性值必须与方法形参名相同</span><br>    <span class="hljs-meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(Throwable t)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;afterThrowing advice ...&quot;</span>+t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
